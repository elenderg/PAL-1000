An abort message is a string.
 
To abort with a string:
If the compiler's abort flag is set, exit.
Set the compiler's abort flag.
Put the string into the compiler's abort message.
 
To abort with a string and a byte pointer:
If the compiler's abort flag is set, exit.
Set the compiler's abort flag.
Put the string into the compiler's abort message.
Find the compiler's abort path and the compiler's abort row# given the byte pointer.
If the compiler's abort path is blank, exit.
Extract a file name from the compiler's abort path.
Prepend "Error in " then the file name then ". " to the compiler's abort message.
 
To abort with a string and a rider:
If the rider's token is not blank, abort with the string and the rider's token's first; exit.
Abort with the string and the rider's source's last.

The adding built-in memory routines timer is a timer.
The adding built-in startup routine timer is a timer.
The addressing timer is a timer.
The calculating timer is a timer.
The compiling routine bodies timer is a timer.
The compiling routine headers timer is a timer.
The indexing utilities timer is a timer.
The linking timer is a timer.
The offsetting timer is a timer.
The loading timer is a timer.
The resolving globals timer is a timer.
The resolving types timer is a timer.
The scanning timer is a timer.
The transmogrifying timer is a timer.
The writing timer is a timer.

An address is a number.

To advance a buffer:
Append the return byte to the buffer.
Append the linefeed byte to the buffer.
 
To advance a buffer (twice):
Advance the buffer. 
Advance the buffer.

To append an entry to a buffer (with separator):
If the entry is nil, append "" to the buffer (with separator); exit.
Append the entry's name to the buffer (with separator).
 
To append a flag to a buffer (with separator):
Convert the flag to a string.
Append the string to the buffer (with separator).
To append a number to a buffer (as hex with separator):
Convert the number to a nibble string.
Append the nibble string to the buffer (with separator).
 
To append a number to a buffer (with separator):
Convert the number to a string.
Append the string to the buffer (with separator).
 
To append a ratio to a buffer (with separator):
Convert the ratio to a string.
Append the string to the buffer (with separator).
 
To append a routine to a buffer (with separator):
If the routine is nil, append "" to the buffer (with separator); exit.
Append the routine's moniker to the buffer (with separator).
To append a string to a buffer (with separator):
Append the string to the buffer.
Append "/" to the buffer.
 
To append a tag to a buffer (as a fragment tag string with separator):
If the tag is the break tag, append "break" to the buffer (with separator); exit.
If the tag is the call external tag, append "call external" to the buffer (with separator); exit.
If the tag is the call indirect tag, append "call indirect" to the buffer (with separator); exit.
If the tag is the call internal tag, append "call internal" to the buffer (with separator); exit.
If the tag is the dereference tag, append "dereference" to the buffer (with separator); exit.
If the tag is the end if tag, append "end if" to the buffer (with separator); exit.
If the tag is the epilog tag, append "epilog" to the buffer (with separator); exit.
If the tag is the exit tag, append "exit" to the buffer (with separator); exit.
If the tag is the finalize tag, append "finalize" to the buffer (with separator); exit.
If the tag is the increment tag, append "increment" to the buffer (with separator); exit.
If the tag is the intel tag, append "intel" to the buffer (with separator); exit.
If the tag is the jump false tag, append "jump false" to the buffer (with separator); exit.
If the tag is the load address tag, append "load address" to the buffer (with separator); exit.
If the tag is the load eax tag, append "load eax" to the buffer (with separator); exit.
If the tag is the loop tag, append "loop" to the buffer (with separator); exit.
If the tag is the not tag, append "not" to the buffer (with separator); exit.
If the tag is the prolog tag, append "prolog" to the buffer (with separator); exit.
If the tag is the push address tag, append "push address" to the buffer (with separator); exit.
If the tag is the push value tag, append "push value" to the buffer (with separator); exit.
If the tag is the save eax tag, append "save eax" to the buffer (with separator); exit.
If the tag is the repeat tag, append "repeat" to the buffer (with separator); exit.
If the tag is the routine address tag, append "routine address" to the buffer (with separator); exit.
Append "?" to the buffer (with separator).
 
To append a type to a buffer (with separator):
If the type is nil, append "" to the buffer (with separator); exit.
Append the type's name to the buffer (with separator).
 
To append a variable to a buffer (with separator):
If the variable is nil, append "" to the buffer (with separator); exit.
Append the variable's name to the buffer (with separator).


A tag is a number.
 
The break tag is a tag equal to 1.
The call external tag is a tag equal to 2.
The call indirect tag is a tag equal to 3.
The call internal tag is a tag equal to 4.
The dereference tag is a tag equal to 5.
The end if tag is a tag equal to 6.
The epilog tag is a tag equal to 7.
The exit tag is a tag equal to 8.
The finalize tag is a tag equal to 9.
The increment tag is a tag equal to 10.
The intel tag is a tag equal to 11.
The jump false tag is a tag equal to 12.
The load address tag is a tag equal to 13.
The load eax tag is a tag equal to 14.
The loop tag is a tag equal to 15.
The not tag is a tag equal to 16.
The prolog tag is a tag equal to 17.
The push address tag is a tag equal to 18.
The push value tag is a tag equal to 19.
The repeat tag is a tag equal to 21.
The routine address tag is a tag equal to 22.
The save eax tag is a tag equal to 20.


To compile a directory:
Abort with "I'm not old enough to make babies.".
\Compile the directory (start).
\Compile the directory (load the source files).
\Compile the directory (scan the source files).
\Compile the directory (resolve the types).
\Compile the directory (resolve the globals).
\Compile the directory (compile the headers of the routines).
\Compile the directory (calculate lengths and offsets of types).
\Compile the directory (add the built-in memory routines).
\Compile the directory (index the routines for utility use).
\Compile the directory (compile the bodies of the routines).
\Compile the directory (add and compile the built-in startup routine).
\Compile the directory (offset parameters and variables).
\Compile the directory (address).
\Compile the directory (transmogrify).
\Compile the directory (link).
\Compile the directory (write the exe).
\Compile the directory (stop).


The compiler has
a directory,
a timer,
an abort flag,
an abort message,
an abort path,
an abort row#,
a name count,
an exe buffer,
a listing buffer.


To decide if a byte is any mark:
If the byte is the period byte, say yes.
If the byte is the comma byte, say yes.
If the byte is the semi-colon byte, say yes.
If the byte is the colon byte, say yes.
If the byte is the exclamation  byte, say yes.
If the byte is the question-mark byte, say yes.
Say no.
 
To decide if a string is any flag literal:
If the string is "yes", say yes.
If the string is "no", say yes.
Say no.


An entry is a thing with
A name address,
A thunk address,
A name,
An address.

To finalize the compiler:
Destroy the utility index.
Destroy the routine index.
Destroy the literal index.
Destroy the global index.
Destroy the type index.
Destroy the imports.
Destroy the routines.
Destroy the literals.
Destroy the globals.
Destroy the types.
Destroy the source files.


A fragment is a thing with
A tag [break, call external, call indirect, call internal, dereference, end if, epilog, exit, finalize, increment, intel, jump false, load address, load eax, loop, not, prolog, push address, push value, save eax, repeat, routine address],
A variable (reference) [call indirect, dereference, increment, load address, load eax, pop, push address, push value, routine address, save eax],
Another variable (reference) [load address],
A routine (reference) [call internal, routine address],
An entry (reference) [call external],
A number [increment],
An address,
A hex string called code.


A global body is a substring.

The global index is an index.
The literal index is an index.
The routine index is an index.
The type index is an index.
The utility index is an index.
 
A global is a variable.
 
A field is a variable.
 
The globals are some globals.

An import header is a record with
An address called original first thunk,
A number called timestamp,
An address called forwarder chain,
An address called name memory address,
An address called first thunk memory address.
 
An import is a thing with
A name address,
A header address,
A name,
An import header,
Some entries.
 
The imports are some imports.


To initialize the compiler:


To list:
Clear the compiler's listing.
List the compiler's abort message in the compiler's listing.
List the types under "TYPES:" in the compiler's listing.
List the globals under "GLOBALS:" in the compiler's listing.
List the literals under "LITERALS:" in the compiler's listing.
List the routines under "ROUTINES:" in the compiler's listing.
\List the type index under "TYPE INDEX:" in the compiler's listing.
\List the global index under "GLOBAL INDEX:" in the compiler's listing.
\List the literal index under "LITERAL INDEX:" in the compiler's listing.
\List the routine index under "ROUTINE INDEX:" in the compiler's listing.
\List the utility index under "UTILITY INDEX:" in the compiler's listing.
List the imports under "IMPORTS:" in the compiler's listing.
List the source files under "SOURCE FILES:" in the compiler's listing.
List the timers under "TIMERS:" in the compiler's listing.
Write the compiler's listing to the compiler's listing path.
 
To list an abort message in a buffer:
If the abort message is blank, exit.
Append "COMPILE ABORTED - LISTING INCOMPLETE" to the buffer.
Advance the buffer (twice).
Append the abort message to the buffer.
Advance the buffer (twice).
 
To list a bucket in a buffer:
If the bucket's refers are empty, exit.
Append "/bucket" to the buffer (with separator).
Advance the buffer.
List the bucket's refers in the buffer.
Advance the buffer.
 
To list some entries in a buffer:
Get an entry from the entries.
If the entry is nil, exit.
List the entry in the buffer.
Repeat.
 
To list an entry in a buffer:
If the entry is nil, exit.
Append "/entry" to the buffer (with separator).
Append the entry's name to the buffer (with separator).
Append the entry's address to the buffer (as hex with separator).
Advance the buffer.
 
To list a fragment in a buffer:
Append "/fragment" to the buffer (with separator).
Append the fragment's tag to the buffer (as a fragment tag string with separator).
Append the fragment's variable to the buffer (with separator).
Append the fragment's other variable to the buffer (with separator).
Append the fragment's routine to the buffer (with separator).
Append the fragment's entry to the buffer (with separator).
Append the fragment's number to the buffer (as hex with separator).
Append the fragment's address to the buffer (as hex with separator).
Convert the fragment's code to a nibble string.
Append the nibble string to the buffer (with separator).
Advance the buffer.
 
To list some fragments in a buffer:
Get a fragment from the fragments.
If the fragment is nil, exit.
List the fragment in the buffer.
Repeat.
 
To list an import in a buffer:
If the import is nil, exit.
Append "/import" to the buffer (with separator).
Append the import's name to the buffer (with separator).
Advance the buffer.
List the import's entries in the buffer.
Advance the buffer.
 
To list some imports in a buffer:
Get an import from the imports.
If the import is nil, exit.
List the import in the buffer.
Repeat.
 
To list some imports under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the imports are empty, exit.
List the imports in the buffer.
 
To list an index in a buffer:
Append "/" then the index's used bucket count then " buckets" to the buffer (with separator).
Append the index's count then " refers" to the buffer (with separator).
Advance the buffer (twice).
Loop.
Get a bucket given the index.
If the bucket is nil, exit.
List the bucket in the buffer.
Repeat.
 
To list an index under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the index is empty, exit.
List the index in the buffer.
 
To list a refer in a buffer:
If the refer is nil, exit.
Append "/refer" to the buffer (with separator).
Append the refer's string to the buffer.
If the refer's pointer is nil, append "..." to the buffer.
Append "/" to the buffer.
Advance the buffer.
 
To list some refers in a buffer:
Get a refer from the refers.
If the refer is nil, exit.
List the refer in the buffer.
Repeat.
 
To list a routine in a buffer:
If the routine is nil, exit.
Append "/routine" to the buffer (with separator).
Append the routine's moniker to the buffer (with separator).
Append the routine's compiled flag to the buffer (with separator).
Append the routine's callback flag to the buffer (with separator).
Append the routine's decider flag to the buffer (with separator).
Append the routine's function flag to the buffer (with separator).
Append the routine's employs moniker to the buffer (with separator).
Append the routine's parameter size to the buffer (with separator).
Append the routine's local size to the buffer (with separator).
Append the routine's address to the buffer (as hex with separator).
Advance the buffer.
List the routine's parameters in the buffer.
List the routine's locals in the buffer.
List the routine's fragments in the buffer.
Advance the buffer.
 
To list some routines in a buffer:
Get a routine from the routines.
If the routine is nil, exit.
List the routine in the buffer.
Repeat.
 
To list some routines under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the routines are empty, exit.
List the routines in the buffer.
 
To list a source file in a buffer:
If the source file is nil, exit.
Append "/source file" to the buffer (with separator).
Append the source file's path to the buffer (with separator).
Advance the buffer.
 
To list some source files in a buffer:
Get a source file from the source files.
If the source file is nil, exit.
List the source file in the buffer.
Repeat.
 
To list some source files under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the source files are empty, exit.
List the source files in the buffer.
Advance the buffer.
 
To list a timer given a string in a buffer:
Append "/timer" to the buffer (with separator).
Append the string to the buffer (with separator).
Append the timer's string to the buffer (with separator).
Advance the buffer.
 
To list the timers under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
List the loading timer given "loading" in the buffer.
List the scanning timer given "scanning" in the buffer.
List the resolving types timer given "resolving types" in the buffer.
List the resolving globals timer given "resolving globals" in the buffer.
List the compiling routine headers timer given "compiling routine headers" in the buffer.
List the calculating timer given "calculating" in the buffer.
List the adding built-in memory routines timer given "adding built-in memory routines" in the buffer.
List the indexing utilities timer given "indexing utilities" in the buffer.
List the compiling routine bodies timer given "compiling routine bodies" in the buffer.
List the adding built-in startup routine timer given "adding built-in startup routine" in the buffer.
List the offsetting timer given "offsetting" in the buffer.
List the addressing timer given "addressing" in the buffer.
List the transmogrifying timer given "transmogrifying" in the buffer.
List the linking timer given "linking" in the buffer.
List the writing timer given "writing" in the buffer.
List the compiler's timer given "total" in the buffer.
Advance the buffer.
 
To list a type in a buffer:
If the type is nil, exit.
Append "/type" to the buffer (with separator).
Append the type's name to the buffer (with separator).
Append the type's plural name to the buffer (with separator).
Append the type's length to the buffer (as hex with separator).
Append the type's base name to the buffer (with separator).
Append the type's base type to the buffer (with separator).
Append the type's target name to the buffer (with separator).
Append the type's target type to the buffer (with separator).
Append the type's scale to the buffer (with separator).
Advance the buffer.
List the type's fields in the buffer.
Advance the buffer.
 
To list some types in a buffer:
Get a type from the types.
If the type is nil, exit.
List the type in the buffer.
Repeat.
 
To list some types under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the types are empty, exit.
List the types in the buffer.
 
To list a variable in a buffer:
If the variable is nil, exit.
Append "/variable" to the buffer (with separator).
Append the variable's kind to the buffer (with separator).
Append the variable's compiled flag to the buffer (with separator).
Append the variable's name to the buffer (with separator).
Append the variable's nickname to the buffer (with separator).
Append the variable's type name to the buffer (with separator).
Append the variable's type to the buffer (with separator).
Append the variable's address [or offset] to the buffer (as hex with separator).
Append the variable's by-value flag to the buffer (with separator).
Append the variable's count to the buffer (with separator).
Append the variable's reference flag to the buffer (with separator).
Append the variable's redefinition target name to the buffer (with separator).
Append the variable's literal to the buffer (with separator).
Convert the variable's data to a nibble string.
Append the nibble string to the buffer (with separator).
Advance the buffer.
 
To list some variables in a buffer:
Get a variable from the variables.
If the variable is nil, exit.
List the variable in the buffer.
Repeat.
 
To list some variables under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the variables are empty, exit.
List the variables in the buffer.
Advance the buffer.


A literal is a variable.
 
The literals are some literals.


A local is a variable.


A locus is a byte pointer.

A moniker is a string.
 
A monikette is a thing with
a string,
a type (reference),
a variable (reference),
\ for bubbling
a current type (reference),
a current substring.

A nickname is a name.

A parameter is a variable.

To put the compiler's exe path into a path:
Extract a designator from the compiler's directory.
Remove any trailing backslash from the designator.
Put the compiler's directory then the designator then ".exe" into the path.
 
To put the compiler's listing path into a path:
Extract a designator from the compiler's directory.
Remove any trailing backslash from the designator.
Put the compiler's directory then the designator then ".lst" into the path.


A routine body is a substring.
 
A routine header is a substring.
 

 
A routine is a thing with
A locus (reference),
A callback flag,
A decider flag,
A function flag,
A compiled flag,
A nickname index,
A moniker, some monikettes, some parameters, a parameter size,
An employs moniker,
Some locals, a local size,
A routine header, a header string,
A routine body, a body string,
Some fragments,
An address.
 
A routine reference is some monikettes.
 
The routines are some routines.


A source file is a thing with a path and a buffer.
 
The source files are some source files.


A type is a thing with
A locus (reference),
A name, a plural name,
A partial moniker,
A length,
A base name, a base type (reference),
A target name, a target type (reference) [pointers only],
A scale ratio,
Some fields [records only],
A cooking flag,
A optional info resolved flag.
 
A type name is a name.
 
The types are some types.


A variable is a thing with
A locus (reference),
A kind [literal, global, local, parameter, scratch],
A compiled flag,
A name, a nickname, a type name,
A type (reference), \ actual type on literal, global, local; dereferenced type on parameters and scratches
An address [globals and literals only] or 
An offset at the address [locals, parameters, and fields only],
A count [fields only],
A reference flag [fields only],
A redefinition target name [fields only],
A by-value flag [parameters only],
An global body [globals only],
An initializer string [globals only],
A literal (reference) [globals only - constant with which to initalize the global],
A hex string called data [literals only].


