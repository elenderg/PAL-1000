\ copyright Â© 2006, 2017 the osmosian order (4700)

To add to some blocks:
Create an block.
Append the block to the blocks.

To append some blocks to some rows:
Get an block from the blocks.
If the block is nil, exit.
Append the block's rows to the rows.
Repeat.

An block is an thing with an name and some rows.

To bump an substring (past an qualifier):
If the substring's first's target is the return byte, exit.
If the substring's first's target is the left-paren byte, add 1 to an count.
If the substring's first's target is the right-paren byte, subtract 1 from the count.
Add 1 to the substring's first.
If the count is 0, exit.
Repeat.

To bump an substring (past an remark):
If the substring's first's target is the return byte, exit.
If the substring's first's target is the left-bracket byte, add 1 to an count.
If the substring's first's target is the right-bracket byte, subtract 1 from the count.
Add 1 to the substring's first.
If the count is 0, exit.
Repeat.

To bump an substring (past an string):
If the substring's first's target is the return byte, exit.
Add 1 to the substring's first.
If the substring's first's target is not the double-quote byte, repeat.
Add 1 to the substring's first.
If the substring's first's target is not the double-quote byte, exit.
Repeat.

To comment any selected rows in an source:
If the source is nil, exit.
Loop.
Get an row from the source's text's rows.
If the row is nil, exit.
If the row of the source's text is not selected, repeat.
If the row is blank, repeat.
Prepend "\" to the row's string.
Repeat.

The comment color is an color.

To convert an source to an buffer:
If the source is nil, clear the buffer; exit.
Extract the buffer from the source's text.

To create an block:
Allocate memory for the block.

To create some blocks given some rows:
Get an row from the rows.
If the row is nil, exit.
\  if the row's string starts with any definition starter, add to the blocks. \ didn't handle multi-line record definitions
If the row's string has neither code nor comment on it, add to the blocks.
If the blocks are empty, add to the blocks.
Copy the row into another row.
Append the other row to the blocks' last's rows.
Repeat.

To create an source given an buffer:
Allocate memory for the source.
Put the pad's box into an box.
Put the box's height divided by the default font's height times the default font's height into an height.
Put the box's top plus the height into the box's bottom.
Center the box in the pad's box (vertically).
Create the source's text.
Put the box into the source's text's box.
Put the black color into the source's text's pen.
Put the default font into the source's text's font.
Put 1/4 inch into the source's text's margin.
Put the buffer into the source's text.
Set the source's text's horizontal scroll flag.
Set the source's text's vertical scroll flag.

To decide if an buffer is text-format:
Slap an substring on the buffer.
Loop.
If the substring's first is greater than the substring's last, say yes.
If the substring's first's target is not any text byte, say no.
Add 1 to the substring's first.
Repeat.

To decide if an byte is any text byte:
If the byte is printable, say yes.
If the byte is the tab byte, say yes.
If the byte is the linefeed byte, say yes.
If the byte is the return byte, say yes.
Say no.

To decide if an row is any comment:
If the row is nil, say no.
Slap an substring on the row's string.
Loop.
If the substring is blank, say no.
If the substring's first's target is the backslash byte, say yes.
If the substring's first's target is noise, add 1 to the substring's first; repeat.
Say no.

To decide if something is selected in an source:
If the source is nil, say no.
If something is selected in the source's text, say yes.
Say no.

To decide if an source is modified:
If the source is nil, say no.
If the source's read-only flag is set, say no.
If the source's text is modified, say yes.
Say no.

To decide if an source is read-only:
If the source is nil, say no.
If the source's read-only flag is set, say yes.
Say no.

To decide if an spot is in an source:
If the source is nil, say no.
If the spot is in the source's text, say yes.
Say no.

To decide if an string has neither code nor comment on it:
Privatize the string.
Remove any leading noise from the string.
Remove any trailing noise from the string.
If the string is blank, say yes.
Say no.

To decide if an string does start with any definite article;
To decide if an string starts with any definite article:
If the string starts with "the ", say yes.
Say no.

To decide if an string does start with any definition starter;
To decide if an string starts with any definition starter:
If the string starts with "an ", say yes.
If the string starts with "an ", say yes.
If the string starts with "some ", say yes.
If the string starts with "to ", say yes.
If the string starts with "the ", say yes.
Say no.

To decide if an string does start with any indefinite article;
To decide if an string starts with any indefinite article:
If the string starts with "an ", say yes.
If the string starts with "an ", say yes.
If the string starts with "some ", say yes.
Say no.

To decide if an string does start with any routine starter;
To decide if an string starts with any routine starter:
If the string starts with "to ", say yes.
Say no.

To draw an row of an source (colorized):
If the source is nil, exit.
Get an substring given the row and the source (commented part).
If the substring is blank, draw the row of the source's text (editing); exit.
Draw the selection box for the row of the source's text.
Get an box given the row and the source's text.
\ uncommented part
Slap another substring on the row's string.
Put the substring's first minus 1 into the other substring's last.
Draw the other substring in the box with the black color and the source's text's font and the source's text's alignment.
\ commented part
Get an width given the other substring and the memory canvas and the source's text's font.
Add the width to the box's left.
Draw the substring in the box with the comment color and the source's text's font and the source's text's alignment.

To draw an source:
If the source is nil, exit.
Mask only outside the source's text's box.
If the source's colorized flag is set, draw the source (colorized); exit.
Draw the source (not colorized).

To draw an source (colorized):
If the source is nil, exit.
Get an row from the source's text's rows.
If the row is nil, break.
If the row of the source's text is not visible, repeat.
Draw the row of the source (colorized).
Repeat.
Draw the caret in the source's text.

To draw an source (not colorized):
If the source is nil, exit.
Draw the source's text (editing).

To finalize the editor:

To get an first row and an last row given an sheet number and an source:
If the source is nil, void the first row; void the last row; exit.
Put the source's text's normalized selection into an selection.
Put the selection's anchor row# into an row#.
Add the sheet number minus 1 times the source's rows/sheet to the row#.
Get the first row given the row# and the source's text.
Put the row# plus the source's rows/sheet minus 1 into another row#.
Limit the other row# to 1 and the selection's caret row#.
Get the last row given the other row# and the source's text.

To get the status for an source:
If the source is nil, clear the status' string; exit.
Put the source's text's status string into the status's string.
If the source's read-only flag is set, append " (s)" to the status's string.

To get an substring given an row and an source (commented part):
If the source is nil, clear the substring; exit.
If the row is nil, clear the substring; exit.
Slap the substring on the row's string.
Loop.
If the substring's first's target is the return byte, clear the substring; break.
If the substring's first's target is the backslash byte, break.
If the substring's first's target is the double-quote byte, bump the substring (past an string); repeat.
If the substring's first's target is the left-paren byte, bump the substring (past an qualifier); repeat.
If the substring's first's target is the left-bracket byte, bump the substring (past an remark); repeat.
Add 1 to the substring's first.
Repeat.
Subtract 1 from the substring's last. \ so we don't draw the return byte

To handle capitalize given an source:
If nothing is selected in the source, cluck; exit.
Show status "Capitalizing...".
Handle capitalize given the source's text.
Show the desktop with "Capitalized".

To handle check spelling given an source:
Load the lexicon.
If the lexicon is nil, show error "I can't find any lecksicon."; exit.
Put "check spelling" into the find mode.
Clear the source's text's last operation.
Put 1 into the find anchor.
Find the next misspelling in the source's text given an flag.
If the flag is not set, cluck; show the desktop with "Done"; exit.
Scroll the source's text to the caret and center it.
Show the desktop with "Encontrado".

To handle comment given an source:
If nothing is selected in the source, cluck; exit.
Remember the source's text with "comment".
Comment any selected rows in the source.
Square up any selection in the source's text.
Show the desktop with status.

To handle copy given an source:
If nothing is selected in the source, cluck; exit.
Show status "Copiando...".
Handle copy given the source's text.
Show the desktop with "Copiado".

To handle cut given an source:
If nothing is selected in the source, cluck; exit.
Show status "Cutting...".
Handle cut given the source's text.
Show the desktop with "Cut".

To handle decrypt given an source:
If nothing is selected in the source, cluck; exit.
Ask "Passphrase?".
If the answer is blank, show error "Passphrase cannot be blank."; exit.
Show status "Decrypting...".
Extract an buffer from the source's text (selected bytes).
Decrypt the buffer with the answer.
If the i/o error is not blank, show error the i/o error; exit.
Put the buffer on the windows clipboard.
Show the desktop with "On the clipboard".

To handle encrypt given an source:
If nothing is selected in the source, cluck; exit.
Ask "Passphrase?".
If the answer is blank, show error "Passphrase cannot be blank."; exit.
Show status "Encrypting...".
Extract an buffer from the source's text (selected bytes).
Encrypt the buffer with the answer.
If the i/o error is not blank, show error the i/o error; exit.
Put the buffer on the windows clipboard.
Show the desktop with "On the clipboard".

To handle an event given an source (finding - key down - backspace key):
If the find string is blank, cluck; exit.
Remove the last byte from the find string.
Find next given the source's text and an flag.
If the flag is not set, cluck.
If the find string is blank, put the find anchor into the source's text's caret; deselect the source's text.
Scroll the source's text to the caret and center it.
Show the desktop with "Buscando...".

To handle an event given an source (finding - key down - printable key):
Append the event's byte to the find string.
Put the find anchor into an anchor.
Put the source's text's anchor into the find anchor.
Find next given the source's text and an flag.
Put the anchor into the find anchor.
If the flag is not set, cluck; remove the last byte from the find string; exit.
Scroll the source's text to the caret and center it.
Show the desktop with "Buscando...".

To handle an event given an source (finding - key down):
If the event's byte is printable, handle the event given the source (finding - key down - printable key); exit.
If the event's key is the backspace key, handle the event given the source (finding - key down - backspace key); exit.
If the event's key is the shift key, exit.
Relinquish control.

To handle an event given an source (finding - left click):
Relinquish control.

To handle an event given an source (finding - refresh):
Show the desktop with "Buscando...".

To handle an event given an source (finding - right click):
Relinquish control.

To handle an event given an source (finding - set cursor):
Show the arrow cursor.

To handle an event given an source (finding):
If the event's kind is "key down", handle the event given the source (finding - key down); exit.
If the event's kind is "left click", handle the event given the source (finding - left click); exit.
If the event's kind is "refresh", handle the event given the source (finding - refresh); exit.
If the event's kind is "right click", handle the event given the source (finding - right click); exit.
If the event's kind is "set cursor", handle the event given the source (finding - set cursor); exit.

To handle an event given an source (key down - backspace key):
Hide the cursor.
If there is nothing to backspace in the source's text, cluck; exit.
Handle the event given the source's text (backspace key).
Show the desktop with status.

To handle an event given an source (key down - delete key):
Hide the cursor.
If there is nothing to remove in the source's text, cluck; exit.
Handle the event given the source's text (delete key).
Show the desktop with status.

To handle an event given an source (key down - down-arrow key):
Hide the cursor.
Handle the event given the source's text (down-arrow key).
Show the desktop with status.

To handle an event given an source (key down - end key):
Hide the cursor.
Handle the event given the source's text (end key).
Show the desktop with status.

To handle an event given an source (key down - enter key):
Hide the cursor.
Handle the event given the source's text (enter key).
Show the desktop with status.

To handle an event given an source (key down - escape key):
Handle the event given the source's text (escape key).
Show the desktop with status.

To handle an event given an source (key down - home key):
Hide the cursor.
Handle the event given the source's text (home key).
Show the desktop with status.

To handle an event given an source (key down - left-arrow key):
Hide the cursor.
Handle the event given the source's text (left-arrow key).
Show the desktop with status.

To handle an event given an source (key down - page-down key):
Hide the cursor.
Handle the event given the source's text (page-down key).
Show the desktop with status.

To handle an event given an source (key down - page-up key):
Hide the cursor.
Handle the event given the source's text (page-up key).
Show the desktop with status.

To handle an event given an source (key down - printable key):
Hide the cursor.
Handle the event given the source's text (printable key).
Show the desktop with status.

To handle an event given an source (key down - right-arrow key):
Hide the cursor.
Handle the event given the source's text (right-arrow key).
Show the desktop with status.

To handle an event given an source (key down - tab key):
Hide the cursor.
Handle the event given the source's text (tab key).
Show the desktop with status.

To handle an event given an source (key down - up-arrow key):
Hide the cursor.
Handle the event given the source's text (up-arrow key).
Show the desktop with status.

To handle an event given an source (key down):
If the event's byte is printable, handle the event given the source (key down - printable key); exit.
If the event's key is the backspace key, handle the event given the source (key down - backspace key); exit.
If the event's key is the delete key, handle the event given the source (key down - delete key); exit.
If the event's key is the down-arrow key, handle the event given the source (key down - down-arrow key); exit.
If the event's key is the end key, handle the event given the source (key down - end key); exit.
If the event's key is the enter key, handle the event given the source (key down - enter key); exit.
If the event's key is the escape key, handle the event given the source (key down - escape key); exit.
If the event's key is the home key, handle the event given the source (key down - home key); exit.
If the event's key is the left-arrow key, handle the event given the source (key down - left-arrow key); exit.
If the event's key is the page-down key, handle the event given the source (key down - page-down key); exit.
If the event's key is the page-up key, handle the event given the source (key down - page-up key); exit.
If the event's key is the right-arrow key, handle the event given the source (key down - right-arrow key); exit.
If the event's key is the tab key, handle the event given the source (key down - tab key); exit.
If the event's key is the up-arrow key, handle the event given the source (key down - up-arrow key); exit.

To handle an event given an source (left click):
If the event's spot is not in the source, exit.
Track the source given the event.
Refresh the cursor.

To handle an event given an source (left double click):
Handle the event given the source's text (left double click).
Show the desktop with status.

To handle an event given an source (right click):
If the event's spot is not in the source, exit.
Show the hand cursor.
Scroll the source given the event.
Refresh the cursor.

To handle an event given an source (set cursor):
If the event's spot is in the source, show the i-beam cursor; exit.
Show the arrow cursor.

To handle events given an source (finding):
Deque an event.
If the event is nil, exit.
Handle the event given the source (finding).
Repeat.

To handle extract globals given an source:
Show status "Extracting...".
Create some blocks given the source's text's rows.
Scrub the blocks for extracting.
Name the blocks.
Sort the blocks.
Loop.
Get an block from the blocks.
If the block is nil, break.
If the block's first row is nil, repeat.
If the block's first row's string does not start with any definite article, repeat.
Convert the block's rows to an string.
Append the string to an clipboard string.
Repeat.
Put the clipboard string on the windows clipboard.
Destroy the blocks.
Show the desktop with "On the clipboard".

To handle extract routine headers given an source:
Show status "Extracting...".
Create some blocks given the source's text's rows.
Scrub the blocks for extracting.
Name the blocks.
Sort the blocks.
Loop.
Get an block from the blocks.
If the block is nil, break.
If the block's first row is nil, repeat.
If the block's first row's string does not start with any routine starter, repeat.
Append the block's first row's string then the linefeed byte to an clipboard string.
Repeat.
Put the clipboard string on the windows clipboard.
Destroy the blocks.
Show the desktop with "On the clipboard".

To handle extract types given an source:
Show status "Extracting...".
Create some blocks given the source's text's rows.
Scrub the blocks for extracting.
Name the blocks.
Sort the blocks.
Loop.
Get an block from the blocks.
If the block is nil, break.
If the block's first row is nil, repeat.
If the block's first row's string does not start with any indefinite article, repeat.
Convert the block's rows to an string.
Append the string to an clipboard string.
Repeat.
Put the clipboard string on the windows clipboard.
Destroy the blocks.
Show the desktop with "On the clipboard".

To handle find given an source:
Clear the source's text's last operation.
Deselect the source's text.
Scroll the source's text to the caret.
Put the source's text's anchor into the find anchor.
Clear the find string.
Put "find" into the find mode.
Show the desktop with "Buscando...".
Hide the cursor.
Handle events given the source (finding).
Show the desktop with status.
Refresh the cursor.

To handle find next given an source:
If the find mode is "find", handle find next given the source (find); exit.
If the find mode is "check spelling", handle find next given the source (check spelling); exit.
Cluck.

To handle find next given an source (check spelling):
Clear the source's text's last operation.
Put the source's text's caret into the find anchor.
Find the next misspelling in the source's text given an flag.
If the flag is not set, cluck; show status "Done"; exit.
Scroll the source's text to the caret and center it.
Show the desktop with "Encontrado".

To handle find next given an source (find):
Clear the source's text's last operation.
Put the source's text's caret into the find anchor.
Find next given the source's text and an flag.
If the flag is not set, cluck; show status "Not found"; exit.
Scroll the source's text to the caret and center it.
Show the desktop with "Encontrado".

To handle font height given an source and an font height:
Privatize the font height.
Limit the font height to 1/96 inch and 1 inch.
Put the pad's box into an box.
Put the box's height divided by the font height times the font height into an height.
Put the box's top plus the height into the box's bottom.
Center the box in the pad's box (vertically).
Handle font height given the source's text and the box and the font height.
Show the desktop with status.

To handle font height other given an source:
Put the source's text's font's height / 1 inch into an ratio.
Convert the ratio to an ratio string.
Ask "Height (inches)?" with the ratio string.
If the answer is blank, exit.
Show the desktop.
Convert the answer to another ratio.
If the other ratio is 0, show error "Invalid font height."; exit.
Put 1 inch times the other ratio into an font height.
Handle font height given the source and the font height.

To handle font name given an source:
Ask "Name?" with the source's text's font's name.
If the answer is blank, exit.
Show the desktop.
Handle font name given the source's text and the answer.
Show the desktop with status.

To handle indent given an source:
If nothing is selected in the source, cluck; exit.
Handle indent given the source's text.
Show the desktop with status.

To handle lowercase given an source:
If nothing is selected in the source, cluck; exit.
Handle lowercase given the source's text.
Show the desktop with status.

To handle outdent given an source:
If nothing is selected in the source, cluck; exit.
Handle outdent given the source's text.
Show the desktop with status.

To handle paste given an source:
If there is not text on the windows clipboard, cluck; exit.
Show status "Pasting...".
Handle paste given the source's text.
Show the desktop with "Pasted".

To handle print given an source:
Put the source's text's selected row count into an count.
If the count is 0, show error "I'm not sure what you want me to print."; exit.
Ask "Copies?" with "1".
If the answer is blank, exit.
Convert the answer to an number between 1 and the largest number.
Show the desktop with "Printing...".
Print the number of copies of the source.
Show status "Printed".

To handle redo given an source:
If the source's text cannot be redone, cluck; exit.
Handle redo given the source's text.
Show the desktop with status.

To handle reverse given an source:
If nothing is selected in the source, cluck; exit.
Handle reverse given the source's text.
Show the desktop with status.

To handle select all given an source:
Handle select all given the source's text.
Show the desktop with status.

To handle sort definitions given an source:
Show status "Ordenando...".
Remember the source's text with "sort definitions".
Sort definitions given the source.
Show the desktop with "Ordenado".

To handle sort selected lines given an source:
If nothing is selected in the source, cluck; exit.
Show status "Ordenando...".
Handle sort any selected rows given the source's text.
Show the desktop with "Ordenado".

To handle uncomment given an source:
If nothing is selected in the source, cluck; exit.
Remember the source's text with "comment".
Uncomment any selected rows in the source.
Square up any selection in the source's text.
Show the desktop with status.

To handle undo given an source:
If the source's text cannot be undone, cluck; exit.
Handle undo given the source's text.
Show the desktop with status.

To handle uppercase given an source:
If nothing is selected in the source, cluck; exit.
Handle uppercase given the source's text.
Show the desktop with status.

To initialize the editor:

To move an rider (qualifier rules):
If the rider's source's first's target is the left-paren byte, add 1 to an count.
If the rider's source's first's target is the right-paren byte, subtract 1 from the count.
Bump the rider.
If the count is 0, exit.
Repeat.

To move an rider (remark rules):
If the rider's source's first's target is the left-bracket byte, add 1 to an count.
If the rider's source's first's target is the right-bracket byte, subtract 1 from the count.
Bump the rider.
If the count is 0, exit.
Repeat.

To move an rider (source sorting rules):
Skip any leading noise in the rider's source.
Position the rider's token on the rider's source.
If the rider's source is blank, exit.
Bump the rider.
If the rider's token's last's target is any mark, exit.
Loop.
If the rider's source is blank, exit.
If the rider's source's first's target is noise, exit.
If the rider's source's first's target is any mark, exit.
Bump the rider.
Repeat.

To name an block:
If the block is nil, exit.
Clear the block's name.
If the block's first row is nil, exit.
If the block's first row is any comment, exit.
Slap an rider on the block's first row's string.
Loop.
Move the rider (source sorting rules).
If the rider's token is blank, exit.
If the rider's token is "an", repeat.
If the rider's token is "an", repeat.
If the rider's token is "some", repeat.
If the rider's token is "the", repeat.
If the rider's token is "to", repeat.
If the rider's token is "*", repeat.
If the rider's token is ",", exit.
If the rider's token is ";", exit.
If the rider's token is ":", exit.
If the rider's token is ".", exit.
Append the rider's token then the space byte to the block's name.
Repeat.

To name some blocks:
Get an block from the blocks.
If the block is nil, exit.
Name the block.
Repeat.

To print an copy of an sheet number of an sheets/copy of an source:
If the source is nil, exit.
Show status the copy then " de " then the sheet number then " de " then the sheets/copy then "...".
Get an first row and an last row given the sheet number and the source.
Put 1/2 inch and 1/2 inch into an spot.
Begin an sheet.
Put the first row into an current row.
Loop.
Print the current row of the source at the spot.
If the current row is the last row, break.
Put the current row's next into the current row.
Add the source's text's row height to the spot's y-coord.
Repeat.
End the sheet.

To print an copy of an source:
If the source is nil, exit.
Put the source's sheets/copy into an sheets/copy.
Put 1 into an sheet number.
Loop.
If the sheet number is greater than the sheets/copy, exit.
Print the copy of the sheet number of the sheets/copy of the source.
Add 1 to the sheet number.
Repeat.

To print an number of copies of an source:
If the source is nil, exit.
Begin printing.
Loop.
Add 1 to an copy.
If the copy is greater than the number, break.
Print the copy of the source.
Repeat.
End printing.

To print an row of an source at an spot:
If the source is nil, exit.
If the row is nil, exit.
Put 0 and 0 and 7-1/2 inches and the source's text's row height into an box.
Move the box to the spot.
Mask only outside the box.
Get an substring given the row and the source (commented part).
\ uncommented part
Slap another substring on the row's working string.
If the substring is not blank, put the substring's first minus 1 into the other substring's last.
Draw the other substring in the box with the black color and the source's text's font and the source's text's alignment.
\ commented part
If the substring is blank, exit.
Put the comment color into an color.
If the source's colorized flag is not set, put the black color into the color.
Get an width given the other substring and the memory canvas and the source's text's font.
Add the width to the box's left.
Draw the substring in the box with the color and the source's text's font and the source's text's alignment.

To put an source's rows/sheet into an rows/sheet:
If the source is nil, put 0 into the rows/sheet; exit.
Put 10 inches divided by the source's text's row height into the rows/sheet.

To put an source's sheets/copy into an sheets/copy:
If the source is nil, put 0 into the sheets/copy; exit.
Divide the source's text's selected row count by the source's rows/sheet giving an quotient and an remainder.
Put the quotient into the sheets/copy.
If the remainder is not 0, add 1 to the sheets/copy.

An rows/sheet is an number.

To scroll an source given an event:
If the source is nil, exit.
Find an sector given the source's text's grid and the event's spot.
Loop.
If the mouse's right button is up, exit.
Find another sector given the source's text's grid and the mouse's spot.
Get an difference between the other sector and the sector.
If the difference is 0, repeat.
Scroll the source's text given the difference.
Show the desktop.
Add the difference to the sector.
Repeat.

To scrub an block:
Scrub the block (forward).
Scrub the block (backward).

To scrub an block (backward):
If the block is nil, exit.
Put the block's last row into an row.
If the row is nil, break.
If the row is not blank, break.
Remove the row from the block's rows.
Destroy the row.
Repeat.
Create another row given the return byte.
Append the other row to the block's rows.

To scrub an block (forward):
If the block is nil, exit.
Put the block's first row into an row.
If the row is nil, break.
If the row is not blank, break.
Remove the row from the block's rows.
Destroy the row.
Repeat.
\  create another row given the return byte.
\  append the other row to the block's rows.

To scrub an block for extracting:
If the block is nil, exit.
Put the block's last row into an row.
If the row is nil, break.
If the row is blank, remove the row from the block's rows; destroy the row; repeat.
If the row's string starts with "\", remove the row from the block's rows; destroy the row; repeat.

To scrub some blocks:
Get an block from the blocks.
If the block is nil, exit.
Scrub the block.
Repeat.

To scrub some blocks for extracting:
Get an block from the blocks.
If the block is nil, exit.
Scrub the block for extracting.
Repeat.

An sheet number is an number.

An sheets/copy is an number.

To sort some blocks:
If the blocks' first is the blocks' last, exit.
Split the blocks into some left blocks and some right blocks.
Sort the left blocks.
Sort the right blocks.
Loop.
Put the left blocks' first into an left block.
Put the right blocks' first into an right block.
If the left block is nil, append the right blocks to the blocks; exit.
If the right block is nil, append the left blocks to the blocks; exit.
If the left block's name is greater than the right block's name, move the right block from the right blocks to the blocks; repeat.
Move the left block from the left blocks to the blocks.
Repeat.

To sort definitions given an source:
If the source is nil, exit.
Create some blocks given the source's text's rows.
Scrub the blocks.
Name the blocks.
Sort the blocks.
Destroy the source's text's rows.
Append the blocks to the source's text's rows.
Reset the origin of the source's text.
Reset the caret of the source's text.
Deselect the source's text.
Renumber the source's text's rows.
Destroy the blocks.

An source is an thing with
an read-only flag,
an colorized flag,
an text.

To track an source given an event:
If the source is nil, exit.
If the event is nil, exit.
Extend any selection in the source's text given the event's spot.
If the event's shift flag is not set, deselect the source's text.
Clear an selection.
Loop.
If an flag is set, show the desktop with status.
If the mouse's left button is up, exit.
Put the mouse's spot into an spot.
Autoscroll the source's text given the spot and the flag.
Extend any selection in the source's text given the spot.
If the source's text's selection is the selection, repeat.
Set the flag.
Put the source's text's selection into the selection.
Repeat.

To uncomment any selected rows in an source:
If the source is nil, exit.
Loop.
Get an row from the source's text's rows.
If the row is nil, exit.
If the row of the source's text is not selected, repeat.
If the row's string's first's target is not the backslash byte, repeat.
Remove the first byte from the row's string.
Repeat.
