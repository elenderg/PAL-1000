To compile a term given a rider (new local):
If the compiler's abort flag is set, exit.
If the current routine is nil, abort with "I don't know what you're trying to pull here." and the rider; exit.
Add a local to the current routine's locals given "local" and the rider's token's first.
If the rider's token is "another", put "other" into the local's name.
Move the rider (compiler rules).
Scan a name given the rider.
Extend the local's name with the name.
If the rider's token is "called", compile the call'd part given the rider and the local.
Resolve the local.
If the local is duplicated in the current routine's parameters, abort with "'" then the local's name then "' is already in use as a parameter." and the local's locus; exit.
If the local is duplicated in the current routine's locals,abort with "'" then the local's name then "' is already in use as a local variable." and the local's locus; exit.
Eliminate duplicate nicknames given the local and the current routine's nickname index.
Put the local into the term's variable.
Clear the term's phrase.
Compile the term given the rider (possessives).
