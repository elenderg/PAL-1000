To list:
Clear the compiler's listing.
List the compiler's abort message in the compiler's listing.
List the types under "TYPES:" in the compiler's listing.
List the globals under "GLOBALS:" in the compiler's listing.
List the literals under "LITERALS:" in the compiler's listing.
List the routines under "ROUTINES:" in the compiler's listing.
\List the type index under "TYPE INDEX:" in the compiler's listing.
\List the global index under "GLOBAL INDEX:" in the compiler's listing.
\List the literal index under "LITERAL INDEX:" in the compiler's listing.
\List the routine index under "ROUTINE INDEX:" in the compiler's listing.
\List the utility index under "UTILITY INDEX:" in the compiler's listing.
List the imports under "IMPORTS:" in the compiler's listing.
List the source files under "SOURCE FILES:" in the compiler's listing.
List the timers under "TIMERS:" in the compiler's listing.
Write the compiler's listing to the compiler's listing path.
 
To list an abort message in a buffer:
If the abort message is blank, exit.
Append "COMPILE ABORTED - LISTING INCOMPLETE" to the buffer.
Advance the buffer (twice).
Append the abort message to the buffer.
Advance the buffer (twice).
 
To list a bucket in a buffer:
If the bucket's refers are empty, exit.
Append "/bucket" to the buffer (with separator).
Advance the buffer.
List the bucket's refers in the buffer.
Advance the buffer.
 
To list some entries in a buffer:
Get an entry from the entries.
If the entry is nil, exit.
List the entry in the buffer.
Repeat.
 
To list an entry in a buffer:
If the entry is nil, exit.
Append "/entry" to the buffer (with separator).
Append the entry's name to the buffer (with separator).
Append the entry's address to the buffer (as hex with separator).
Advance the buffer.
 
To list a fragment in a buffer:
Append "/fragment" to the buffer (with separator).
Append the fragment's tag to the buffer (as a fragment tag string with separator).
Append the fragment's variable to the buffer (with separator).
Append the fragment's other variable to the buffer (with separator).
Append the fragment's routine to the buffer (with separator).
Append the fragment's entry to the buffer (with separator).
Append the fragment's number to the buffer (as hex with separator).
Append the fragment's address to the buffer (as hex with separator).
Convert the fragment's code to a nibble string.
Append the nibble string to the buffer (with separator).
Advance the buffer.
 
To list some fragments in a buffer:
Get a fragment from the fragments.
If the fragment is nil, exit.
List the fragment in the buffer.
Repeat.
 
To list an import in a buffer:
If the import is nil, exit.
Append "/import" to the buffer (with separator).
Append the import's name to the buffer (with separator).
Advance the buffer.
List the import's entries in the buffer.
Advance the buffer.
 
To list some imports in a buffer:
Get an import from the imports.
If the import is nil, exit.
List the import in the buffer.
Repeat.
 
To list some imports under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the imports are empty, exit.
List the imports in the buffer.
 
To list an index in a buffer:
Append "/" then the index's used bucket count then " buckets" to the buffer (with separator).
Append the index's count then " refers" to the buffer (with separator).
Advance the buffer (twice).
Loop.
Get a bucket given the index.
If the bucket is nil, exit.
List the bucket in the buffer.
Repeat.
 
To list an index under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the index is empty, exit.
List the index in the buffer.
 
To list a refer in a buffer:
If the refer is nil, exit.
Append "/refer" to the buffer (with separator).
Append the refer's string to the buffer.
If the refer's pointer is nil, append "..." to the buffer.
Append "/" to the buffer.
Advance the buffer.
 
To list some refers in a buffer:
Get a refer from the refers.
If the refer is nil, exit.
List the refer in the buffer.
Repeat.
 
To list a routine in a buffer:
If the routine is nil, exit.
Append "/routine" to the buffer (with separator).
Append the routine's moniker to the buffer (with separator).
Append the routine's compiled flag to the buffer (with separator).
Append the routine's callback flag to the buffer (with separator).
Append the routine's decider flag to the buffer (with separator).
Append the routine's function flag to the buffer (with separator).
Append the routine's employs moniker to the buffer (with separator).
Append the routine's parameter size to the buffer (with separator).
Append the routine's local size to the buffer (with separator).
Append the routine's address to the buffer (as hex with separator).
Advance the buffer.
List the routine's parameters in the buffer.
List the routine's locals in the buffer.
List the routine's fragments in the buffer.
Advance the buffer.
 
To list some routines in a buffer:
Get a routine from the routines.
If the routine is nil, exit.
List the routine in the buffer.
Repeat.
 
To list some routines under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the routines are empty, exit.
List the routines in the buffer.
 
To list a source file in a buffer:
If the source file is nil, exit.
Append "/source file" to the buffer (with separator).
Append the source file's path to the buffer (with separator).
Advance the buffer.
 
To list some source files in a buffer:
Get a source file from the source files.
If the source file is nil, exit.
List the source file in the buffer.
Repeat.
 
To list some source files under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the source files are empty, exit.
List the source files in the buffer.
Advance the buffer.
 
To list a timer given a string in a buffer:
Append "/timer" to the buffer (with separator).
Append the string to the buffer (with separator).
Append the timer's string to the buffer (with separator).
Advance the buffer.
 
To list the timers under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
List the loading timer given "loading" in the buffer.
List the scanning timer given "scanning" in the buffer.
List the resolving types timer given "resolving types" in the buffer.
List the resolving globals timer given "resolving globals" in the buffer.
List the compiling routine headers timer given "compiling routine headers" in the buffer.
List the calculating timer given "calculating" in the buffer.
List the adding built-in memory routines timer given "adding built-in memory routines" in the buffer.
List the indexing utilities timer given "indexing utilities" in the buffer.
List the compiling routine bodies timer given "compiling routine bodies" in the buffer.
List the adding built-in startup routine timer given "adding built-in startup routine" in the buffer.
List the offsetting timer given "offsetting" in the buffer.
List the addressing timer given "addressing" in the buffer.
List the transmogrifying timer given "transmogrifying" in the buffer.
List the linking timer given "linking" in the buffer.
List the writing timer given "writing" in the buffer.
List the compiler's timer given "total" in the buffer.
Advance the buffer.
 
To list a type in a buffer:
If the type is nil, exit.
Append "/type" to the buffer (with separator).
Append the type's name to the buffer (with separator).
Append the type's plural name to the buffer (with separator).
Append the type's length to the buffer (as hex with separator).
Append the type's base name to the buffer (with separator).
Append the type's base type to the buffer (with separator).
Append the type's target name to the buffer (with separator).
Append the type's target type to the buffer (with separator).
Append the type's scale to the buffer (with separator).
Advance the buffer.
List the type's fields in the buffer.
Advance the buffer.
 
To list some types in a buffer:
Get a type from the types.
If the type is nil, exit.
List the type in the buffer.
Repeat.
 
To list some types under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the types are empty, exit.
List the types in the buffer.
 
To list a variable in a buffer:
If the variable is nil, exit.
Append "/variable" to the buffer (with separator).
Append the variable's kind to the buffer (with separator).
Append the variable's compiled flag to the buffer (with separator).
Append the variable's name to the buffer (with separator).
Append the variable's nickname to the buffer (with separator).
Append the variable's type name to the buffer (with separator).
Append the variable's type to the buffer (with separator).
Append the variable's address [or offset] to the buffer (as hex with separator).
Append the variable's by-value flag to the buffer (with separator).
Append the variable's count to the buffer (with separator).
Append the variable's reference flag to the buffer (with separator).
Append the variable's redefinition target name to the buffer (with separator).
Append the variable's literal to the buffer (with separator).
Convert the variable's data to a nibble string.
Append the nibble string to the buffer (with separator).
Advance the buffer.
 
To list some variables in a buffer:
Get a variable from the variables.
If the variable is nil, exit.
List the variable in the buffer.
Repeat.
 
To list some variables under a string in a buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the variables are empty, exit.
List the variables in the buffer.
Advance the buffer.
