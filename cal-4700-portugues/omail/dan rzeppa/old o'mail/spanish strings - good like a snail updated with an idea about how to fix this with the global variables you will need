Dear Prime Assembler Dahn,

First, regarding this question:

\Is there a better way to do this [compound IF thing with or without partial NOTs], or should the compiler handle this sort of thing?

I don't think there's a better way, at this time, since we would have to make the compiler handle compound IFs
and that would not only make the compiler more complicated, but would also make AND and OR special keywords.
I'm finding, as I try to make the thing work with Spanish, that I only have problems where we do "compiler magic"
such as automatic pluralizing, expansion of things, function-style routines, etc.

Now regarding the string compares:

\They don't use null terminated strings, so they should be fast.

Fast like molasses, maybe. On my machine, compile time for the whole shebang went from an average of 4,500 ms to 14,900 ms.
And the compile time for a tiny program, like your test program (with full noodle, admittedly), more than doubled from 1,218 ms to  2,750 ms.
So I'm going to have to go ahead and ask you to go ahead and see if there's anything you can go ahead and do about that.
Yeah, that would be g...r...e...a...t... SEE THE PS BELOW.

\ Incremental Find

While you're thinking about that, think about this: our Incremental Find doesn't work in Español because hitting, for example,
ALT-0241 to get than funny "ñ," terminates the find. I haven't talked to Pablo about it yet, but I'm thinking of talking him into
not typing funny characters when he's doing a find (and we write an "accent-insensitive" compare). SEE THE PS BELOW.

Thanks for your help,

Dahd

PS. It seems to me that the easy (and fast) way to do this is to use the x86 XLAT/XLATB instruction in the compare routines,
taking in one of the "translation tables" below as a parameter.

The first table is for case-and-accent sensitive compares; no translation.
The second one is for sloppy, case- and accent-insensitive compares (for our Incremental Find).
Either of the other two can be used for case-insensitive compares.


The ascii table is a hex string equal to $000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF.

The lowercase accent-free ascii table is a hex string equal to

The lowercase ascii table is a hex string equal to $000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F406162636465666768696A6B6C6D6E6F707172737475767778797A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788899A8B9C8D9E8F909192939495969798999A9B9C9D9EFFA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6D7F8F9FAFBFCFDFEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF.

The uppercase ascii table is a hex string equal to $000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F604142434445464748494A4B4C4D4E4F505152535455565758595A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798998A9B8C9D8E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6F7D8D9DADBDCDDDE9F.


PPS. I think I've got the "equal only' compare working with the translation table. It's only a little slower than the old one (4800 ms vs 4500 ms).
You're probably amazed that I could do all that assembling without the aid of the Prime Assembler (ie, you). I know I am.
The hardest part was getting the jumps right. This is the revised code:

To compare a string to another string given a length and another length and a hex string (equal only):
Intel $8BB508000000. \ mov esi,[ebp+8] \ the string
Intel $8B36. \ mov esi,[esi] \ the string's first
Intel $8BBD0C000000. \ mov edi,[ebp+12] \ the other string
Intel $8B3F. \ mov edi,[edi] \ the other string's first
Intel $8B8510000000. \ mov eax,[ebp+16] \ the string's length
Intel $8B00. \ mov eax,[eax]
Intel $8B9514000000. \ mov edx,[ebp+20] \ the other string's length
Intel $8B12. \ mov edx,[edx]
Intel $3BD0. \ cmp eax,edx \ if the length's differ, say no
Intel $0F852C000000. \ jne say no \ ***********************************
Intel $8BC8. \ mov ecx,eax \ put length into ecx  
Intel $8B9D18000000. \ mov ebx,[ebp+24] \ the translation table
Intel $8B1B. \ mov ebx,[ebx] the translation table's first
\L3: \ loop:
Intel $85C9. \ test ecx,ecx
Intel $0F8425000000. \ jz say yes \ ************************************
\ fetch and translate the current byte in the string
Intel $8A06. \ mov al,[esi]
Intel $D7. \ xlat al,[ebx]
Intel $88C2. \ mov dl,al
\ fetch and translate the  current byte in the other string
Intel $8A07. \ mov al,[edi]
Intel $D7. \ xlat al,[ebx]
Intel $88C6. \ mov dh,al
\ compare the two translated  bytes
Intel $38F2. \ cmp dl,dh
Intel $0F8508000000. \ jne say no \ ************************************
Intel $46. \ inc esi
Intel $47. \ inc edi
Intel $49. \ dec ecx
Intel $E9DEFFFFFF. \ jmp L3 \ *****************************************
\SAY NO:
Intel $C7C000000000. \ mov eax,0
Intel $E906000000. \ jmp end
\SAY YES:
Intel $C7C001000000. \ mov eax,1

When I'm not tired, I'm going to change the middle part to look like this (to save a mov and free up the edx register):

\ fetch and translate the  current byte in the other string
Intel $8A07. \ mov al,[edi]
Intel $D7. \ xlat al,[ebx]
Intel $****. \ mov ah,al \ or shift left, which I think is faster
\ fetch and translate the current byte in the string
Intel $8A06. \ mov al,[esi]
Intel $D7. \ xlat al,[ebx]
\ compare the two translated  bytes
Intel $****. \ cmp al,ah



The other compare routine is bigger so I haven't got to it yet.
If you want to whip it up for me, that would be g...r...e...a...t... Otherwise, I'll probably work on it Saturday night.
