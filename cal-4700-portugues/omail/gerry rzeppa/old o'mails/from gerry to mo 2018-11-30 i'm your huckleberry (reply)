i'll pass CAL onto my research folks to see if they can figure out what set off the alarms. if
they find anything, i'll let you know!

\ Thanks. I'm always curious about why our stuff looks bad to virus detectors.

i'm definitely not of the majority group at work. most folks are either mac or windows guys.
even on my team i'm a bit of an outlier.

\ Not surprising. With half our brians dedicated to picture processing, and with the childhood habit of
\ pointing at stuff we want with our index fingers, using a mouse to manipulate visual images is an easy sell,
\ and a hard habit to break. As Forrest Gump might put it, "Natural is what natural does."

your procedure for dead-code extraction seems elegant and minimally invasive. very nice.

\ Yeah, Dan thought it up. We had to loop through the routines one way or another.
\ But like all elegant ideas, once you see it, it seems really simple and obvious.

well, i don't have a lot of money, but i have an interest in hardware and virtualization. i've written
a few virtual machines (just little stack-based toys that operate like a reverse-polish-notation
calculator, but with opcodes and such). nothing fancy; nothing to be impressed with; but i've
at least done it and would like to do it again.

\ I'm not surprised.

do you have specs or a design thought up for chips and architecture? have you written a vm in
Plain English?

\ No specs or design; I was going to leave that to the hardware guys we someday hire, whose first
\ assignment will be reading this:

\ https://users.ece.cmu.edu/~koopman/stack_computers/stack_computers_book.pdf

\ Their second assignment will be limiting the instruction set to something that can be understood by
\ a six-year old, and memorized by a 12-year-old. After all, even on a pig of a CPU like the Intel,
\ we only use 39 different instructions (see the list in your mailbox).

i bet you could write a simulator in CAL pretty quickly. i bet you could write an ELF
interpreter in Plain English.

\ You can write anything in Plain English; but that's not the point. The point is that there's a hole in the market
\ that nothing is filling. Example: the Redbox movie vending machine at our local Walmart uses Windows 7 as its
\ operating system (I know because the thing went down in a storm once and I watched it restart). Clearly, the
\ Redbox is an application way too big for an Arduino, but way too small for Windows, or Linux, or MacOS.

nothing really new to report. i just read your response and got excited and had to share. i haven't
heard of Oberon before (except as the name of a dog in the iron druid novels by Kevin Hearne).

\ I'm talking about the original Oberon Operating System and Compiler, documented in this book:

\ http://www.ethoberon.ethz.ch/WirthPubl/ProjectOberon.pdf

\ 12,277 lines of code that compile to just 131,800 bytes. Makes even the CAL look like an obese pig.
\ But then Nick and Jurg didn't have to deal with Windows. Their compiler was 4,000 lines, 
\ pretty much on a par with ours.

anyway, thanks for pointing out the console! i saw that in my perusal of the noodle, but didn't
remember to ask about it.

\ I find the console handy at times. (I'm not text-adverse.) This little program, for example...

To run:
Start up.
Read "c:\cal-4700\the noodle" as a path into a buffer.
If the i/o error is not blank, write the i/o error on the console.
Slap a rider on the buffer.
Loop.
Skip any leading noise in the rider's source.
If the rider's source is blank, break.
Move the rider (text file rules).
Add 1 to a total count.
If ".dll" is in the rider's token, add 1 to a windows call count.
Repeat.
Write the total count then " lines processed" on the console.
Write the windows call count then " Windows calls" on the console.
Wait for the escape key.
Shut down.

\ ...looks for Windows calls in the Noodle. The output, on the console, looks like this:

12661 lines processed
347 Windows calls

\ I can't think of a better way to display that, since I don't think a pie chart is warranted.

\ Gerry




