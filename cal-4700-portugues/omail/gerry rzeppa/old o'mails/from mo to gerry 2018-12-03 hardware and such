\ Byte 0: the first instruction to be executred.
\ Bytes 1-n: whatever the compiler writer wants them to be.

so an issue with a format this simple is that it doesn't leave room for data or version info. but
i guess that could be after the executable format. as i'm in software security, i'd be concerned
about exploitability and user-kernel context switching. need to make sure CAL doesn't get
compromised by some rogue shellcode. 

i've been reading the stack computer book, and i'm intrigued by the idea. i've worked with some
stack machines in software, and it was very fun to interface with.

since i've spent the last fifteen or so years in the software security industry, i'm going to want
to make sure it's not trivially exploitable. for use in a kiosk or any kind of device that interfaces
directly with the pubilc, it'll need to be mostly bulletproof. because we want it to be better than
what people are using.

do you have ideas for the kind of executable format you want to use? we can either have a more
complicated format or some convention. if we want the first byte of the file to be an opcode,
then we'll have to either use the last X bytes as the data section (for strings, etc) or add in some
extra opcodes to calculate whatever the data section would otherwise contain. but i'd rather have
a legit data section. i'm fully aware i'm putting the cart before the horse on this one.

i've also done some research into graphics support on linux, and it might still be feasible. i have
too many disparate interests, and CAL is touching on all of them!

\ That's the thing I've been dreaming about for 12 years now. Clearly, an Intel x86 with Windows doesn't quite fit the bill.
\ But it's the best Dan and I could do in six months, working in the back bedroom.

here's to bringing dreams to life!

peace,
mo
