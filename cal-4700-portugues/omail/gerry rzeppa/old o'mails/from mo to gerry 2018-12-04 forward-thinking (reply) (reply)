\ But we CAN use readily available peripherals (keyboards, mice, monitors, printers, etc) for our prototypes,
\ if the device drivers for them are consistent and simple enough.

so long as you can get the device drivers running, then that's fine. you're right that readily
available peripherals should be used. i didn't think most drivers would be open-source. even
if they were, i didn't think it would be trivially convertible to CAL. but it's actually probably
easier to convert to CAL. because you just have to be able to explain in in english. it's so novel!

\ We really need two screen buffers to avoid flicker. As I understand it, the video hardware maps
\ pixels from a buffer at a particular address onto the display; just change the address to flip buffers.
\ Which is faster than what we have to do in Windows (actually copy the bits from one buffer to another).

i basically don't understand video memory at all. is it the same for vga/dvi/hdmi? these aren't
questions i really need answers to. i'm just curious.

\ An 8-bit MCU? In the 21st century? Where is the equally simple 32-bit equivalent? A Raspberry Pi, for example,
\ isn't at all like an Arduino; it has freaking Linux on it!

yes, 8-bit mcu. there's an arduino that uses a 32-bit mcu, but it's less popular (because it's more
expensive).

\ We don't need virtual memory, or paging, or caches. Just 4 gigabytes divided between ROM and RAM.
\ I've got a very simple and reliable memory allocation algorithm (that we used in very early versions of the CAL)
\ around here someplace. I've also been talking to Dan about garbage collection and I'm pretty sure we can
\ have automatic memory management for everything (not just strings) in the KAL.

that sounds pretty neat. as far as hardware and the number of stacks, do you have opinions on how
many stacks we should support? so far i like the idea of a data stack and a return-address stack.
i'm used to routine frames from intel asm. 

peace,
mo