The input console is a console.
The output console is a console.
The serial port is a serial port.
The serial buffer is a buffer.

Para ejecutar:
  Start up.
  Initialize our stuff.
  Handle any events.
  Finalize our stuff.
  Shut down.

To check the serial port:
  Receive from the serial port into a buffer.
  If el error de e/s is not blank, write el error de e/s on the output console; exit.
  If the buffer's length is 0, exit.
  Append the buffer to the serial buffer.
  Put the return byte into a temp string.
  If the serial buffer does not end with the temp string, exit.
  Remove the last byte from the serial buffer.
  Write "Them: " then the serial buffer on the output console.
  Clear the serial buffer.
  Show everything.
  
To finalize our stuff:
  Destroy the output console.
  Destroy the input console.

To handle any events:
  If there are not any events waiting, check the serial port; repeat.
  Deque an event.
  If the event is nil, exit.
  Handle the event.
  Repeat.
 
To handle an event:
  If the event's kind is "refresh", handle the event (refresh); exit.
  If the event's kind is "key down", handle the event (key down); exit.
  Handle the event given the input console.

To handle an event (enter):
  Extract a string from the input console's text.
  If the string is "q", relinquish control.
  Transmit the string then the return byte to the serial port.
  If el error de e/s is not blank, write el error de e/s on the output console; exit.
  Write "You: " then the string on the output console.
  Put "" into the input console's text.
  Show everything.

To handle an event (key down):
  Put the event's key into a key.
  If the key is the enter key, handle the event (enter); exit.
  Handle the event given the input console.

To handle an event (refresh):
  Show everything.

To initialize our stuff:
  \ input console
  Create the input console.
  Put the white color into the input console's fill.
  Put the white color into the input console's border.
  Put 0 and the screen's height minus 3/4 inch and the screen's width and the screen's bottom into a box.
  Put the box into the input console's box.
  Indent the box 1/4 inch.
  Put the box into the input console's text's box. 
  \ ouput console
  Create the output console.
  Put the lightest gray color into the output console's fill.
  Put the lightest gray color into the output console's border.
  Put 0 and 0 and the screen's width and the screen's bottom minus 3/4 inch into the box.
  Put the box into the output console's box.
  Indent the box 1/4 inch.
  Put the box into the output console's text's box. 
  \ instructions
  Write "Type q then press enter to quit." on the output console.
  \ serial port
  Loop.
    Write "Enter the port number in the input console box below." on the output console.
    Write "> " on the input console without advancing.
    Read a port name from the input console.
    If the port name is "q", relinquish control; exit.
    If the port name does not start with "COM", prepend "COM" to the port name.
    Write "opening port " then the port name on the output console.
    Open the serial port given the port name and 9600.
    If el error de e/s is not blank, write el error de e/s on the output console; repeat.
    Write "com port open" on the output console.
    Write "" on the input console.
    Put "" into the input console's text.
    Flush the event queue.

To show everything:
  Draw the input console.
  Draw the output console.
  Refresh the screen.
  Show the arrow cursor.

\ this should probably be a function in the noodle.
To decide if there are any events waiting:
  If the event queue is not empty, say yes.
  Call "user32.dll" "PeekMessageA" with an msg's whereabouts and 0 and 0 and 0 and 0 [pm_noremove] returning a number.
  If the number is not 0, say yes.
  Say no.
