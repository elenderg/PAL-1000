we've had a veritable blizzard here (north carolina), and i've been swamped with responsibilities
(work and dealing with screaming kids who aren't used to being together so much, because school).

\ The Raspberry Pi is a "moving-target mess." 

yes, i understand. i'm afraid i'm going to have to go back to the linux port idea, then. i was hoping
to use this as an opportunity to learn some hardware stuff, but you keep shooting holes in my ideas
for working up to something that would be idea. basically, i don't have the engineering chops to be
your hardware guy. it's a hard truth that i've been avoiding in true hollywood fashion (if i just
keep at it, my sheer grit will take me there!).

\ "...multithreaded and multi-process." Two more features we neither need nor want. 

i mentioned that just to say that CAL wouldn't ever really need 4GB of ram. i'm not saying CAL needs
to be multithreaded and multi-process. but i think it might actually need to be, or else how would
he recompile himself without the screen freezing? how would anything happen in the background? i
think you need some sort of threading or multi-process behavior for GUIs to work. but i could be
wrong.

\ A hard restart should take less than a second.

that would be nice.

\ In the meantime, if I wanted a cheap, pocket-sized computer to run the CAL on, I wouldn't get a
\ Raspberry Pi; I'd get something like this:

https://www.amazon.com/dp/B078MT5ZJ8/

that looks nice. i don't think it would be difficult to replace the operating system on that, but we'd
still need to write the operating system and whatever video-memory buffering. it shouldn't be too
onerous, though. it's a lot more expensive than a raspberry pi. especially the cute little ones.

\ SECOND 1/3: Demonstrate that a convenient, efficient, and useful operating system can be kept in
\ ROM and be as simple as a handful of BIOS-like interrupt handlers and device drivers.

have you written anything like this operating system before? i've done windows, linux, and minix
kernel programming, and they're all beasts. seeing something small and simple would be nice. though
i don't see how we'd be able to handle all the i/o from disk, network, mouse, keyboard, camera, etc
so simply. but that's for the smart guy (you) to figure out.

\ THIRD 1/3: Demonstrate that system-on-a-chip hardware doesn't need virtual memory, a plethora
\ of caches, an FPU, a half-dozen or more operating modes, a huge instruction set, etc.

i'm actually a big fan of using integer maths instead of floating point maths. it seems much more
natural. and doing cryptography (i'm not going to argue the necessity, just that it's a fun maths
project) is all integers.

i'm transferring all the old pictures, etc, off the lenovo, so i'm using it now. it's a pretty nice
experience using CAL and only seeing CAL. 

it seems like you're not using as many registers as you could. was that a choice to make things
simpler or more stable? 

\ EDI and ESI - general purpose "pointer" registers

i'm very familiar with memcmp/memcpy/strcmp/strcpy compiling down to a handful of bytes of opcodes
using these registers (and ECX).

\ Are you still feeling better? Having fun with your FPGA kit?

i am feeling better. thanks for asking!

i haven't been able to play with the FPGA kit, yet, because i need to get the free licenses to design/compile
the gates on a windows computer. so i had to wait until i got total access to the lenovo. but it looks a lot
more involved than i had thought. i took a couple of hardware design classes in college, so i thought
i'd be able to just have a refresher weekend and i'd be set. but after 20 hours of reading and videos,
i'm still pretty lost.

at least i have it! i think i'll get something done eventually, even if it turns out to just be a simple MCU
clone. it would be nice to be able to model a 32-bit forth-like (with a couple of registers) cpu on it,
but i don't think it's a powerful enough FPGA for that.

time will tell!

how are things in your area? do you spend much time on the CAL? have you given much thought to a
BIOS or other OS design?

peace,
mo