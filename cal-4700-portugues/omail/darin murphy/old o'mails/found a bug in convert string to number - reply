Yo, Darin.

\I tested the modifed program "exercise 3" that you emailed me and discovered
\that the "convert the string to a number" doesn't return 0 if the string was bad,
\but instead returns a number greater than 0.

\I have left you the version you sent me, in case you don't have it anymore.
\I have modified it to convert the number to string, then wrote it to console
\so you can see the results more clearly.

\I'm running it with the 4047 build and it's noodle.

\No rush on replying, just thought I'd let you know, in case 4047 has either a bug
\or if it's just a misunderstanding of it's design.

My fault. I should have looked at that routine more closely.
The comment "\ returns 0 for bad numbers" simply isn't true.
Sorry.

The "convert a string to a number" routine in the Noodle is the same one we use in the compiler.
It assumes the string it is passed is valid and does no error checking (to help make the compiler fast).
This does not cause problems in the compiler because we validate the string earlier in the process with one of these routines:

To decide if a string is any numeric literal: \ positive or negative integer, fraction, mixed number, or zero
To decide if a string is any integer literal: \ positive or negative integer, or zero
To decide if a string is any integer: \ positive integer only, or zero

I would recommend using the third one in the Exercise 3 program, like so:

If the string is not any integer, write "I was hoping for an integer. Please try again." on the console; repeat.

Or you could add this "wrapper" routine to your Project or your Noodle, and invalid strings will then show up as zero:

To convert a string to a number (with error checking, bad strings returning zero):
Put 0 into the number.
If the string is not any integer literal, exit.
Convert the string to the number.

The pertinent lines in the Example 3 program would then read:

Convert the string to a number (with error checking, bad strings returning zero). \ a little wordy, I admit, but crystal clear about what it does
If the number is not between 1 and 12, write "I was thinking you'd pick something between 1 and 12. Please try again." on the console; repeat.

I think "wrapping up" routines like this is part of the fun of Plain English programming.
You get to invent your own "dialect" of the language, and get to decide how your upper-level routines will read
based on which lower-level "helper" routines you add to your Project or Noodle.

\Either way thanks again for creating such an amazing language.  I've been having a blast programming small
\things to become familar and look forward to the big things in the future.

Just let me know when you need help.

\Take care now and God Bless!

Ditto.

Gerry