Um CLSID é um UUID. \ Class ID
\Uma Class ID (CLSID) é um número (grande) de 128 bits que representa uma ID exclusiva para um aplicativo de software ou componente de aplicativo. 
\As CLSIDs são utilizadas pelo Windows para identificar componentes de software sem que seja preciso conhecer o "nome" desses componentes.

Um wParam é um número. \ Um parâmetro de mensagem.
\WPARAMé um typedef para um UINT_PTR (que é um unsigned int) (32 bits sem sinal) no win32 e unsigned __int64 (64 bits sem sinal) no x86_64.

Um ABC é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-ABC
  \ A estrutura ABC contém a largura de um caractere em uma fonte TrueType.
  Um número denominado abcA, \ O espaçamento A do caractere. O espaçamento A é a distância a ser adicionada à posição atual antes de desenhar o glifo do caractere.
  Um número denominado abcB, \ O espaçamento B do caractere. O espaçamento B é a largura da parte desenhada do glifo do caractere.
  Um número denominado abcC.\ O espaçamento C do personagem. O espaçamento C é a distância a ser adicionada à posição atual para fornecer um espaço em branco à direita do glifo do caractere.
  \ A largura total de um caractere é a soma dos espaços A, B e C. Tanto o espaço A quanto o C podem ser negativos para indicar cavidades ou saliências.

Um pABC é um endereço de memória para um ABC.

Um ABC endereço de memória é um endereço de memória para um ABC.
  \ Um ponteiro para uma matriz de estruturas ABC que recebe as larguras dos caracteres, em unidades lógicas. 
  \Esta matriz deve conter, no mínimo, a mesma quantidade estruturas ABC que a quantidade de caracteres no intervalo especificado pelos parâmetros uFirstChar e uLastChar.
  \ Para mais informações, veja os sistes abaixo: 
  \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-ABC
  \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-getcharabcwidthsa

Um abcA é um número. \ O espaçamento A do caractere. O espaçamento A é a distância a ser adicionada à posição atual antes de desenhar o glifo do caractere.

Um abcC é um número. \ O espaçamento C do personagem. O espaçamento C é a distância a ser adicionada à posição atual para fornecer um espaço em branco à direita do glifo do caractere.

Um ADDRINFO é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/ws2def/ns-ws2def-addrinfoa
  \A estrutura addrinfo é usada pela função getaddrinfo para armazenar informações de endereço de host.
  Um número denominado ai_flags, \Tipo: int
  \ Sinalizadores que indicam opções usadas na função getaddrinfo.
  \ Os valores com suporte para o membro ai_flags são definidos no arquivo de cabeçalho Ws2def.h no Windows SDK para Windows 7 e posterior. 
  \ Esses valores são definidos no arquivo de cabeçalho Ws2tcpip.h no Windows SDK para Windows Server 2008 e Windows Vista. 
  \ Esses valores são definidos no arquivo de cabeçalho Ws2tcpip.h no Platform SDK para Windows Server 2003 e Windows XP. 
  \ Os valores com suporte para o membro ai_flags podem ser uma combinação XOR de valores hexadecimais.
  Um número denominado ai_family, \A família do endereço. Os valores possíveis para a família de endereços são definidos no arquivo de cabeçalho Winsock2.h.
  \ No Windows SDK lançado para Windows Vista e posterior, a organização dos arquivos de cabeçalho foi alterada e os valores possíveis para a família de endereços são definidos no arquivo de cabeçalho Ws2def.h.
  \  Observe que o arquivo de cabeçalho Ws2def.h é automaticamente incluído no Winsock2.h e nunca deve ser usado diretamente.
  \Os valores atualmente suportados são AF_INET ou AF_INET6, que são os formatos da família de endereços da Internet para IPv4 e IPv6. 
  \Outras opções para a família de endereços (AF_NETBIOS para uso com NetBIOS, por exemplo) são suportadas se um provedor de serviços Windows Sockets para a família de endereços estiver instalado. 
  \Observe que os valores para a família de endereço AF_ e constantes da família de protocolo PF_ são idênticos (por exemplo, AF_UNSPEC e PF_UNSPEC), portanto, qualquer constante pode ser usada.
  Um número denominado ai_sockettype, \ O tipo de soquete. Os valores possíveis para o tipo de soquete são definidos no arquivo de cabeçalho Winsock2.h.
  \No Windows Sockets 2, novos tipos de soquete foram introduzidos. 
  \Um aplicativo pode descobrir dinamicamente os atributos de cada protocolo de transporte disponível por meio da função WSAEnumProtocols. 
  \Portanto, um aplicativo pode determinar o tipo de soquete possível e as opções de protocolo para uma família de endereços e usar essas informações ao especificar este parâmetro. 
  \As definições de tipo de soquete nos arquivos de cabeçalho Winsock2.he Ws2def.h serão atualizadas periodicamente conforme novos tipos de soquete, famílias de endereços e protocolos são definidos.
  \ No Windows Sockets 1.1, os únicos tipos de soquete possíveis são SOCK_DATAGRAM (2) e SOCK_STREAM (1) .
  Um número denominado ai_protocol, \ O tipo de protocolo. As opções possíveis são específicas para a família de endereços e tipo de soquete especificados. 
  \Os valores possíveis para o ai_protocol são definidos nos arquivos de cabeçalho Winsock2.h e Wsrm.h.
  \No Windows SDK lançado para Windows Vista e posterior, a organização dos arquivos de cabeçalho foi alterada e esse membro pode ser um dos valores do tipo de enumeração IPPROTO definido no arquivo de cabeçalho Ws2def.h. 
  \Observe que o arquivo de cabeçalho Ws2def.h é automaticamente incluído no Winsock2.h e nunca deve ser usado diretamente.
  \Se um valor de 0 for especificado para ai_protocol, o chamador não deseja especificar um protocolo e o provedor de serviços escolherá o ai_protocol a ser usado. 
  \Para protocolos diferentes de IPv4 e IPv6, defina ai_protocol como zero.
  \ Se o membro ai_family for 26 (AF_IRDA), então o ai_protocol deve ser 0.
  Um número denominado ai_addrlen, \O comprimento, em bytes, do buffer apontado pelo membro ai_addr.
  Um endereçamento de caractere denominado ai_canonname, \O nome canônico do host.
  Um sockaddrptr denominado ai_addr, \Um ponteiro para uma estrutura sockaddr. 
  \O membro ai_addr em cada estrutura addrinfo retornada aponta para uma estrutura de endereço de soquete preenchida. 
  \O comprimento, em bytes, de cada estrutura addrinfo retornada é especificado no membro ai_addrlen.
  Um addrinfoptr denominado ai_next. \Um ponteiro para a próxima estrutura em uma lista vinculada. 
  \Este parâmetro é definido como NULL na última estrutura addrinfo de uma lista vinculada.

Some  addrinfo routines é um conjunto com
  Um getaddrinfo endereço de memória, \ https://docs.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo
  Um freeaddrinfo endereço de memória. \ https://docs.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-freeaddrinfo

Um addrinfoptr é um endereço de memória para um addrinfo.

Uma crypt session é uma coisa com \documentar isso com calma depois
  Um hCryptProv endereço de memória, \ O tipo de dados HCRYPTPROV é usado para representar identificadores para CSPs. 
  \Esses identificadores são usados para indicar qual módulo CSP executa operações específicas.
  Um hCryptHash endereço de memória, \O tipo de dados HCRYPTHASH é usado para representar identificadores para objetos hash. 
  \Esses identificadores indicam ao módulo CSP qual hash está sendo usado em uma operação específica.
  \ O módulo CSP não permite a manipulação direta dos valores de hash. 
  \Em vez disso, o usuário manipula os valores de hash por meio do identificador de hash.
  Um hCryptKey endereço de memória. \ usado para representar identificadores para chaves criptográficas. 
  \Esses identificadores são usados para indicar ao módulo CSP qual chave está sendo usada em uma operação específica. 
  \O módulo CSP não permite o acesso direto aos valores-chave. 
  \Em vez disso, o usuário executa funções usando o valor da chave por meio do identificador de chave.

Um DEVMODE é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-devmodea
  \A estrutura de dados DEVMODE contém informações sobre a inicialização e o ambiente de uma impressora ou dispositivo de exibição.
  32 pedaços denominados dmDeviceName, \ Um array de caracteres terminado em zero que especifica o nome "amigável" da impressora ou monitor; 
  \por exemplo, "PCL / HP LaserJet" no caso de PCL / HP LaserJet. 
  \Esta string é única entre os drivers de dispositivo. 
  \Observe que esse nome pode ser truncado para caber na matriz dmDeviceName.
  Uma word denominado dmSpecVersion, \ O número da versão da especificação de dados de inicialização na qual a estrutura é baseada. 
  \Para garantir que a versão correta seja usada para qualquer sistema operacional, use DM_SPECVERSION.
  Uma word denominado dmDriverVersion, \ O número da versão do driver atribuído pelo desenvolvedor do driver.
  Uma word denominado dmSize,\ Especifica o tamanho, em bytes, da estrutura DEVMODE, sem incluir nenhum dado específico do driver particular que possa seguir os membros públicos da estrutura.
  \Defina este membro como sizeof (DEVMODE) para indicar a versão da estrutura DEVMODE que está sendo usada.
  Uma word denominado dmDriverExtra, \ Contém o número de bytes de dados de driver privados que seguem esta estrutura. 
  \Se um driver de dispositivo não usar informações específicas do dispositivo, defina este membro como zero.
  Um número denominado dmFields, \ Especifica se determinados membros da estrutura DEVMODE foram inicializados. 
  \Se um membro é inicializado, seu bit correspondente é definido, caso contrário, o bit é limpo. 
  \Um driver oferece suporte apenas aos membros DEVMODE apropriados para a impressora ou tecnologia de vídeo.
  Uma word denominado dmOrientation, \ Somente para dispositivos de impressora, seleciona a orientação do papel. 
  \Este membro pode ser DMORIENT_PORTRAIT (1) ou DMORIENT_LANDSCAPE (2).
  Uma word denominado dmPaperSize, \ Somente para dispositivos de impressora, seleciona o tamanho do papel para imprimir. 
  \Este membro pode ser definido como zero se o comprimento e a largura do papel forem definidos pelos membros dmPaperLength e dmPaperWidth. 
  \Caso contrário, o membro dmPaperSize pode ser definido como um valor específico do dispositivo maior ou igual a DMPAPER_USER entre outros valores possíveis.
  Uma word denominado dmPaperLength, \Apenas para dispositivos de impressora, substitui o comprimento do papel especificado pelo membro dmPaperSize, 
  \para tamanhos de papel personalizados ou para dispositivos como impressoras matriciais que podem imprimir em uma página de comprimento arbitrário. 
  \Esses valores, junto com todos os outros valores nesta estrutura que especificam um comprimento físico, estão em décimos de milímetro.
  Uma word denominado dmPaperWidth, \ Somente para dispositivos de impressora, substitui a largura do papel especificada pelo membro dmPaperSize.
  Uma word denominado dmScale, \ Especifica o fator pelo qual a saída impressa deve ser dimensionada. 
  \O tamanho aparente da página é dimensionado do tamanho da página física por um fator de dmScale / 100. 
  \Por exemplo, uma página de tamanho carta com um valor dmScale de 50 conteria tantos dados quanto uma página de 17 por 22 polegadas 
  \porque o texto de saída e os gráficos teriam metade da altura e largura originais.
  Uma word denominado dmCopies, \ Seleciona o número de cópias impressas se o dispositivo oferecer suporte a cópias de várias páginas.
  Uma word denominado dmDefaultSource, \ Especifica a origem do papel. 
  \Para recuperar uma lista das origens de papel disponíveis para uma impressora, use a função DeviceCapabilities com o sinalizador DC_BINS.
  \ Pode ser um valor específico do dispositivo, sendo maior do que ou igual a DMBIN_USER.
  Uma word denominado dmPrintQuality, \ Especifica a resolução da impressora. Existem quatro valores predefinidos independentes de dispositivo:
  \Se um valor positivo for especificado, ele especifica o número de pontos por polegada (DPI) e, portanto, depende do dispositivo.
  Uma word denominado dmColor, \ Alterna entre o modo colorido e monocromático em impressoras coloridas.
  Uma word denominado dmDuplex, \Seleciona impressão duplex ou frente e verso para impressoras com capacidade de impressão duplex.
  Uma word denominado dmYResolution, \ Especifica a resolução y, em pontos por polegada, da impressora. 
  \Se a impressora inicializar este membro, o membro dmPrintQuality especifica a resolução x, em pontos por polegada, da impressora.
  Uma word denominado dmTTOption, \ Especifica como as fontes TrueType devem ser impressas. E
  Uma word denominado dmCollate, \ Especifica se o agrupamento deve ser usado ao imprimir várias cópias.
  \ (Este membro é ignorado, a menos que o driver da impressora indique suporte para agrupamento, definindo o membro dmFields como DM_COLLATE.)
  32 pedaços denominados dmFormName, \ Uma matriz de caracteres terminada em zero que especifica o nome do formulário a ser usado; por exemplo, "Carta" ou "Legal".
  \ Um conjunto completo de nomes pode ser recuperado usando a função EnumForms.
  Uma word denominado dmLogPixels, \ O número de pixels por polegada lógica. Drivers de impressora não usam este membro.
  Um número denominado dmBitsPerPel, \ Especifica a resolução da cor, em bits por pixel, do dispositivo de exibição (por exemplo: 4 bits para 16 cores, 8 bits para 256 cores ou 16 bits para 65.536 cores). 
  \Os drivers de vídeo usam esse membro, por exemplo, na função ChangeDisplaySettings. Drivers de impressora não usam este membro.
  Um número denominado dmPelsWidth, \ Especifica a largura, em pixels, da superfície visível do dispositivo. 
  \Os drivers de vídeo usam esse membro, por exemplo, na função ChangeDisplaySettings. Drivers de impressora não usam este membro.
  Um número denominado dmPelsHeight, \ Especifica a altura, em pixels, da superfície visível do dispositivo. 
  \Os drivers de vídeo usam esse membro, por exemplo, na função ChangeDisplaySettings. Drivers de impressora não usam este membro.
  Um número denominado dmDisplayFlags, \ Especifica o modo de exibição do dispositivo. Os drivers de vídeo usam esse membro, por exemplo, na função ChangeDisplaySettings. 
  \Drivers de impressora não usam este membro.
  Um número denominado dmDisplayFrequency, \ Especifica a frequência, em hertz (ciclos por segundo), do dispositivo de exibição em um modo particular. 
  \Este valor também é conhecido como taxa de atualização vertical do dispositivo de exibição. Drivers de vídeo usam este membro. 
  \É usado, por exemplo, na função ChangeDisplaySettings. Drivers de impressora não usam este membro.
  \Quando você chama a função EnumDisplaySettings, o membro dmDisplayFrequency pode retornar com o valor 0 ou 1. 
  \Esses valores representam a taxa de atualização padrão do hardware de vídeo. 
  \Essa taxa padrão é normalmente definida por interruptores em uma placa de vídeo ou placa-mãe de computador, 
  \ou por um programa de configuração que não usa funções de vídeo, como ChangeDisplaySettings.
  Um número denominado dmICMMethod, \Especifica como o ICM é tratado. Para um aplicativo não ICM, este membro determina se o ICM está habilitado ou desabilitado. 
  \Para aplicativos ICM, o sistema examina esse membro para determinar como lidar com o suporte ICM.
  Um número denominado dmICMIntent, \ O driver da impressora deve fornecer uma interface de usuário para configurar este membro. 
  \A maioria dos drivers de impressora suporta apenas o valor DMICMMETHOD_SYSTEM ou DMICMMETHOD_NONE. Os drivers para impressoras PostScript suportam todos os valores.
  Um número denominado dmMediaType, \ Especifica qual método de correspondência de cores, ou intenção, deve ser usado por padrão. 
  \Este membro é principalmente para aplicativos não ICM. Os aplicativos ICM podem estabelecer intenções usando as funções ICM.
  Um número denominado dmDitherType, \ Especifica o tipo de mídia que está sendo impressa.
  \Para recuperar uma lista dos tipos de mídia disponíveis para uma impressora, use a função DeviceCapabilities com o sinalizador DC_MEDIATYPES.
  Um número denominado dmReserved1, \ Não usado; deve ser zero.
  Um número denominado dmReserved2. \ Não usado; deve ser zero.

Um GcpResults é um conjunto com \GCP_RESULTS https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-gcp_resultsa
  \ A estrutura GCP_RESULTS contém informações sobre os caracteres em uma string. 
  \Essa estrutura recebe os resultados da função GetCharacterPlacement. 
  \Para alguns idiomas, o primeiro elemento nas matrizes pode conter mais informações dependentes do idioma.
  Um número denominado lStructSize, \O tamanho, em bytes, da estrutura.
  Um endereçamento de caractere denominado lpOutString, \Um ponteiro para o buffer que recebe a string de saída ou é NULL se a string de saída não for necessária.
  \ A string de saída é uma versão da string original que está na ordem em que será exibida em um dispositivo especificado. 
  \Normalmente, a string de saída é idêntica à string original, 
  \mas pode ser diferente se a string precisar ser reordenada e a sinalização GCP_REORDER for definida
  \ ou se a string original exceder a extensão máxima e a sinalização GCP_MAXEXTENT for definida.
  Um endereço numérico denominado lpOrder, \Um ponteiro para a matriz que recebe índices de ordenação ou é NULL se os índices de ordenação não forem necessários. 
  \No entanto, seu significado depende dos outros elementos de GCP_RESULTS. 
  \Se os índices de glifos devem ser retornados, os índices são para a matriz lpGlyphs; se os índices de glifos não forem retornados e lpOrder for solicitado, os índices serão para lpOutString. 
  \Por exemplo, no último caso, o valor de lpOrder [i] é a posição de lpString [i] na string de saída lpOutString.
  \Isso normalmente é usado quando GetFontLanguageInfo retorna a sinalização GCP_REORDER, que indica que a string original precisa ser reordenada. 
  \Por exemplo, em hebraico, em que o texto é executado da direita para a esquerda, a matriz lpOrder fornece as localizações exatas de cada elemento na string original.
  Um endereço numérico denominado lpDX, \Um ponteiro para a matriz que recebe as distâncias entre células de caracteres adjacentes ou é NULL se essas distâncias não forem necessárias. 
  \Se a renderização de glifos for feita, as distâncias serão para os glifos, não para os caracteres, portanto, a matriz resultante pode ser usada com a função ExtTextOut.
  \As distâncias nesta matriz estão em ordem de exibição.
  Um endereço numérico denominado lpCaretPos, \Um ponteiro para a matriz que recebe os valores da posição do cursor ou é NULL se as posições do cursor não forem necessárias. 
  \Cada valor especifica a posição do cursor imediatamente antes do caractere correspondente. 
  \Em alguns idiomas, a posição do cursor para cada caractere pode não ser imediatamente à esquerda do caractere. 
  \Por exemplo, em hebraico, em que o texto segue da direita para a esquerda, a posição do cursor é à direita do caractere. 
  \Se a ordenação de glifos for feita, lpCaretPos corresponderá à string original, não à string de saída. 
  \Isso significa que alguns valores adjacentes podem ser iguais.
  \Os valores nesta matriz estão na ordem de entrada.
  Um endereço de memória denominado lpClass, \Um ponteiro para a matriz que contém e / ou recebe classificações de caracteres. 
  \Os valores indicam como dispor os caracteres na string e são semelhantes (mas não idênticos) aos valores CT_CTYPE2 retornados pela função GetStringTypeEx.
  \ Favor ver mais detalhes na documentação daMicrosoft
  Um endereço de memória denominado lpGlyphs, \Um ponteiro para a matriz que recebe os valores que identificam os glifos usados para renderizar a string ou é NULL se a renderização de glifos não for necessária.
  \ O número de glifos na matriz pode ser menor que o número de caracteres na string original se a string contiver glifos ligados. 
  \Além disso, se a reordenação for necessária, a ordem dos glifos pode não ser sequencial.
  \Este array é útil se mais de uma operação está sendo feita em uma string que tem qualquer forma de ligação, kerning ou troca de ordem. 
  \Usar os valores nesta matriz para operações subsequentes economiza o tempo necessário para gerar os índices de glifo todas as vezes.
  \Esta matriz sempre contém índices de glifo e o valor ETO_GLYPH_INDEX deve sempre ser usado quando esta matriz é usada com a função ExtTextOut.
  \Quando GCP_LIGATE é usado, você pode limitar o número de caracteres que serão ligados entre si. (Em árabe, por exemplo, ligaduras de três caracteres são comuns). 
  \Isso é feito definindo o máximo necessário em lpGcpResults-> lpGlyphs [0]. Se nenhum máximo for necessário, você deve definir este campo como zero.
  \Para idiomas como o árabe, onde GetFontLanguageInfo retorna o sinalizador GCP_GLYPHSHAPE, os glifos de um caractere serão diferentes dependendo se o caractere está no início, meio ou final de uma palavra. 
  \Normalmente, o primeiro caractere na string de entrada também será o primeiro caractere em uma palavra, e o último caractere na string de entrada será tratado como o último caractere em uma palavra. 
  \No entanto, se a string exibida for um subconjunto da string completa, como ao exibir uma seção de texto rolado, isso pode não ser verdade. 
  \Nestes casos, é desejável forçar o primeiro ou o último caractere a serem moldados como não sendo formas iniciais ou finais. 
  \Para fazer isso, novamente, o primeiro local na matriz lpGlyphs é usado executando uma operação OR do valor de ligação acima com os valores GCPGLYPH_LINKBEFORE e / ou GCPGLYPH_LINKAFTER. 
  \Por exemplo, um valor de GCPGLYPH_LINKBEFORE | 2 significa que ligaduras de dois caracteres são o máximo necessário e o primeiro caractere da string deve ser tratado como se estivesse no meio de uma palavra.
  Um número denominado nGlyphs, \Na entrada, esse membro deve ser definido com o tamanho das matrizes apontadas pelos membros do ponteiro da matriz. 
  \Na saída, é definido como o número de glifos preenchidos nas matrizes de saída. 
  \Se a substituição de glifo não for necessária (ou seja, cada caractere de entrada é mapeado para exatamente um glifo), esse membro é o mesmo que na entrada.
  Um número denominado nMaxFit. \O número de caracteres que cabem nas extensões especificadas pelo parâmetro nMaxExtent da função GetCharacterPlacement. 
  \Se o valor GCP_MAXEXTENT ou GCP_JUSTIFY for definido, esse valor pode ser menor que o número de caracteres na string original. 
  \Este membro é definido independentemente de o valor GCP_MAXEXTENT ou GCP_JUSTIFY ser especificado. 
  \Ao contrário de nGlyphs, que especifica o número de glifos de saída, nMaxFit se refere ao número de caracteres da string de entrada. Para os idiomas latinos da SBCS, será o mesmo.

Um GdiplusStartupInput é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/gdiplusinit/ns-gdiplusinit-gdiplusstartupinput
  \A estrutura GdiplusStartupInput contém um bloco de argumentos que são exigidos pela função GdiplusStartup.
  Um número denominado GdiplusVersion, \ Especifica a versão do GDI +. Deve ser igual a 1.
  Um endereço de memória denominado DebugEventCallback, \ Ponteiro para uma função de retorno de chamada que GDI + pode chamar, em compilações de depuração, para asserções e avisos. 
  \O valor padrão é NULL.
  Um número denominado SuppressBackgroundThread, \ Valor booleano que especifica se o thread de segundo plano GDI + deve ser suprimido. 
  \Se você definir este membro como TRUE, então GdiplusStartup retorna (em seu parâmetro de saída) um ponteiro para uma função de gancho e um ponteiro para uma função de desengate. 
  \Você deve chamar essas funções apropriadamente para substituir o thread em segundo plano. 
  \Se você não quiser ser responsável por chamar as funções hook e unhook, defina este membro como FALSE. O valor padrão é falso.
  Um número denominado SuppressExternalCodecs. \ Valor booleano que especifica se você deseja que o GDI + suprima codecs de imagem externos. 
  \GDI + versão 1.0 não oferece suporte a codecs de imagem externos, portanto, este campo é ignorado. O valor padrão é falso.
  \A estrutura GdiplusStartupInput fornece um construtor que define o membro GdiplusVersion como 1 e permite que você especifique valores para os outros três membros.
  \ Todos os parâmetros do construtor são opcionais, portanto, você pode declarar uma variável do tipo GdiplusStartupInput sem passar nenhum argumento para o construtor, 
  \e todos os membros serão inicializados com os valores padrão apropriados.
  \Se você definir o membro SuppressBackgroundThread como TRUE no parâmetro de entrada de GdiplusStartup, 
  \deverá chamar as funções de gancho e desengate retornadas no parâmetro de saída retornado por essa função. 
  \Chame essas funções antes e depois do loop de mensagem principal do aplicativo; ou seja, um loop de mensagem que está ativo durante o tempo de vida do GDI +. 
  \Chame a função de gancho antes do início do loop e chame a função unhook após o término do loop.

Um in_addr é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/inaddr/ns-inaddr-in_addr
  \A estrutura in_addr representa um endereço IPv4.
  Um pedaço denominado s_b1, \ O endereço IPv4 do host formatado como quatro u_chars.
  Um pedaço denominado s_b2,
  Um pedaço denominado s_b3,
  Um pedaço denominado s_b4,
  Uma word [unsigned] denominado s_w1 sob o s_b1, \O endereço IPv4 do host formatado como dois u_shorts.
  Uma word [unsigned] denominado s_w2 sob o s_b3,
  Um número denominado s_addr sob o s_b1. \Endereço do host formatado como u_long.

Um istream é um endereço de memória para um istream object.

Um istream object é um conjunto com um istream vtable denominado vtable.

Um istream vtable é um endereço de memória para um istream vtable conjunto.
  \Uma vtable (tabela de método virtual) é uma tabela de ponteiros de função. 
  \O vtable é como o COM vincula uma chamada de método à sua implementação em tempo de execução. N
  \Não por coincidência, vtables são a forma como a maioria dos compiladores C ++ implementa métodos virtuais.
  Um istream vtable conjunto é um conjunto com
  \ iunknown \ https://docs.microsoft.com/en-us/windows/win32/api/objidl/nn-objidl-istream
  Um endereço de memória denominado queryinterface,\https://docs.microsoft.com/en-us/windows/win32/com/queryinterface--navigating-in-an-object
  Um endereço de memória denominado addref, \Incrementa a contagem de referência de um ponteiro de interface para um objeto COM. Você deve chamar este método sempre que fizer uma cópia de um ponteiro de interface
  Um endereço de memória denominado release, \ Diminui a contagem de referência para uma interface em um objeto COM.
  \function(this:istream):number; stdcall;
  \ istream
  Um endereço de memória denominado read,\O método Read lê um número especificado de bytes do objeto stream para a memória, começando no ponteiro de busca atual.
  Um endereço de memória denominado write,\O método Write grava um número especificado de bytes no objeto de fluxo, começando no ponteiro de busca atual.
  Um endereço de memória denominado seek, \Muda o ponteiro de busca para um novo local. O novo local é relativo ao início, ao final do fluxo ou ao ponteiro de busca atual.
  Um endereço de memória denominado setsize, \Altera o tamanho do objeto de fluxo.
  Um endereço de memória denominado copyto, \Copia um número especificado de bytes do ponteiro de busca atual no fluxo para o ponteiro de busca atual em outro fluxo.
  Um endereço de memória denominado commit, \O método Commit garante que todas as alterações feitas em um objeto de fluxo aberto no modo transacionado sejam refletidas no armazenamento pai.
  Um endereço de memória denominado revert, \O método Revert descarta todas as alterações feitas em um fluxo transacionado desde a última chamada IStream :: Commit. 
  \Em fluxos abertos em modo direto e fluxos usando a implementação de arquivo composto COM de IStream :: Revert, este método não tem efeito.
  Um endereço de memória denominado lockregion, \O método LockRegion restringe o acesso a um intervalo especificado de bytes no fluxo.
  Um endereço de memória denominado unlockregion,\O método UnlockRegion remove a restrição de acesso em um intervalo de bytes anteriormente restrito com IStream :: LockRegion.
  Um endereço de memória denominado stat,\O método Stat recupera a estrutura STATSTG para este fluxo.
  Um endereço de memória denominado clone. \O método Clone cria um novo objeto de fluxo com seu próprio ponteiro de busca que faz referência aos mesmos bytes que o fluxo original.

Um OUTLINETEXTMETRIC é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-outlinetextmetrica
  \A estrutura OUTLINETEXTMETRIC contém métricas que descrevem uma fonte TrueType.
  Um número denominado otmSize, \ O tamanho, em bytes, da estrutura OUTLINETEXTMETRIC.
  Um TEXTMETRIC denominado otmTextMetrics, \ Uma estrutura TEXTMETRIC contendo mais informações sobre a fonte.
  3 pedaços, \ otmFiller deve certificar-se de que o próximo campo comece no limite DWORD. 
  \Na verdade, existem três bytes de preenchimento, em vez de um único byte, pois OUTLINETEXTMETRIC deve ser compilado com pack(4)
  Um pedaço denominado otmFiller, \ Um valor que faz com que a estrutura seja alinhada por bytes.
  Um panose denominado otmPanoseNumber, \ O número PANOSE para esta fonte.
  1 pedaço, \ needed para alinhe structure
  Um número denominado otmfsSelection, \ A natureza do padrão da fonte. 0=itálico, 1=sublinhado, 2= plano de fundo trocado com a letra, 3= contorno, 4=tachado, 5=negrito
  Um número denominado otmfsType, \Indica se a fonte está licenciada. As fontes licenciadas não devem ser modificadas ou trocadas.
  Um número denominado otmsCharSlopeRise, \A inclinação do cursor. Este valor é 1 se a inclinação for vertical. 
  Um número denominado otmsCharSlopeRun, \A inclinação do cursor. Este valor é zero se a inclinação for vertical.
  \Os aplicativos podem usar esses valores acima para criar um cursor em itálico com a mesma inclinação do ângulo itálico principal (especificado pelo número otmItalicAngle).
  Um número denominado otmItalicAngle, \ O ângulo itálico principal da fonte, em décimos de grau no sentido anti-horário a partir da vertical. 
  \Fontes regulares (romanas) têm valor zero. As fontes em itálico geralmente têm um ângulo itálico negativo (ou seja, inclinam-se para a direita).
  Um número denominado otmEMSquare, \O número de unidades lógicas que definem a dimensão x ou y do "quadrado em" para esta fonte.
  \ (O número de unidades nas direções x e y são sempre iguais para um quadrado em.)
  Um número denominado otmAscent, \ Os caracteres de distância máxima nesta fonte se estendem acima da linha de base. Esta é a ascensão tipográfica da fonte.
  Um número denominado otmDescent, \ Os caracteres de distância máxima nesta fonte se estendem abaixo da linha de base. Esta é a descida tipográfica da fonte.
  Um número denominado otmLineGap, \ O espaçamento entre linhas tipográficas.
  Um número denominado otmsCapEmHeight, \ O Windows não provê esse recurso
  Um número denominado otmsXHeight,\ O Windows não provê esse recurso
  Um caixa denominado otmrcFontBox, \rect - A caixa delimitadora da fonte.
  Um número denominado otmMacAscent, \ Os caracteres de distância máxima nesta fonte se estendem acima da linha de base para o computador Macintosh.
  Um número denominado otmMacDescent, \ Os caracteres de distância máxima nesta fonte se estendem abaixo da linha de base para o computador Macintosh.
  Um número denominado otmMacLineGap, \ As informações de espaçamento de linha para o computador Macintosh.
  Um número denominado otmusMinimumPPEM, \ O menor tamanho recomendado para esta fonte, em pixels por quadrado EM.
  Uma localização denominado otmptSubscriptSize, \ point -  O tamanho horizontal e vertical recomendado para subscritos nesta fonte.
  Uma localização denominado otmptSubscriptOffset, \ O deslocamento horizontal e vertical recomendado para subscritos nesta fonte. O deslocamento do subscrito é medido da origem do caractere até a origem do caractere subscrito.
  Uma localização denominado otmptSuperscriptSize, \   O tamanho horizontal e vertical recomendado para sobrescritos nesta fonte.
  Uma localização denominado otmptSuperscriptOffset, \  O deslocamento horizontal e vertical recomendado para sobrescritos nesta fonte. O deslocamento sobrescrito é medido da linha de base do caractere até a linha de base do caractere sobrescrito.
  Um número denominado otmsStrikeoutSize, \  A largura do traço do tachado para esta fonte. Normalmente, essa é a largura do travessão da fonte.
  Um número denominado otmsStrikeoutPosition, \A posição do traço do tachado em relação à linha de base desta fonte. Os valores positivos estão acima da linha de base e os valores negativos estão abaixo.
  Um número denominado otmsUnderscoreSize, \ A espessura do caractere de sublinhado para esta fonte.
  Um número denominado otmsUnderscorePosition, \ The position of the underscore character for this font.
  Um endereço de memória denominado otmpFamilyName, \ O deslocamento do início da estrutura para uma string especificando o nome da família da fonte.
  Um endereço de memória denominado otmpFaceName, \ O deslocamento do início da estrutura para uma string especificando o nome do tipo de fonte. (Este nome de tipo de letra corresponde ao nome especificado na estrutura LOGFONT.)
  Um endereço de memória denominado otmpStyleName, \ O deslocamento do início da estrutura para uma string especificando o nome do estilo da fonte.
  Um endereço de memória denominado otmpFullName. \ O deslocamento do início da estrutura para uma string especificando o nome completo da fonte. Este nome é exclusivo para a fonte e geralmente contém um número de versão ou outras informações de identificação.

Um PANOSE é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-panose
  \A estrutura PANOSE descreve os valores de classificação de fonte PANOSE para uma fonte TrueType. 
  \Essas características são então usadas para associar a fonte a outras fontes de aparência semelhante, mas com nomes diferentes.
  \Os arquivos de fonte TrueType incluem números PANOSE, que os aplicativos podem usar para escolher uma fonte que corresponda às suas especificações.
  \ O sistema PANOSE classifica faces por 10 atributos diferentes. 
  \Uma estrutura PANOSE faz parte da estrutura OUTLINETEXTMETRIC (cujos valores são preenchidos chamando a função GetOutlineTextMetrics).
  \Os atributos PANOSE são avaliados individualmente em uma escala. 
  \Os valores resultantes são concatenados para produzir um número.
  \ Dado este número para uma fonte e uma métrica matemática para medir distâncias no espaço PANOSE, um aplicativo pode determinar os vizinhos mais próximos.
  Um pedaço denominado bFamilyType, \ consulte a documentação oficial para verificar os valores possíveis para estes bytes
  Um pedaço denominado bSerifStyle,
  Um pedaço denominado bWeight,
  Um pedaço denominado bProportion,
  Um pedaço denominado bContrast,
  Um pedaço denominado bStrokeVariation,
  Um pedaço denominado bArmStyle,
  Um pedaço denominado bLetterform,
  Um pedaço denominado bMidline,
  Um pedaço denominado bXHeight.

An PRINTDLGEX é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/commdlg/ns-commdlg-printdlgexw
  \Contém informações que a função PrintDlgEx usa para inicializar a folha de propriedades de impressão. 
  \Depois que o usuário fecha a folha de propriedades, o sistema usa essa estrutura para retornar informações sobre as seleções do usuário.
  Um número denominado lStructSize,\O tamanho da estrutura, em bytes.
  Um janela do programa denominado hwndOwner,\Um identificador para a janela que possui a folha de propriedades. Este membro deve ser um identificador de janela válido; não pode ser NULL.
  Um número identificador denominado hDevMode,\Um identificador para um objeto de memória global móvel que contém uma estrutura DEVMODE. 
  \Se hDevMode não for NULL na entrada, você deve alocar um bloco móvel de memória para a estrutura DEVMODE e inicializar seus membros. 
  \A função PrintDlgEx usa os dados de entrada para inicializar os controles na folha de propriedades. 
  \Quando PrintDlgEx retorna, os membros DEVMODE indicam a entrada do usuário.
  \Se hDevMode for NULL na entrada, PrintDlgEx aloca memória para a estrutura DEVMODE, inicializa seus membros para indicar a entrada do usuário e retorna um identificador que a identifica.
  Um número identificador denominado hDevNames,\Um identificador para um objeto de memória global móvel que contém uma estrutura DEVNAMES. 
  \Se hDevNames não for NULL na entrada, você deve alocar um bloco móvel de memória para a estrutura DEVNAMES e inicializar seus membros. 
  \A função PrintDlgEx usa os dados de entrada para inicializar os controles na folha de propriedades. 
  \Quando PrintDlgEx retorna, os membros DEVNAMES contêm informações para a impressora escolhida pelo usuário.
  \ Você pode usar essas informações para criar um contexto de dispositivo ou um contexto de informações.
  \O membro hDevNames pode ser NULL, nesse caso, PrintDlgEx aloca memória para a estrutura DEVNAMES, inicializa seus membros para indicar a entrada do usuário e retorna um identificador que o identifica.
  Um canvas denominado hDC,\Um identificador para um contexto de dispositivo ou um contexto de informações, dependendo se o membro Flags especifica o sinalizador PD_RETURNDC ou PC_RETURNIC. 
  \Se nenhum sinalizador for especificado, o valor deste membro é indefinido. Se ambos os sinalizadores forem especificados, PD_RETURNDC tem prioridade.
  Um número denominado Flags,\Um conjunto de sinalizadores de bits que você pode usar para inicializar a folha de propriedades Imprimir. 
  \Quando a função PrintDlgEx retorna, ela define esses sinalizadores para indicar a entrada do usuário. 
  \Para garantir que PrintDlg ou PrintDlgEx retorne os valores corretos nos membros dmCopies e dmCollate da estrutura DEVMODE, defina PD_RETURNDC = TRUE e PD_USEDEVMODECOPIESANDCOLLATE = TRUE. 
  \Ao fazer isso, o membro nCopies da estrutura PRINTDLG é sempre 1 e PD_COLLATE é sempre FALSE.
  \Para garantir que PrintDlg ou PrintDlgEx retorne os valores corretos em nCopies e PD_COLLATE, defina PD_RETURNDC = TRUE e PD_USEDEVMODECOPIESANDCOLLATE = FALSE. 
  \Ao fazer isso, dmCopies é sempre 1 e dmCollate é sempre FALSE.
  \Começando com o Windows Vista, quando você chama PrintDlg ou PrintDlgEx com PD_RETURNDC definido como TRUE e PD_USEDEVMODECOPIESANDCOLLATE definido como FALSE, 
  \a função PrintDlg ou PrintDlgEx define o número de cópias no membro nCopies da estrutura PRINTDLG e define o número de cópias no estrutura representada pelo membro hDC da estrutura PRINTDLG.
  \Ao fazer chamadas para GDI, você deve ignorar o valor de nCopies, considerar o valor como 1 e usar o hDC retornado para evitar a impressão de cópias duplicadas.
  Um número denominado Flags2,\Tipo: DWORD
  Um número denominado ExclusionFlags,\Um conjunto de sinalizadores de bits que podem excluir itens das páginas de propriedades do driver da impressora na folha de propriedades Imprimir. 
  \Este valor é usado apenas se o sinalizador PD_EXCLUSIONFLAGS estiver definido no membro Sinalizadores. 
  \Os sinalizadores de exclusão devem ser usados apenas se o item a ser excluído for incluído na página Geral ou em uma página definida pelo aplicativo na folha de propriedades Imprimir. 
  Um número denominado nPageRanges,\Na entrada, defina este membro com o número inicial de intervalos de páginas especificados na matriz lpPageRanges. 
  \Quando a função PrintDlgEx retorna, nPageRanges indica o número de intervalos de páginas especificados pelo usuário armazenados na matriz lpPageRanges. 
  \Se o sinalizador PD_NOPAGENUMS for especificado, este valor não é válido.
  Um número denominado nMaxPageRanges,\O tamanho, em elementos da matriz, do buffer lpPageRanges. 
  \Este valor indica o número máximo de intervalos de páginas que podem ser armazenados na matriz. 
  \Se o sinalizador PD_NOPAGENUMS for especificado, este valor não é válido. 
  \Se o sinalizador PD_NOPAGENUMS não for especificado, esse valor deve ser maior que zero.
  Um endereço de memória denominado lpPageRanges,\Ponteiro para um buffer que contém uma matriz de estruturas PRINTPAGERANGE.
  \ Na entrada, a matriz contém os intervalos de páginas iniciais a serem exibidos no controle de edição de páginas. 
  \Quando a função PrintDlgEx retorna, a matriz contém os intervalos de páginas especificados pelo usuário. 
  \Se o sinalizador PD_NOPAGENUMS for especificado, este valor não é válido. 
  \Se o sinalizador PD_NOPAGENUMS não for especificado, lpPageRanges deve ser diferente de NULL.
  Um número denominado nMinPage,\O valor mínimo para os intervalos de páginas especificados no controle de edição Pages. Se o sinalizador PD_NOPAGENUMS for especificado, este valor não é válido.
  Um número denominado nMaxPage,\O valor máximo para os intervalos de páginas especificados no controle de edição Pages. Se o sinalizador PD_NOPAGENUMS for especificado, este valor não é válido.
  Um número denominado nCopies,\Contém o número inicial de cópias para o controle de edição de cópias se hDevMode for NULL; caso contrário, o membro dmCopies da estrutura DEVMODE contém o valor inicial. 
  \Quando PrintDlgEx retorna, nCopies contém o número real de cópias que o aplicativo deve imprimir. 
  \Este valor depende se o aplicativo ou o driver da impressora é responsável pela impressão de várias cópias. 
  \Se o sinalizador PD_USEDEVMODECOPIESANDCOLLATE é definido no membro Flags, nCopies é sempre 1 no retorno e o driver de impressora é responsável por imprimir várias cópias. 
  \Se o sinalizador não for definido, o aplicativo é responsável por imprimir a quantidade de cópias especificada pela nCopies. 
  \Para obter mais informações, consulte a descrição do sinalizador PD_USEDEVMODECOPIESANDCOLLATE.
  Um número identificador denominado hInstance,\Se o sinalizador PD_ENABLEPRINTTEMPLATE é definido no membro Flags, hInstance é um identificador para o aplicativo ou instância do módulo que contém o modelo de caixa de diálogo nomeado pelo membro lpPrintTemplateName. 
  \Se o sinalizador PD_ENABLEPRINTTEMPLATEHANDLE é definido no membro Flags, hInstance é um identificador para um objeto de memória que contém um modelo de caixa de diálogo. 
  \Se nenhum dos sinalizadores de modelo for definido no membro Flags, hInstance deve ser NULL.
  Um endereço de memória denominado lpPrintTemplateName,\O nome do recurso de modelo de caixa de diálogo no módulo identificado pelo membro hInstance. 
  \Este modelo substitui o modelo de caixa de diálogo padrão na parte inferior da página Geral. O modelo padrão contém controles semelhantes aos da caixa de diálogo Imprimir. 
  \Este membro é ignorado, a menos que o sinalizador PD_ENABLEPRINTTEMPLATE seja definido no membro Sinalizadores.
  Um endereço de memória denominado lpCallback,\Um ponteiro para um objeto de retorno de chamada definido pelo aplicativo.
  \O objeto deve conter a classe IPrintDialogCallback para receber mensagens para a caixa de diálogo filho na parte inferior da página Geral.
  \O objeto de retorno de chamada também deve conter a classe IObjectWithSite para receber um ponteiro para a interface IPrintDialogServices. 
  \A função PrintDlgEx chama IUnknown :: QueryInterface no objeto de retorno de chamada para IID_IPrintDialogCallback e IID_IObjectWithSite para determinar quais interfaces têm suporte.
  \Se você não deseja recuperar nenhuma das informações de retorno de chamada, defina lpCallback como NULL.
  Um número denominado nPropertyPages,\O número de identificadores de página de propriedade na matriz lphPropertyPages.
  Um endereço de memória denominado lphPropertyPages,\Contém uma matriz de alças de página de propriedades para adicionar à folha de propriedades Imprimir.
  \As páginas de propriedades adicionais seguem a página Geral. Use a função CreatePropertySheetPage para criar essas páginas adicionais. 
  \Quando a função PrintDlgEx retorna, todos os identificadores HPROPSHEETPAGE na matriz lphPropertyPages foram destruídos. Se nPropertyPages for zero, lphPropertyPages deve ser NULL.
  Um número denominado nStartPage,\A página de propriedades que é exibida inicialmente. Para exibir a página Geral, especifique START_PAGE_GENERAL. 
  \Caso contrário, especifique o índice baseado em zero de uma página de propriedades na matriz especificada no membro lphPropertyPages. 
  \Para consistência, é recomendado que a folha de propriedades sempre seja iniciada na página Geral.
  Um número denominado dwResultAction.\Na entrada, defina este membro como zero. Se a função PrintDlgEx retornar S_OK, dwResultAction conterá o resultado da caixa de diálogo. 
  \Se PrintDlgEx retornar um erro, este membro deve ser ignorado.

Um SOCKADDR é um conjunto com \ A estrutura SOCKADDR_IN especifica um endereço de transporte e uma porta para a família de endereços AF_INET.
  \ Todos os dados na estrutura SOCKADDR_IN, exceto para a família de endereços (parâmetro sin*_family), devem ser especificados na ordem de byte da rede (big-endian).
  \As funções do Winsock usando SOCKADDR não são estritamente interpretadas para serem ponteiros para uma estrutura sockaddr. 
  \A estrutura é interpretada de forma diferente no contexto de famílias de endereços diferentes. 
  Uma word denominado sin_family, \A família de endereços para o endereço de transporte. Este membro deve sempre ser definido como AF_INET.
  Um word big-endian unsigned denominado sin_port, \ Um número de porta de protocolo de transporte.
  Um in_addr denominado sin_addr, \ Uma estrutura IN_ADDR que contém um endereço de transporte IPv4.
  8 pedaços denominados sin_zero. \ Reservado para uso do sistema. Um aplicativo WSK deve definir o conteúdo desse array como zero.

Um sockaddrptr é um endereço de memória para um sockaddr.

Um STARTUPINFO é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa
  \Especifica a estação da janela, a área de trabalho, as alças padrão e a aparência da janela principal para um processo no momento da criação.
  Um número denominado cb,\O tamanho da estrutura, em bytes.
  Um endereço de memória denominado lIsoled,\Reservado; deve ser NULL.
  Um endereço de memória denominado lpDesktop,\O nome da área de trabalho ou o nome da área de trabalho e da estação de janela para este processo. 
  \Uma barra invertida na string indica que a string inclui os nomes da estação de trabalho e da janela.
  \Para maiores informações, consulte https://docs.microsoft.com/en-us/windows/win32/winstation/thread-connection-to-a-desktop
  Um endereço de memória denominado lpTitle, \Para processos de console, este é o título exibido na barra de título se uma nova janela de console for criada. 
  \Se NULL, o nome do arquivo executável é usado como título da janela. 
  \Este parâmetro deve ser NULL para processos de GUI ou console que não criam uma nova janela de console.
  Um número denominado dwX,\Caso dwFlags especifique o valor de STARTF_USEPOSITION, este membro é o deslocamento x do canto superior esquerdo de uma janela se uma nova janela for criada, em pixels. 
  \Caso contrário, este membro é ignorado. \O deslocamento é a partir do canto superior esquerdo da tela.
  \ Para processos GUI, a posição especificada é usada na primeira vez que o novo processo chama CreateWindow para criar uma janela sobreposta se o parâmetro x de CreateWindow for CW_USEDEFAULT.
  Um número denominado dwY, \Caso dwFlags especifique o valor de STARTF_USEPOSITION, este membro é o deslocamento y do canto superior esquerdo de uma janela se uma nova janela for criada, em pixels. 
  \Caso contrário, este membro é ignorado.
  Um número denominado dwXSize,\Se dwFlags especificar STARTF_USESIZE, esse membro terá a largura da janela se uma nova janela for criada, em pixels. Caso contrário, este membro é ignorado.
  Um número denominado dwYSize,\Se dwFlags especifica STARTF_USESIZE, este membro é a altura da janela se uma nova janela for criada, em pixels. Caso contrário, este membro é ignorado.
  Um número denominado dwXCountChars,\Se dwFlags especifica STARTF_USECOUNTCHARS, se uma nova janela de console é criada em um processo de console, este membro especifica a largura do buffer de tela, em colunas de caracteres.
  Um número denominado dwYCountChars,\Se dwFlags especifica STARTF_USECOUNTCHARS, se uma nova janela de console é criada em um processo de console, este membro especifica a altura do buffer de tela, em linhas de caracteres.
  Um número denominado dwFillAttribute,\Se dwFlags especifica STARTF_USEFILLATTRIBUTE, este membro é o texto inicial e as cores do plano de fundo se uma nova janela de console for criada em um aplicativo de console.
  Um número denominado dwFlags,\Um campo de bits que determina se determinados membros STARTUPINFO são usados quando o processo cria uma janela.
  Uma word denominado wShowWindow,\Se dwFlags especifica STARTF_USESHOWWINDOW, este membro pode ser qualquer um dos valores que podem ser especificados no parâmetro nCmdShow para a função ShowWindow, exceto para SW_SHOWDEFAULT.
  Uma word denominado cbReserved2,\Reservados para uso do C Run-time; deve ser zero.
  Um endereço de memória denominado lIsoled2,\Reservados para uso do C Run-time; deve ser zero.
  Um número identificador denominado hStdInput,\Se dwFlags especifica STARTF_USESTDHANDLES, este membro é o identificador de entrada padrão para o processo. 
  \Se STARTF_USESTDHANDLES não for especificado, o padrão para a entrada padrão é o buffer do teclado.
  \Se dwFlags especifica STARTF_USEHOTKEY, este membro especifica um valor de tecla de atalho que é enviado como o parâmetro wParam de uma mensagem WM_SETHOTKEY para a primeira janela de nível superior elegível criada pelo aplicativo que possui o processo. 
  \Se a janela for criada com o estilo de janela WS_POPUP, ela não será elegível, a menos que o estilo de janela estendida WS_EX_APPWINDOW também seja definido. 
  \Para obter mais informações, consulte CreateWindowEx. https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexa
  Um número identificador denominado hStdOutput, \Se dwFlags especifica STARTF_USESTDHANDLES, este membro é o identificador de saída padrão para o processo. 
  \Caso contrário, este membro é ignorado e o padrão para a saída padrão é o buffer da janela do console.
  \Se um processo for iniciado a partir da barra de tarefas ou lista de atalhos, o sistema define hStdOutput como um identificador para o monitor que contém a barra de tarefas ou lista de atalhos usada para iniciar o processo. 
  \OBS: Esse comportamento foi introduzido no Windows 8 e no Windows Server 2012.
  Um número identificador denominado hStdError.\Se dwFlags especifica STARTF_USESTDHANDLES, este membro é o identificador de erro padrão para o processo. 
  \Caso contrário, este membro é ignorado e o padrão para o erro padrão é o buffer da janela do console.

Um SYSTEMTIME é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-SYSTEMTIME
  \Especifica uma data e hora, usando membros individuais para o mês, dia, ano, dia da semana, hora, minuto, segundo e milissegundo. 
  \A hora está na hora universal coordenada (UTC) ou na hora local, dependendo da função que está sendo chamada.
  Uma word denominado wYear, \ O ano. Os valores válidos para este membro são de 1601 a 30827.
  Uma word denominado wMonth, \ O mês. De 1 a 12
  Uma word denominado wDayOfWeek, \ O dia da semana. De 0 a 6, começando no Domingo
  Uma word denominado wDay, \ O dia do mês. De 1 a 31
  Uma word denominado wHour, \ A hora. de 0 a 23
  Uma word denominado wMinute, \ O minuto. De 0 a 59.
  Uma word denominado wSecond, \ O segundo. De 0 a 59.
  Uma word denominado wMilliseconds. \ O milissegundo. De 0 a 999.

Um talker vtable conjunto é um conjunto com \ documentar https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ee413476(v=vs.85)
  \ iunknown
  Um endereço de memória denominado QueryInterface,\https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms719854(v=vs.85)
  Um endereço de memória denominado AddRef,
  Um endereço de memória denominado Release, \ em this:pspvoice out número
  \ italker -.https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms717961(v=vs.85)
  Um endereço de memória denominado SetNotifySink,
  Um endereço de memória denominado SetNotifyWindowMessage,
  Um endereço de memória denominado SetNotifyCallbackFunction,
  Um endereço de memória denominado SetNotifyCallbackInterface,
  Um endereço de memória denominado SetNotifyWin32Event,
  Um endereço de memória denominado WaitForNotifyEvent,
  Um endereço de memória denominado GetNotifyEventHandle,\Recupera um identificador para um evento de notificação.
  \ https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms717848(v=vs.85)
  Um endereço de memória denominado SetInterest,
  Um endereço de memória denominado GetEvents,
  Um endereço de memória denominado GetInfo,
  Um endereço de memória denominado SetOutput,
  Um endereço de memória denominado GetOutputObjectToken,
  Um endereço de memória denominado GetOutputStream,
  Um endereço de memória denominado Pause,
  Um endereço de memória denominado Resume,
  Um endereço de memória denominado SetVoice,
  Um endereço de memória denominado GetVoice,
  Um endereço de memória denominado Speak, \ em this:pspvoice; pwcs:pwchar; dwflags:number; pulstreamnumber:pnumber out número
  Um endereço de memória denominado SpeakStream,
  Um endereço de memória denominado GetStatus,
  Um endereço de memória denominado Skip,
  Um endereço de memória denominado SetPriority,
  Um endereço de memória denominado GetPriority,
  Um endereço de memória denominado SetAlertBoundary,
  Um endereço de memória denominado GetAlertBoundary,
  Um endereço de memória denominado SetRate,
  Um endereço de memória denominado GetRate,
  Um endereço de memória denominado SetVolume,
  Um endereço de memória denominado GetVolume,
  Um endereço de memória denominado WaitUntilDone,
  Um endereço de memória denominado SetSyncSpeakTimeout,
  Um endereço de memória denominado GetSyncSpeakTimeout,
  Um endereço de memória denominado SpeakCompleteEvent,
  Um endereço de memória denominado IsUISupported,
  Um endereço de memória denominado DisplayUI.

Um TEXTMETRIC é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-textmetrica
  \A estrutura TEXTMETRIC contém informações básicas sobre uma fonte física. 
  \Todos os tamanhos são especificados em unidades lógicas; ou seja, eles dependem do modo de mapeamento atual do contexto de exibição.
  Um número denominado tmHeight, \ A altura (subida + descida) de caracteres.
  Um número denominado tmAscent, \ A subida (unidades acima da linha de base) de caracteres.
  Um número denominado tmDescent, \A descida (unidades abaixo da linha de base) de caracteres
  Um número denominado tmInternalLeading, \ A quantidade de entrelinhas (espaço) dentro dos limites definidos pelo membro tmHeight. 
  \Marcas de acento e outros caracteres diacríticos podem ocorrer nesta área. O designer pode definir esse número como sendo zero.
  Um número denominado tmExternalLeading, \ A quantidade de entrelinhas extras (espaço) que o aplicativo adiciona entre as linhas. 
  \Como essa área está fora da fonte, ela não contém marcas e não é alterada por chamadas de saída de texto no modo OPACO ou TRANSPARENTE. 
  \O designer pode definir esse número como zero.
  Um número denominado tmAveCharWidth, \A largura média dos caracteres da fonte (geralmente definida como a largura da letra x). 
  \Este valor não inclui a largura necessária para caracteres em negrito ou itálico.
  Um número denominado tmMaxCharWidth, \ A largura do caractere mais largo da fonte.
  Um número denominado tmWeight, \ O "peso numérico" da fonte.
  Um número denominado tmOverhang, \A largura extra por string que pode ser adicionada a algumas fontes sintetizadas. 
  \Ao sintetizar alguns atributos, como negrito ou itálico, a interface de dispositivo gráfico (GDI) ou um dispositivo pode ter que adicionar largura a uma string em cada caractere e em cada string. 
  \ Por exemplo, GDI torna uma seqüência de caracteres em negrito, expandindo o espaçamento de cada caractere e overstriking ele por um valor de deslocamento; 
  \ele coloca uma fonte em itálico, cortando a string. 
  \Em ambos os casos, há uma saliência além da string básica. 
  \Para strings em negrito, a saliência é a distância pela qual o overstrike é compensado. 
  \Para strings em itálico, a saliência é a quantidade que a parte superior da fonte é cortada além da parte inferior da fonte.
  \O membro tmOverhang permite que o aplicativo determine quanto da largura do caractere retornada por uma chamada de função GetTextExtentPoint32 em um único caractere é a largura real do caractere e quanto é a largura extra por string. 
  \A largura real é a extensão menos a saliência.
  Um número denominado tmDigitizedAspectX, \ O aspecto horizontal do dispositivo para o qual a fonte foi projetada.
  Um número denominado tmDigitizedAspectY, \ O aspecto vertical do dispositivo para o qual a fonte foi projetada. 
  \A proporção dos membros tmDigitizedAspectX e tmDigitizedAspectY é a proporção do dispositivo para o qual a fonte foi projetada.
  Um pedaço denominado tmFirstChar, \ O valor do primeiro caractere definido na fonte.
  Um pedaço denominado tmLastChar, \ O valor do último caractere definido na fonte.
  Um pedaço denominado tmDefaultChar, \ O valor do caractere a ser substituído por caracteres que não estão na fonte.
  Um pedaço denominado tmBreakChar, \ O valor do caractere que será usado para definir quebras de palavra para justificação de texto.
  Um pedaço denominado tmItalic, \ Especifica uma fonte em itálico se for diferente de zero.
  Um pedaço denominado tmUnderlined, \ Especifica uma fonte sublinhada se for diferente de zero.
  Um pedaço denominado tmStruckOut, \ Uma fonte tachada se for diferente de zero.
  Um pedaço denominado tmPitchAndFamily, \ Especifica informações sobre o pitch, a tecnologia e a família de uma fonte física.
  \Os quatro bits de ordem inferior deste membro especificam informações sobre o pitch e a tecnologia da fonte. 
  \Uma constante é definida para cada um dos quatro bits.
  \Um aplicativo deve testar cuidadosamente as qualidades codificadas nesses bits de ordem inferior, sem fazer suposições arbitrárias. 
  \Por exemplo, além de ter seus próprios bits definidos, as fontes TrueType e PostScript definem o bit TMPF_VECTOR. 
  \Uma fonte de bitmap monoespaçada tem todos esses bits de ordem inferior limpos; uma fonte de bitmap proporcional define o bit TMPF_FIXED_PITCH. 
  \Uma fonte de dispositivo de impressora PostScript define os bits TMPF_DEVICE, TMPF_VECTOR e TMPF_FIXED_PITCH.
  \Os quatro bits de ordem superior de tmPitchAndFamily designam a família da fonte da fonte. 
  \Um aplicativo pode usar o valor 0xF0 e o operador AND bit a bit para mascarar os quatro bits de ordem inferior de tmPitchAndFamily, obtendo assim um valor que pode ser comparado diretamente com nomes de família de fontes para encontrar uma correspondência idêntica. 
  \Para obter informações sobre famílias de fontes, consulte a descrição da estrutura LOGFONT. https://docs.microsoft.com/en-us/windows/desktop/api/wingdi/ns-wingdi-logfonta
 Um pedaço denominado tmCharSet.\ O conjunto de caracteres da fonte.

Um URL_COMPONENTS é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/WinHTTP/ns-WinHTTP-url_components
  \Contém as partes constituintes de uma URL. 
  \Essa estrutura é usada com as funções InternetCrackUrl e InternetCreateUrl.
  Um número denominado dwStructSize, \ O ramanho dessa estrutura, em bytes.
  Um endereçamento de caractere denominado lpszScheme, \ Ponteiro para uma string que contém o nome do esquema.
  Um número denominado dwSchemeLength, \ Tamanho do nome do esquema, em TCHARs.
  Um número denominado nScheme, \ Valor INTERNET_SCHEME que indica o esquema de protocolo da Internet. https://docs.microsoft.com/en-us/windows/win32/api/wininet/ne-wininet-internet_scheme
  Um endereçamento de caractere denominado lpszHostName, \ Ponteiro para uma string que contém o nome do host.
  Um número denominado dwHostNameLength, \ Tamanho do nome do host, em TCHARs.
  Um número denominado nPort, \ Número da porta convertido. isto é considerado como um word na documentação do Windows (INTERNET_PORT), mas não funciona. Parece ser um WORD
  Um endereçamento de caractere denominado lpszUserName, \ Ponteiro para um valor de string que contém o nome do usuário.
  Um número denominado dwUserNameLength, \ Tamanho do nome do usuário, em TCHARs.
  Um endereçamento de caractere denominado lpszPassword, \ Ponteiro para uma string que contém a senha.
  Um número denominado dwPasswordLength, \ Tamanho da senha, em TCHARs.
  Um endereçamento de caractere denominado lpszUrlPath, \ Ponteiro para uma string que contém o caminho do URL.
  Um número denominado dwUrlPathLength, \ Tamanho do caminho do URL, em TCHARs.
  Um endereçamento de caractere denominado lpszExtraInfo, \ Ponteiro para uma string que contém as informações extras (por exemplo, ?string ou #string).
  Um número denominado dwExtraInfoLength. \ Tamanho das informações extras, em TCHARs.

Um UUID é um conjunto com
  \ A estrutura UUID define um identificador único universal (UUID). 
  \Um UUID fornece uma designação exclusiva de um objeto, como uma interface, um vetor de ponto de entrada do gerenciador ou um objeto cliente.
  \A estrutura UUID é um sinônimo typedefizado para a estrutura GUID.
  Um número denominado d1, \unsigned long
  \ Especifica os primeiros 8 dígitos hexadecimais da GUID.
  Uma word denominado d2, \unsigned short
  \ Especifica o primeiro grupo de 4 dígitos hexadecimais.
  Uma word denominado d3, \unsigned short
  \ Especifica o segundo grupo de 4 dígitos hexadecimais.
  8 pedaços denominados d4. \unsigned char
  \ Array de 8 bytes. 
  \ Os primeiros 2 bytes contêm o terceiro grupo de 4 dígitos hexadecimais. 
  \ Os 6 bytes restantes contêm os 12 dígitos hexadecimais finais.

Um WIN32FINDDATA é um conjunto com \https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-win32_find_dataa
\Contém informações sobre o arquivo localizado pela função FindFirstFile, FindFirstFileEx ou FindNextFile.
  Um número denominado dwFileAttributes,
  \Os atributos de arquivo de um arquivo.
  \Para valores possíveis e suas descrições, consulte https://docs.microsoft.com/en-us/windows/desktop/FileIO/file-attribute-constants
  \O atributo FILE_ATTRIBUTE_SPARSE_FILE no arquivo é definido se qualquer um dos fluxos do arquivo já foi esparso.
  Um filetime denominado ftCreationTime,
  \Uma estrutura FILETIME que especifica quando um arquivo ou diretório foi criado.
  \Se o sistema de arquivos subjacente não suportar a hora de criação, este valor será zero.
  Um filetime denominado ftLastAccessTime,
  \Uma estrutura FILETIME.
  \Para um arquivo, a estrutura especifica quando o arquivo foi lido pela última vez, gravado ou executado para arquivos executáveis.
  \Para um diretório, a estrutura especifica quando o diretório é criado. 
  \Se o sistema de arquivos subjacente não suportar a hora do último acesso, esse membro será zero.
  \No sistema de arquivos FAT, a data especificada para arquivos e diretórios está correta, mas a hora do dia é sempre definida para meia-noite.
  Um filetime denominado ftLastWriteTime,
  \Uma estrutura FILETIME. https://docs.microsoft.com/en-us/windows/desktop/api/minwinbase/ns-minwinbase-filetime
  \Para um arquivo, a estrutura especifica quando o arquivo foi gravado, truncado ou substituído pela última vez, por exemplo, quando WriteFile ou SetEndOfFile são usados. 
  \ A data e a hora não são atualizadas quando os atributos do arquivo ou descritores de segurança são alterados.
  \Para um diretório, a estrutura especifica quando o diretório é criado. 
  \Se o sistema de arquivos subjacente não suportar a hora da última gravação, esse valor será zero.
  Um número denominado nFileSizeHigh,
  \O valor DWORD de ordem superior do tamanho do arquivo, em bytes.
  \Este valor é zero, a menos que o tamanho do arquivo seja maior que MAXDWORD.
  \O tamanho do arquivo é igual a (nFileSizeHigh * (MAXDWORD + 1)) + nFileSizeLow.
  Um número denominado nFileSizeLow,
  \ O valor DWORD de ordem inferior do tamanho do arquivo, em bytes.
  Um número denominado dwReserved0,
  \Se o membro dwFileAttributes inclui o atributo FILE_ATTRIBUTE_REPARSE_POINT, este membro especifica a marca de ponto de nova análise.
  \Caso contrário, este valor é indefinido e não deve ser usado.
  \Para obter mais informações, consulte https://docs.microsoft.com/en-us/windows/desktop/FileIO/reparse-point-tags
  Um número denominado dwReserved1,
  \Reservado para uso futuro.
  260 pedaços denominados cFileName,
   \ O nome do arquivo.
  14 pedaços denominados cAlternateFileName.
  \ Um nome alternativo para o arquivo.
  \ Este nome está no formato clássico de nome de arquivo 8.3.

Uma janela do programa class é um conjunto com
  \Contém informações de classe de janela. 
  \Os dois campos mais importantes na estrutura WNDCLASS são o segundo e o último.
  \Esta estrutura inclui dois campos que são ponteiros para cadeias de caracteres
  \É usada com as funções RegisterClassEx e GetClassInfoEx.  
  Um número denominado cbSize,
  \ O tamanho, em bytes, dessa estrutura. 
  \ Defina este membro como sizeof (WNDCLASSEX). 
  \ Certifique-se de definir esse membro antes de chamar a função GetClassInfoEx. https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getclassinfoexa
  Um número denominado style,
  \ O (s) estilo (s) da classe. 
  \ Este membro pode ser qualquer combinação dos estilos de classe. https://docs.microsoft.com/en-us/windows/desktop/winmsg/aproximadamente-janela do programa-classes
  Um endereço de memória denominado lpfnWndProc, \O prefixo lpfn significa "ponteiro longo" para uma função.
  \ Um ponteiro para o procedimento da janela.
  \Você deve usar a função CallWindowProc para chamar o procedimento de janela. 
  \Para obter mais informações, consulte https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms633573(v=vs.85)
  Um número denominado cbClsExtra,
  \ O número de bytes extras a serem alocados seguindo a estrutura da classe da janela. O sistema inicializa os bytes para zero.
  Um número denominado cbWndExtra,
  \ O número de bytes extras a serem alocados após a instância da janela.
  \ O sistema inicializa os bytes para zero.
  \ Se um aplicativo usa WNDCLASSEX para registrar uma caixa de diálogo criada usando a diretiva CLASS no arquivo de recurso, ele deve definir este membro como DLGWINDOWEXTRA.
  Um número identificador denominado hInstance,
  \ Um identificador para a instância que contém o procedimento de janela para a classe.
  Um hIcon denominado hIcon,
  \ Um número identificador do ícone da classe.
  \ Se este membro for NULL, o sistema fornecerá um ícone padrão.
  Um cursor denominado hCursor,
  \ Um identificador para o cursor da classe. 
  \ Se este membro for NULL, um aplicativo deve definir explicitamente a forma do cursor sempre que o mouse se move para a janela do aplicativo.
  Um hBrush denominado hbrBackground,
  \ Um número identificador do pincel de plano de fundo da classe.
  \ Este membro pode ser um identificador para o pincel a ser usado para pintar o plano de fundo ou pode ser um valor de cor. 
  \ Um valor de cor deve ser uma das seguintes cores padrão do sistema (o valor 1 deve ser adicionado à cor escolhida).  
  Um endereço de memória denominado lpszMenuName, \O prefixo lpsz é um "ponteiro longo" para uma string terminada em zero (NUL).
  \ Ponteiro para uma cadeia de caracteres terminada em nulo que especifica o nome do recurso do menu da classe, conforme o nome aparece no arquivo de recurso. 
  \ Se você usar um número inteiro para identificar o menu, use a macro MAKEINTRESOURCE.
  \ https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-makeintresourcea
  \ Se este membro for NULL, as janelas pertencentes a esta classe não terão menu padrão.
  Um endereço de memória denominado lpszClassName,
  \ Um ponteiro para uma string terminada em nulo. 
  \Esse campo é o nome do texto da classe da janela.
  \Isso pode ser o que você quiser. Em programas que criam apenas uma janela, o nome da classe da janela é comumente definido como o nome do programa.
  \O comprimento máximo para lpszClassName é 256. 
  \Se lpszClassName for maior que o comprimento máximo, a função RegisterClassEx falhará.
  Um hIcon denominado hIconSm.
  \ Um identificador para um pequeno ícone associado à classe da janela. 
  \ Se este membro for NULL, o sistema pesquisa o recurso de ícone especificado pelo membro hIcon para um ícone do tamanho apropriado para usar como o ícone pequeno.

A janela do programa class é uma janela do programa class.

Uma janela do programa é um número identificador.

Uma requisição WinHTTP é uma coisa com
  Um número identificador de sessão,
  Um número identificador de conexão,
  Um número identificador de requisição.

Um WSADATA é um conjunto com
  \A estrutura WSADATA contém informações sobre a implementação do Windows Sockets.
  Uma word denominado wVersion,
  \ A versão da especificação do Windows Sockets que o Ws2_32.dll espera que a rotina use. 
  \Nessa word, O byte de ordem superior especifica o número da versão secundária; 
  \O byte de ordem inferior especifica o número da versão principal.
  Uma word denominado wHighVersion,
  \ A versão mais recente da especificação do Windows Sockets que o Ws2_32.dll pode oferecer suporte. 
  \O byte de alta ordem especifica o número da versão secundária; o byte de ordem inferior especifica o número da versão principal.
  \Possui o mesmo valor que o membro wVersion caso a versão solicitada no parâmetro wVersionRequested 
  \(que é passado para a função WSAStartup) seja a versão mais alta da especificação Windows Sockets que o Ws2_32.dll pode suportar.
  257 pedaços denominados szDescription,
  \Uma string ASCII terminada em NULL na qual o Ws2_32.dll copia uma descrição da implementação do Windows Sockets. 
  \O texto (até 256 caracteres de comprimento) pode conter qualquer caractere, exceto caracteres de controle e de formatação. 
  \O uso mais provável que um aplicativo teria para este membro é exibi-lo (possivelmente truncado) em uma mensagem de status.
  127 pedaços denominados szSystemStatus,
  \ Uma string ASCII terminada em NULL na qual o Ws2_32.dll copia o status ou as informações de configuração relevantes. 
  \O Ws2_32.dll deve usar este parâmetro apenas se as informações forem úteis para o usuário ou equipe de suporte.
  \ Este membro não deve ser considerado uma extensão do parâmetro szDescription .
  Uma word [unsigned] denominado iMaxSockets,
  \O número máximo de soquetes que podem ser abertos. Este membro deve ser ignorado para Windows Sockets versão 2 e posterior.
  \O membro iMaxSockets é mantido para compatibilidade com a especificação 1.1 do Windows Sockets, mas não deve ser usado ao desenvolver novos aplicativos. 
  \Nenhum valor único pode ser apropriado para todos os provedores de serviços subjacentes. 
  \A arquitetura do Windows Sockets mudou na versão 2 para oferecer suporte a vários provedores, e a estrutura WSADATA não se aplica mais à pilha de um único fornecedor.
  Uma word [unsigned] denominado iMaxUdpDg,
  \O tamanho máximo da mensagem de datagrama. Este membro é ignorado para Windows Sockets versão 2 e posterior.
  \O membro iMaxUdpDg é mantido para compatibilidade com a especificação 1.1 do Windows Sockets, mas não deve ser usado ao desenvolver novos aplicativos. 
  \A arquitetura do Windows Sockets mudou na versão 2 para oferecer suporte a vários provedores, e a estrutura WSADATA não se aplica mais à pilha de um único fornecedor. 
  \Para o tamanho máximo real da mensagem específico para um determinado provedor de serviços do Windows Sockets e tipo de soquete, 
  \os aplicativos devem usar getsockopt para recuperar o valor da opção SO_MAX_MSG_SIZE após a criação de um soquete.
  Um endereço de memória denominado lpVendorInfo.
  \Um ponteiro para informações específicas do fornecedor. 
  \Este membro deve ser ignorado para Windows Sockets versão 2 e posterior.
  \O membro lpVendorInfo é mantido para compatibilidade com a especificação 1.1 do Windows Sockets. 
  \A arquitetura do Windows Sockets mudou na versão 2 para oferecer suporte a vários provedores, e a estrutura WSADATA não se aplica mais à pilha de um único fornecedor. 
  \Os aplicativos que precisam acessar informações de configuração específicas do fornecedor devem usar getsockopt para recuperar o valor da opção PVD_CONFIG para informações específicas do fornecedor.

Um PROCESS_INFORMATION é um conjunto com
  \ https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_information
  Um número identificador denominado hProcess,
  Um número identificador denominado hThread,
  Um número denominado dwProcessId,
  Um número denominado dwThreadId.
  
Um LOGBRUSH é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-logbrush
  \ A estrutura LOGBRUSH define o estilo, a cor e o padrão de um pincel. 
\É usado pelas funções CreateBrushIndirect e ExtCreatePen.
  Um número denominado lbStyle, \O estilo do pincel. Os valores vão de 0 a 8.
  Um código da cor denominado lbColor, \A cor na qual o pincel deve ser desenhado. 
  \O valor de lbColor deve ser 0 ou 1.
  \ 0 indica que a tabela de cores consiste em uma matriz de índices de 16 bits na paleta lógica atual.
  \ 1 indica que a tabela de cores contém valores RGB literais.
  \Se lbStyle for igual a 1 (BS_HOLLOW) ou (BS_PATTERN), lbColor será ignorado.
  \Se lbStyle for  igual a 5(BS_DIBPATTERN) ou 6 (BS_DIBPATTERNPT), então 
  \ a word de ordem inferior de lbColor irá especificar 
  \se os membros bmiColors da estrutura BITMAPINFO contêm valores explícitos de vermelho, verde, azul (RGB) ou índices na paleta lógica atual.
  \Se lbStyle for 2 (BS_HATCHED) ou 0 (BS_SOLID), lbColor será um valor de cor COLORREF. 
  Um número denominado lbHatch. \Um estilo hachurado. O estilo depende do valor de  lbStyle.
  \ Se lbStyle for 0 ou 1 esse valor será ignorado
  \Se lbStyle for 2 (BS_HATCHED) então lbHatch vai especificar o estilo de rachurado, podendo ser um valord e 0 a 5
  \Se lbStyle for 3 (BS_PATTERN) então lbHatch vai vai ser um número identificador de um bitmap
  \Se lbStyle for 5 (BS_DIBPATTERN) então lbHatch vai ser um número identificador de uma packed DIB
  \Um pincel de padrão definido por uma especificação de bitmap independente de dispositivo (DIB).
  \Se lbStyle for 6 (BS_DIBPATTERNPT) então lbHatch vai ser um  ponteiro para uma packed DIB
  
Um FILETIME é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime
\Contém um valor de 64 bits que representa o número de intervalos de 100 nanossegundos desde 1º de janeiro de 1601 (UTC).
  Um número denominado dwLowDateTime, \A parte de ordem inferior do tempo do arquivo.
  Um número denominado dwHighDateTime. \A parte de ordem superior do tempo do arquivo.

Um DOCINFO é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-docinfoa
\A estrutura DOCINFO contém os nomes dos arquivos de entrada e saída e outras informações usadas pela função StartDoc.
  Um número denominado cbSize, \O tamanho, em bytes, da estrutura.
  Um endereço de memória denominado lpszDocName, \ Ponteiro para uma string terminada em nulo que especifica o nome do documento.
  Um endereço de memória denominado lpszOutput, \Ponteiro para uma string terminada em nulo que especifica o nome de um arquivo de saída. 
  \Se este ponteiro for NULL, a saída será enviada ao dispositivo identificado pelo número identificador de contexto do dispositivo que foi passado para a função StartDoc.
  Um endereço de memória denominado lpszDatatype, \Ponteiro para uma string terminada em nulo que especifica o tipo de dados usados para registrar o trabalho de impressão. 
  \Os valores corretos dessa variável podem ser obtidos chamando EnumPrintProcessorDatatypes e podem incluir valores como raw, emf ou XPS_PASS. 
  \Esta variável pode ser NULL. Observe que o tipo de dados solicitado pode ser ignorado.
  Um número denominado fwType. \Especifica informações adicionais sobre o trabalho de impressão. 
  \Este membro pode ser 0, 1 (DI_APPBANDING) ou 2 (DI_ROPS_READ_DESTINATION)


Um BitmapData é um conjunto com \ https://docs.microsoft.com/en-us/dotnet/api/system.drawing.imaging.BitmapData?view=dotnet-plat-ext-6.0
\Especifica os atributos de uma imagem bitmap. 
  Uma Largura, \ A largura em pixels do objeto Bitmap. Isso também pode ser considerado como o número de pixels em uma linha de varredura.
  Uma Altura, \ A altura em pixels do objeto Bitmap. Também conhecido como o número de linhas de varredura.
  Um número denominado Stride, \a largura da distância (também chamada de largura de verificação) do objeto Bitmap.
  \A distância é a largura de uma única linha de pixels (uma linha de varredura), arredondada para um limite de quatro bytes. 
  \Se a distãncia for positiva, o bitmap é de cima para baixo. Se a distância for negativo, o bitmap é ascendente.
  Um número denominado PixelFormat, \O formato das informações de pixel no objeto Bitmap.
  \O formato define quantos bits de memória são necessários para armazenar as informações de cor de um único pixel.
  Um endereço de memória denominado Scan0, \o endereço dos primeiros dados de pixel no bitmap. Isso também pode ser considerado a primeira linha de varredura no bitmap.
  Um número denominado Reserved. \Reservado. Não use.

Um PAINTSTRUCT é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-paintstruct
\A estrutura PAINTSTRUCT contém informações para um aplicativo. 
\Essas informações podem ser usadas para pintar a área do cliente de uma janela pertencente a esse aplicativo.
  Um hDC denominado hDC, \Um identificador para o display de contexto do dispositivo a ser usado para pintura.
  Um número denominado fErase, \Indica se o fundo deve ser apagado. Este valor é diferente de zero se o aplicativo deve apagar o plano de fundo. 
  \O aplicativo é responsável por apagar o fundo se uma classe de janela for criada sem um pincel de fundo. 
  \Para obter mais informações, consulte a descrição do membro hbrBackground da estrutura WNDCLASS.
  Um caixa denominado rcPaint, \Uma estrutura RECT que especifica os cantos superior esquerdo e inferior direito do retângulo em que a pintura é solicitada, 
  \em unidades de dispositivo relativas ao canto superior esquerdo da área do cliente.
  Um número denominado fRestore, \Reservado; usado internamente pelo sistema.
  Um número denominado fIncUpdate, \Reservado; usado internamente pelo sistema.
  32 pedaços. \rgbReserved -.Reservado; usado internamente pelo sistema.

Uma MSG é um conjunto com \ https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-MSG
\Contém informações de mensagem da fila de mensagens de um encadeamento (thread).
  Uma janela do programa denominado hwnd, \Um identificador para a janela cujo procedimento de janela recebe a mensagem. 
  \Esta variável é NULL quando a mensagem é uma mensagem de thread.
  Um número denominado message, \uint -> O identificador da mensagem. 
  \Os aplicativos só podem usar a word de ordem inferior; a word de ordem superior é reservada pelo sistema.
  Um wParam denominado wParam, \Informações adicionais sobre a mensagem. O significado exato depende do valor da variável message.
  Um lParam denominado lParam, \Informações adicionais sobre a mensagem. O significado exato depende do valor da variável message.
  Um número denominado time, \dword -> A hora em que a mensagem foi postada.
  Uma localização denominado pt. \point -. A posição do cursor, em coordenadas da tela, quando a mensagem foi postada.
  \Um número denominado lPrivate. \dword










