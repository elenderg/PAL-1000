\ the compiler (o compilador) copyright © 2006, 2017, 2018, 2019 the osmosian order, Pablo Cayuela, e Elender Gomes, Ramon Dellaqia e Walter Jr (PAL-1016)

\ firstparam=esp+4/ebp+8, secondparam=esp+8/ebp+12, etc...

An abort message is a_ string.

To abort with a_ string:
If the compiler's abort flag is set, exit.
Set the compiler's abort flag.
Put the string into the compiler's abort message.

To abort with a_ string and a_ byte pointer:
If the compiler's abort flag is set, exit.
Set the compiler's abort flag.
Put the string into the compiler's abort message.
Find the compiler's abort path and the compiler's abort row# given the byte pointer.
If the compiler's abort path is blank, exit.
Extract a_ file name from the compiler's abort path.
Prepend "Error in " then the file name then ". " to the compiler's abort message.

To abort with a_ string and a_ rider:
If the rider's token is not blank, abort with the string and the rider's token's first; exit.
Abort with the string and the rider's source's last.

To add the allocate and deallocate and finalize and destroy routines:
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Add the finalize routine for_ the type.
Add the allocate routine for_ the type.
Add the deallocate routine for_ the type.
Add the destroy routine for_ the type.
Repeat.

To add the allocate routine for_ a_ type:
If the type is nil, exit.
If the compiler's abort flag is set, exit.
If the type cannot be reduced to "pointer", exit.
If the type's target type is nil, exit.
Add a_ routine to the routines given nil.
Append "allocate memory for_ a_ " then the type's name to the routine's header string.
Append "assign the " then the type's name then " given " to the routine's body string.
Append the type's target type's length then "." to the routine's body string.
Slap the routine's routine header on the routine's header string.
Slap the routine's routine body on the routine's body string.
Compile the header of the routine.

To add and compile the initialize before run and run and finalize after run routine:
If the compiler's abort flag is set, exit.
Add a_ routine to the routines given nil.
Append "~initialize before run and run and finalize after run" to the routine's header string.
Append "initialize before run. " to the routine's body string.
Append the global initializers to the routine's body string.
Append "executar. " to the routine's body string.
Append the global finalizers to the routine's body string.
Append "finalize after run. " to the routine's body string.
Append "call ""kernel32.dll"" ""ExitProcess"" with 0. " to the routine's body string.
Slap the routine's routine header on the routine's header string.
Slap the routine's routine body on the routine's body string.
Compile the header of the routine.
Compile the body of the routine.

To add a_ built-in type given a_ name and a_ plural name and a_ length:
Add the built-in type to the types given the name and the plural name and the name.
Put the length into the built-in type's length.
Put the built-in type into the built-in type's base type.
Index the built-in type.

To add the built-in types:
Add a_ built-in type given "byte" and "bytes" and 1.
Add another built-in type given "record" and "records" and 0.

To add the deallocate routine for_ a_ type:
If the type is nil, exit.
If the compiler's abort flag is set, exit.
If the type cannot be reduced to "pointer", exit.
If the type's target type is nil, exit.
Add a_ routine to the routines given nil.
Append "deallocate a_ " then the type's name to the routine's header string.
Append "if the " then the type's name then " is nil, exit. " to the routine's body string.
If the type's target type should be finalized, append "~finalize the " then the type's name then "'s target. " to the routine's body string.
Append "unassign the " then the type's name then "." to the routine's body string.
Slap the routine's routine header on the routine's header string.
Slap the routine's routine body on the routine's body string.
Compile the header of the routine.

To add the destroy routine for_ a_ type:
If the type is nil, exit.
If the compiler's abort flag is set, exit.
If the type should not be forgotten, exit.
If the type can be reduced to "things", add the destroy routine for_ the type (things); exit.
If the type can be reduced to "pointer", add the destroy routine for_ the type (pointer); exit.

To add the destroy routine for_ a_ type (pointer):
If the type is nil, exit.
If the compiler's abort flag is set, exit.
Put "destroy [" then the type's name then "]" into a_ moniker.
If the moniker is in the routine index, exit.
Add a_ routine to the routines given nil.
Append "destroy a_ " then the type's name to the routine's header string.
Append "if the " then the type's name then " is nil, exit. " to the routine's body string.
If the type's target type can be reduced to "pointer", append "destroy the " then the type's name then "'s target. " to the routine's body string.
If the type's target type can be reduced to "things", append "destroy the " then the type's name then "'s target. " to the routine's body string.
Loop.
Get a_ field from the type's target type's fields.
If the field is nil, break.
If the field's reference flag is set, repeat.
If the field's type should not be forgotten, repeat.
Append "destroy the " then the type's name then "'s " then the field's name then ". " to the routine's body string.
Repeat.
Append "deallocate the " then the type's name then ". " to the routine's body string.
Slap the routine's routine header on the routine's header string.
Slap the routine's routine body on the routine's body string.
Compile the header of the routine.

To add the destroy routine for_ a_ type (things):
If the type is nil, exit.
If the compiler's abort flag is set, exit.
If the type's fields' first is nil, abort with "Erro interno - adicionando a rotina esquecida para um tipo (elementos)"; exit.
If the type's fields' first's type is nil, abort with "Erro interno 2 - adicionando a rotina esquecida para um tipo (elementos)"; exit.
Put "destroy [" then the type's name then "]" into a_ moniker.
If the moniker is in the routine index, exit.
Add a_ routine to the routines given nil.
Append "destroy a_ " then the type's name to the routine's header string.
Append "if the " then the type's name then "'s first is nil, exit. " to the routine's body string.
Put the type's fields' first's type's name into a_ name.
Append "put the " then the type's name then "'s first into a_ " then the name then ". " to the routine's body string.
Append "remove the " then the name then " from the " then the type's name then ". " to the routine's body string.
Append "destroy the " then the name then ". " to the routine's body string.
Append "repeat. " to the routine's body string.
Slap the routine's routine header on the routine's header string.
Slap the routine's routine body on the routine's body string.
Compile the header of the routine.

To add an entry to some imports given an import name and an entry name:
Find an import given the import name.
If the import is nil, add the import to the imports given the import name.
Find the entry given the entry name and the import's entries.
If the entry is not nil, exit.
Create the entry.
Append the entry to the import's entries.
Put the entry name into the entry's name.

To add a_ field to some fields given a_ name and a_ nickname and a_ type name and a_ reference flag:
Add the field to the fields given "field" and nil.
Put the name into the field's name.
Put the nickname into the field's nickname.
Put the type name into the field's type name.
Put the reference flag into the field's reference flag.

To add the finalize routine for_ a_ type:
If the type is nil, exit.
If the compiler's abort flag is set, exit.
If the type should not be finalized, exit.
If the type's name is "string", add the finalize routine for_ the type (string); exit.
If the type can be reduced to "string", exit. \ prevents generation of finalizer for derived string types
Add the finalize routine for_ the type (record).

To add the finalize routine for_ a_ type (record):
If the type is nil, exit.
If the compiler's abort flag is set, exit.
Add a_ routine to the routines given nil.
Append "~finalize a_ " then the type's name to the routine's header string.
Append "intel $50. " to the routine's body string. \ push eax
Loop.
Get a_ field from the type's fields.
If the field is nil, break.
If the field's type should not be finalized, repeat.
Append "~finalize the " then the type's name then "'s " then the field's name then ". " to the routine's body string.
Repeat.
Append "intel $58." to the routine's body string. \ pop eax
Slap the routine's routine header on the routine's header string.
Slap the routine's routine body on the routine's body string.
Compile the header of the routine.

To add the finalize routine for_ a_ type (string):
If the type is nil, exit.
If the compiler's abort flag is set, exit.
Add a_ routine to the routines given nil.
Append "~finalize a_ " then the type's name to the routine's header string.
Append "intel $50. " to the routine's body string. \ push eax
Append "unassign the string's first. " to the routine's body string.
Append "intel $58." to the routine's body string. \ pop eax
Slap the routine's routine header on the routine's header string.
Slap the routine's routine body on the routine's body string.
Compile the header of the routine.

To add a_ fragment given a_ tag:
If the current routine is nil, void the fragment; exit.
Create the fragment given the tag.
Append the fragment to the current routine's fragments.

To add a_ fragment given a_ tag and an entry:
If the current routine is nil, void the fragment; exit.
Create the fragment given the tag.
Append the fragment to the current routine's fragments.
Put the entry into the fragment's entry.

To add a_ fragment given a_ tag and a_ flag:
If the current routine is nil, void the fragment; exit.
Create the fragment given the tag.
Append the fragment to the current routine's fragments.
Put the flag into the fragment's flag.

To add a_ fragment given a_ tag and a_ routine:
If the current routine is nil, void the fragment; exit.
Create the fragment given the tag.
Append the fragment to the current routine's fragments.
Put the routine into the fragment's routine.
Compile the body of the routine.

To add a_ fragment given a_ tag and a_ variable:
If the current routine is nil, void the fragment; exit.
Create the fragment given the tag.
Append the fragment to the current routine's fragments.
Put the variable into the fragment's variable.
Set the compiled flag in the variable.

To add a_ fragment given a_ tag and a_ variable and another variable:
If the current routine is nil, void the fragment; exit.
Create the fragment given the tag.
Append the fragment to the current routine's fragments.
Put the variable into the fragment's variable.
Put the other variable into the fragment's other variable.
Set the compiled flag in the variable.
Set the compiled flag in the other variable.

To add a_ fragment given a_ tag and a_ variable and a_ number:
If the current routine is nil, void the fragment; exit.
Create the fragment given the tag.
Append the fragment to the current routine's fragments.
Put the variable into the fragment's variable.
Put the number into the fragment's number.
Set the compiled flag in the variable.

To add an import to some imports given an import name:
Create the import.
Append the import to the imports.
Put the import name into the import's name.

To add an intermediate given a_ type name and a_ locus:
If the current routine is nil, void the intermediate; exit.
Add the intermediate to the current routine's locals given "local" and the locus.
Generate the intermediate's name given "~I".
Put the type name into the intermediate's type name.
Resolve the intermediate.

To add a_ literal to some variables given a_ locus:
Add the literal as_ a_ variable to the variables given "literal" and the locus.
Generate the literal's name given "~L".

To add a_ monikette to some monikettes given an expression:
Create the monikette.
Append the monikette to the monikettes.
Put the expression's phrase into the monikette's string.
Put the expression's variable into the monikette's variable.
If the expression's variable is not nil, put the expression's type into the monikette's type.

\# Unifica o sentido de diferentes termos usados em proposições, verbos e conjunções.
To add a_ monikette to some monikettes given a_ string:
Create the monikette.
Append the monikette to the monikettes.
\PAL
\\ conjunctions
If the string is "e", put "and" into the monikette's string; exit. \ and
If the string is "ou", put "or" into the monikette's string; exit. \ or
\\ from/given/with/using
If the string is "desde", put "from/given/with/using" into the monikette's string; exit.
If the string is "de", put "from/given/with/using" into the monikette's string; exit.
If the string is "dada", put "from/given/with/using" into the monikette's string; exit.
If the string is "dado", put "from/given/with/using" into the monikette's string; exit.
If the string is "dadas", put "from/given/with/using" into the monikette's string; exit.
If the string is "dados", put "from/given/with/using" into the monikette's string; exit.
If the string is "com", put "from/given/with/using" into the monikette's string; exit.
If the string is "usando", put "from/given/with/using" into the monikette's string; exit.
\\ in/into/to
If the string is "em", put "in/into/to" into the monikette's string; exit.
If the string is "a", put "in/into/to" into the monikette's string; exit.
\\ is/are
If the string is "é", put "is/are" into the monikette's string; exit.
If the string is "está", put "is/are" into the monikette's string; exit.
If the string is "for", put "is/are" into the monikette's string; exit.
If the string is "estiver", put "is/are" into the monikette's string; exit.
If the string is "forem", put "is/are" into the monikette's string; exit.
If the string is "estiverem", put "is/are" into the monikette's string; exit.
\\ allocates and destroys
If the string is "alojar", put "allocate" into the monikette's string; exit.
If the string is "alocar", put "allocate" into the monikette's string; exit.
If the string is "reservar", put "allocate" into the monikette's string; exit.
If the string is "memória", put "memory" into the monikette's string; exit.
If the string is "para", put "for_" into the monikette's string; exit.
If the string is "desalojar", put "deallocate" into the monikette's string; exit.
If the string is "destruir", put "destroy" into the monikette's string; exit.
\CAL
\\ from/given/with/using
If the string is "from", put "from/given/with/using" into the monikette's string; exit.
If the string is "given", put "from/given/with/using" into the monikette's string; exit.
If the string is "with", put "from/given/with/using" into the monikette's string; exit.
If the string is "using", put "from/given/with/using" into the monikette's string; exit.
\\ in/into/to
If the string is "in", put "in/into/to" into the monikette's string; exit.
If the string is "into", put "in/into/to" into the monikette's string; exit.
If the string is "to", put "in/into/to" into the monikette's string; exit.
\\ is/are
If the string is "are", put "is/are" into the monikette's string; exit.
If the string is "is", put "is/are" into the monikette's string; exit.
\\ aren't/isn't
If the string is "isn't", put "is/aren't" into the monikette's string; exit.
If the string is "aren't", put "is/aren't" into the monikette's string; exit.
\\ backward/backwards/counterclockwise/counter-clockwise/anticlockwise/anti-clockwise
If the string is "backward", put "backward" into the monikette's string; exit.
If the string is "backwards", put "backward" into the monikette's string; exit.
If the string is "counterclockwise", put "backward" into the monikette's string; exit.
If the string is "counter-clockwise", put "backward" into the monikette's string; exit.
If the string is "anticlockwise", put "backward" into the monikette's string; exit.
If the string is "anti-clockwise", put "backward" into the monikette's string; exit.
\\ at/on
If the string is "at", put "at/on" into the monikette's string; exit.
If the string is "on", put "at/on" into the monikette's string; exit.
\default
Put the string into the monikette's string.

To add a_ monikette to some monikettes given a_ type:
Create the monikette.
Append the monikette to the monikettes. 
Put the type into the monikette's type.

To add push fragments given some monikettes:
If the current routine is nil, exit.
Loop.
Get a_ monikette from the monikettes (backwards).
If the monikette is nil, exit.
If the monikette's variable is nil, repeat.
If the monikette's current substring is not blank, repeat.
If the monikette's current type is nil, repeat.
Add a_ fragment given the push address tag and the monikette's variable.
Repeat.

To add the put or convert fragments given a_ variable and another variable and a_ locus:
Add a_ fragment given the push address tag and the other variable.
Add another fragment given the push address tag and the variable.
Find a_ routine given "put" and the variable's type and "into" and the other variable's type.
If the routine is nil, find the routine given "convert" and the variable's type and "to" and the other variable's type.
If the routine is not nil, add a_ third fragment given the call internal tag and the routine; exit.
\ error message
Add a_ monikette to some monikettes given "put/convert".
Add another monikette to the monikettes given the variable's type.
Add a_ third monikette to the monikettes given "into/to".
Add a_ fourth monikette to the monikettes given the other variable's type.
Convert the monikettes to a_ moniker.
Destroy the monikettes.
Abort with "Não sei como '" then the moniker then "'." and the locus.

To add a_ routine to some routines given a_ locus:
Create the routine.
Append the routine to the routines.
Put the locus into the routine's locus.

To add a_ scratch given a_ type name and a_ locus:
If the current routine is nil, void the scratch; exit.
Add the scratch to the current routine's locals given "scratch" and the locus.
Generate the scratch's name given "~S".
Put the type name into the scratch's type name.
Resolve the scratch.

To add several fragments given a_ string and a_ variable and another string and another variable and a_ locus:
Add a_ fragment given the push address tag and the other variable.
Add another fragment given the push address tag and the variable.
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the variable's type.
Add a_ third monikette to the monikettes given the other string.
Add a_ fourth monikette to the monikettes given the other variable's type.
Find a_ routine given the monikettes.
If the routine is nil, convert the monikettes to a_ moniker.
Destroy the monikettes.
If the routine is nil, abort with "Não sei como '" then the moniker then "'." and the locus; exit.
Add a_ third fragment given the call internal tag and the routine.

To add several fragments given a_ string and a_ variable and another string and another variable and a_ third string and a_ third variable and a_ byte pointer:
Add a_ fragment given the push address tag and the third variable.
Add another fragment given the push address tag and the other variable.
Add a_ third fragment given the push address tag and the variable.
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the variable's type.
Add a_ third monikette to the monikettes given the other string.
Add a_ fourth monikette to the monikettes given the other variable's type.
Add a_ fifth monikette to the monikettes given the third string.
Add a_ sixth monikette to the monikettes given the third variable's type.
Find a_ routine given the monikettes.
If the routine is nil, convert the monikettes to a_ moniker.
Destroy the monikettes.
If the routine is nil, abort with "Não sei como '" then the moniker then "'." and the byte pointer; exit.
Add a_ fourth fragment given the call internal tag and the routine.

To add a_ source file to some source files given a_ path:
Create the source file.
Append the source file to the source files.
Put the path into the source file's path.

To add two fragments given a_ string and a_ variable and a_ locus:
Add a_ fragment given the push address tag and the variable.
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the variable's type.
Find a_ routine given the monikettes.
If the routine is nil, convert the monikettes to a_ moniker.
Destroy the monikettes.
If the routine is nil, abort with "Não sei como '" then the moniker then "'." and the locus; exit.
Add another fragment given the call internal tag and the routine.

To add a_ type to some types given a_ locus:
Create the type.
Append the type to the types.
Put the locus into the type's locus.

To add a_ type to some types given a_ name and a_ plural name and a_ base name:
Add the type to the types given the name and the plural name and the base name and nil.

To add a_ type to some types given a_ name and a_ plural name and a_ base name and a_ locus:
Create the type.
Append the type to the types.
Put the locus into the type's locus.
Put the name into the type's name.
Put the plural name into the type's plural name.
Put the base name into the type's base name.

To add a_ variable to some variables given a_ kind and a_ locus:
Create the variable given the kind.
Append the variable to the variables.
Put the locus into the variable's locus.

The adding built-in memory routines timer is a_ timer.

The adding built-in startup routine timer is a_ timer.

To address some entries:
Get an entry from the entries.
If the entry is nil, exit.
Address the entry.
Repeat.

To address an entry:
Put the current name address into the entry's name address.
Put the entry's name's length plus 3 into a_ number.
Round the number up to the nearest multiple of 2.
Add the number to the current name address.
Put the current thunk address into the entry's thunk address.
Put the image base plus the current thunk address into the entry's address.
Add 4 to the current thunk address.

To address a_ fragment given an address:
If the compiler's abort flag is set, exit.
If the fragment is nil, exit.
Put the image base plus the address into the fragment's address.
If the fragment's tag is the push address tag, add 7 to the address; exit.
If the fragment's tag is the call internal tag, add 5 to the address; exit.
If the fragment's tag is the load address tag, add 12 to the address; exit.
If the fragment's tag is the increment tag, add 10 to the address; exit.
If the fragment's tag is the dereference tag, add 14 to the address; exit.
If the fragment's tag is the jump false tag, add 9 to the address; exit.
If the fragment's tag is the not tag, add 3 to the address; exit.
If the fragment's tag is the exit tag, add 5 to the address; exit.
If the fragment's tag is the repeat tag, add 5 to the address; exit.
If the fragment's tag is the break tag, add 5 to the address; exit.
If the fragment's tag is the prolog tag, address the fragment given the address (prolog); exit.
If the fragment's tag is the epilog tag, address the fragment given the address (epilog); exit.
If the fragment's tag is the intel tag, add the fragment's code's length to the address; exit.
If the fragment's tag is the push value tag, address the fragment given the address (push value); exit.
If the fragment's tag is the call external tag, add 6 to the address; exit.
If the fragment's tag is the load eax tag, add 5 to the address; exit. \ was 8 when "load eax" took in variables; now "load eax" only does an immediate value
If the fragment's tag is the save eax tag, address the fragment given the address (save eax); exit.
If the fragment's tag is the call indirect tag, add 8 to the address; exit.
If the fragment's tag is the routine address tag, add 12 to the address; exit.

To address a_ fragment given an address (epilog):
If the current routine's callback flag is set, add 3 to the address.
Add 6 to the address.

To address a_ fragment given an address (prolog):
Add 3 to the address.
If the current routine's local size is not 0, add 10 to the address.
If the current routine's callback flag is set, add 3 to the address.

To address a_ fragment given an address (push value):
Add 6 to the address.
If the fragment's variable is nil, abort with "Error interno - endereçando um fragmento dado um endereço (push value)"; exit.
If the fragment's variable's type is nil, abort with "Error interno 2 - endereçando um fragmento dado um endereço (push value)"; exit.
Put the fragment's variable's type's length into a_ length.
If the length is 4, add 2 to the address; exit.
If the length is 2, add 3 to the address; exit.
If the length is 1, add 4 to the address; exit.
Abort with "Error interno 3 - endereçando um fragmento dado um endereço (push value)".

To address a_ fragment given an address (save eax):
Add 6 to the address.
If the fragment's variable is nil, abort with "Error interno - endereçando um fragmento dado um endereço (save eax)"; exit.
If the fragment's variable's type is nil, abort with "Error interno 2 - endereçando um fragmento dado um endereço (save eax)"; exit.
Put the fragment's variable's type's length into a_ length.
If the length is 4, add 2 to the address; exit.
If the length is 2, add 3 to the address; exit.
If the length is 1, add 2 to the address; exit.
Abort with "Error interno 3 - endereçando um fragmento dado um endereço (save eax)".

To address some fragments given an address:
If the compiler's abort flag is set, exit.
Get a_ fragment from the fragments.
If the fragment is nil, exit.
Address the fragment given the address.
Repeat.

To address an import:
Put the current name address into the import's name address.
Put the current header address into the import's header address.
Put the current name address into the import's import header's name memory address.
Put the import's name's length plus 1 into a_ number.
Round the number up to the nearest multiple of 2.
Add the number to the current name address.
Add an import header's magnitude to the current header address.
Put the current thunk address into the import's import header's first thunk memory address.
Address the import's entries.
Add 4 to the current thunk address.

To address some imports given an address:
Put the address into the current header address.
Put the imports' count into a_ count.
Add 1 to the count.
Multiply the count by an import header's magnitude.
Put the address plus the count into the current thunk address.
Get another count given the imports (all entries plus markers).
Multiply the other count by 4.
Put the current thunk address plus the other count into the current name address.
Loop.
Get an import from the imports.
If the import is nil, break.
Address the import.
Repeat.
Put the current name address minus the address into a_ number.
Add the number to the address.

An address is a_ number.

To address a_ routine given an address:
If the compiler's abort flag is set, exit.
If the routine is nil, exit.
If the routine's employs moniker is not blank, exit. \ employs are addressed later
If the routine's compiled flag is not set, exit.
Put the routine into the current routine.
Put the image base plus the address into the routine's address.
Address the routine's fragments given the address.
Round the address up to the nearest multiple of 4.

To address some routines given an address:
If the compiler's abort flag is set, exit.
Get a_ routine from the routines.
If the routine is nil, break.
Address the routine given the address.
Repeat.

To address a_ variable given an address:
If the compiler's abort flag is set, exit.
If the variable is nil, exit.
If the variable's compiled flag is not set, exit.
Put the image base plus the address into the variable's address.
Add the variable's type's length to the address.
If the variable's type can be reduced to "string", add the variable's data's length plus 1 to the address.
Round the address up to the nearest multiple of 4.

To address some variables given an address:
If the compiler's abort flag is set, exit.
Get a_ variable from the variables.
If the variable is nil, exit.
Address the variable given the address.
Repeat.

The addressing timer is a_ timer.

To advance a_ buffer:
Append the return byte to the buffer.
Append the linefeed byte to the buffer.

To advance a_ buffer (twice):
Advance the buffer. 
Advance the buffer.

To append an entry to a_ buffer (with separator):
If the entry is nil, append "" to the buffer (with separator); exit.
Append the entry's name to the buffer (with separator).

To append a_ flag to a_ buffer (with separator):
Convert the flag to a_ string.
Append the string to the buffer (with separator).

To append the global finalizers to a_ string:
Get a_ global from the globals.
If the global is nil, exit.
If the global's compiled flag is not set, repeat.
If the global's type should not be finalized, repeat.
Append "~finalize the " then the global's name then ". " to the string.
Repeat.

To append the global initializers to a_ string:
Get a_ global from the globals.
If the global is nil, exit.
If the global's literal is nil, repeat.
If the global's compiled flag is not set, repeat.
Clear a_ flag.
Append the global's initializer string to the string.
Repeat.

To append a_ monikette to a_ moniker:
If the monikette is nil, exit.
If the moniker is not blank, append the space byte to the moniker.
If the monikette's type is not nil, append "[" and the monikette's type's name and "]" to the moniker (fast); exit.
If the monikette's string is not blank, append the monikette's string to the moniker; exit.

To append a_ monikette to a_ moniker (while bubbling):
If the monikette is nil, exit.
If the moniker is not blank, append the space byte to the moniker.
If the monikette's current substring is not blank, append the monikette's current substring to the moniker; exit.
If the monikette's current type is not nil, append "[" and the monikette's current type's name and "]" to the moniker (fast); exit.

To append a_ number to a_ buffer (as hex with separator):
Convert the number to a_ nibble string.
Append the nibble string to the buffer (with separator).

To append a_ number to a_ buffer (with separator):
Convert the number to a_ string.
Append the string to the buffer (with separator).

To append a_ ratio to a_ buffer (with separator):
Convert the ratio to a_ string.
Append the string to the buffer (with separator).

To append a_ routine to a_ buffer (with separator):
If the routine is nil, append "" to the buffer (with separator); exit.
Append the routine's moniker to the buffer (with separator).

To append a_ string and another string and a_ third string to a_ fourth string (fast):
Put the fourth string's length into a_ length.
Add the string's length to the length.
Add the other string's length to the length.
Add the third string's length to the length.
Reassign a_ pointer given the length.
Put the pointer into a_ byte pointer.
Copy bytes from the fourth string's first to the byte pointer for_ the fourth string's length.
Add the fourth string's length to the byte pointer.
Copy bytes from the string's first to the byte pointer for_ the string's length.
Add the string's length to the byte pointer.
Copy bytes from the other string's first to the byte pointer for_ the other string's length.
Add the other string's length to the byte pointer.
Copy bytes from the third string's first to the byte pointer for_ the third string's length.
Unassign the fourth string's first.
Put the pointer into the fourth string's first.
Put the pointer plus the length minus 1 into the fourth string's last.

To append a_ string to a_ buffer (with separator):
Append the string to the buffer.
Append "/" to the buffer.

To append a_ tag to a_ buffer (as a_ fragment tag string with separator):
If the tag is the break tag, append "break" to the buffer (with separator); exit.
If the tag is the call external tag, append "call external" to the buffer (with separator); exit.
If the tag is the call indirect tag, append "call indirect" to the buffer (with separator); exit.
If the tag is the call internal tag, append "call internal" to the buffer (with separator); exit.
If the tag is the dereference tag, append "dereference" to the buffer (with separator); exit.
If the tag is the end if tag, append "end if" to the buffer (with separator); exit.
If the tag is the epilog tag, append "epilog" to the buffer (with separator); exit.
If the tag is the exit tag, append "exit" to the buffer (with separator); exit.
If the tag is the finalize tag, append "finalize" to the buffer (with separator); exit.
If the tag is the increment tag, append "increment" to the buffer (with separator); exit.
If the tag is the intel tag, append "intel" to the buffer (with separator); exit.
If the tag is the jump false tag, append "jump false" to the buffer (with separator); exit.
If the tag is the load address tag, append "load address" to the buffer (with separator); exit.
If the tag is the load eax tag, append "load eax" to the buffer (with separator); exit.
If the tag is the loop tag, append "loop" to the buffer (with separator); exit.
If the tag is the not tag, append "not" to the buffer (with separator); exit.
If the tag is the prolog tag, append "prolog" to the buffer (with separator); exit.
If the tag is the push address tag, append "push address" to the buffer (with separator); exit.
If the tag is the push value tag, append "push value" to the buffer (with separator); exit.
If the tag is the save eax tag, append "save eax" to the buffer (with separator); exit.
If the tag is the repeat tag, append "repeat" to the buffer (with separator); exit.
If the tag is the routine address tag, append "routine address" to the buffer (with separator); exit.
Append "?" to the buffer (with separator).

To append a_ type to a_ buffer (with separator):
If the type is nil, append "" to the buffer (with separator); exit.
Append the type's name to the buffer (with separator).

To append a_ variable to a_ buffer (with separator):
If the variable is nil, append "" to the buffer (with separator); exit.
Append the variable's name to the buffer (with separator).

To append a_ string to another string giving a_ third string (portuguese contractions and synonyms rules):
\# contrações
If the string is "ao", append "a o" to the other string; exit.
If the string is "à", append "a a" to the other string; exit.
If the string is "aos", append "a os" to the other string; exit.
If the string is "às", append "a as" to the other string; exit.
If the string is "do", append "de o" to the other string; exit.
If the string is "da", append "de a" to the other string; exit.
If the string is "dos", append "de os" to the other string; exit.
If the string is "das", append "de as" to the other string; exit.
If the string is "dum", append "de um" to the other string; exit.
If the string is "duma", append "de uma" to the other string; exit.
If the string is "duns", append "de uns" to the other string; exit.
If the string is "dumas", append "de umas" to the other string; exit.
\# "no" pode ser uma negação em inglês.
If the string is any contraction giving the third string (portuguese rules - "no"), append "em o" to the other string; exit.
If the string is "na", append "em a" to the other string; exit.
If the string is "nos", append "em os" to the other string; exit.
If the string is "nas", append "em as" to the other string; exit.
If the string is "num", append "em um" to the other string; exit.
If the string is "numa", append "em uma" to the other string; exit.
If the string is "nuns", append "em uns" to the other string; exit.
If the string is "numas", append "em umas" to the other string; exit.
If the string is "pelo", append "por o" to the other string; exit.
If the string is "pela", append "por a" to the other string; exit.
If the string is "pelos", append "por os" to the other string; exit.
If the string is "pelas", append "por as" to the other string; exit.
\# sinônimos
If the string is "adir", append "adicionar" to the other string; exit.
If the string is "agregar", append "adicionar" to the other string; exit.
If the string is "acrescentar", append "adicionar" to the other string; exit.
If the string is "somar", append "adicionar" to the other string; exit.
If the string is "começar", append "iniciar" to the other string; exit.
If the string is "terminar", append "finalizar" to the other string; exit.
If the string is "acabar", append "finalizar" to the other string; exit.
If the string is "completar", append "finalizar" to the other string; exit.
If the string is "colocar", append "pôr" to the other string; exit.
If the string is "mudar", append "alterar" to the other string; exit.
If the string is "limpar", append "apagar" to the other string; exit.
If the string is "ampliar", append "aumentar" to the other string; exit.
If the string is "expandir", append "aumentar" to the other string; exit.
If the string is "alargar", append "aumentar" to the other string; exit.
If the string is "dilatar", append "aumentar" to the other string; exit.
If the string is "estender", append "aumentar" to the other string; exit.
If the string is "prolongar", append "aumentar" to the other string; exit.
If the string is "ampliar", append "aumentar" to the other string; exit.
If the string is "achar", append "encontrar" to the other string; exit.
If the string is "descobrir", append "encontrar" to the other string; exit.
If the string is "buscar", append "encontrar" to the other string; exit.
If the string is "manusear", append "manejar" to the other string; exit.
If the string is "manipular", append "manejar" to the other string; exit.
If the string is "enumerar", append "listar" to the other string; exit.
If the string is "elencar", append "listar" to the other string; exit.
If the string is "selecionar", append "escolher" to the other string; exit.
If the string is "eliminar", append "remover" to the other string; exit.
If the string is "excluir", append "remover" to the other string; exit.
If the string is "retirar", append "remover" to the other string; exit.
If the string is "rodar", append "girar" to the other string; exit.
If the string is "começar", append "iniciar" to the other string; exit.
If the string is "permutar", append "trocar" to the other string; exit.
If the string is "esperar", append "aguardar" to the other string; exit.
If the string is "rascunhar", append "esboçar" to the other string; exit.
Append the string to the other string.

To attach address loading code to a_ hex string given a_ variable: \ loads into edx
If the variable is nil, attach $C7C200000000 to the hex string; exit. \ mov edx,0
If the variable's kind is "global", attach $C7C2 and the variable's address to the hex string; exit. \ mov edx,the variable's address
If the variable's kind is "literal", attach $C7C2 and the variable's address to the hex string; exit. \ mov edx,the variable's address
If the variable's kind is "local", attach $8D95 and the variable's offset to the hex string; exit. \ lea edx,[ebp+the variable's offset]
If the variable's kind is "scratch", attach $8B95 and the variable's offset to the hex string; exit. \ mov edx,[ebp+the variable's offset]
If the variable's kind is not "parameter", abort with "Erro interno - anexando o código de carregamento de endereço a uma string hexadecimal dada uma variável"; exit.
If the variable's by-value flag is set, attach $8D95 and the variable's offset to the hex string; exit. \ lea edx,[ebp+the variable's offset]
Attach $8B95 and the variable's offset to the hex string. \ mov edx,[ebp+the variable's offset]

To attach an hex string and an address to a_ fragment: \ call or jump
Put the address into a_ number.
Subtract the fragment's address from the number.
Subtract the fragment's code's length from the number.
Subtract the hex string's length from the number.
Subtract 4 from the number.
Attach the hex string and the number to the fragment's code.

To attach a_ hex string and a_ number and another hex string to a_ third hex string:
Append the hex string to the third hex string.
Convert the number to a_ fourth hex string.
Append the fourth hex string to the third hex string.
Append the other hex string to the third hex string.

To attach a_ hex string and a_ number and another number to another hex string:
Append the hex string to the other hex string.
Convert the number to a_ third hex string.
Append the third hex string to the other hex string.
Convert the other number to a_ fourth hex string.
Append the fourth hex string to the other hex string.

To attach a_ hex string and a_ flag to another hex string;
To attach a_ hex string and a_ number to another hex string:
Append the hex string to the other hex string.
Convert the number to a_ third hex string.
Append the third hex string to the other hex string.

To attach a_ hex string to another hex string: employ append a_ string to another string.

To blurt bytes given a_ pointer and a_ length and a_ buffer and an offset:
Put the buffer's first plus the offset into another pointer.
Copy bytes from the pointer to the other pointer for_ the length.

To blurt a_ dosheader into a_ buffer:
Blurt bytes given the dosheader's whereabouts and the dosheader's magnitude and the buffer and 0.

To blurt some entries into a_ buffer:
Get an entry from the entries.
If the entry is nil, exit.
Blurt the entry into the buffer.
Repeat.

To blurt an entry into a_ buffer:
Blurt bytes given the entry's name address's whereabouts and 4 and the buffer and the entry's thunk address.
Put the entry's name address plus 2 into an address.
Blurt the entry's name into the buffer at the address.

To blurt a_ fragment into a_ buffer:
If the fragment's code is blank, exit.
Put the fragment's address minus the image base into an address.
Blurt the fragment's code into the buffer at the address.

To blurt some fragments into a_ buffer:
Get a_ fragment from the fragments.
If the fragment is nil, exit.
Blurt the fragment into the buffer.
Repeat.

To blurt an import into a_ buffer:
Blurt bytes given the import's import header's whereabouts and the import's import header's magnitude and the buffer and the import's header address.
Blurt the import's name into the buffer at the import's name address.
Blurt the import's entries into the buffer.

To blurt some imports into a_ buffer:
Get an import from the imports.
If the import is nil, exit.
Blurt the import into the buffer.
Repeat.

To blurt a_ pe header into a_ buffer:
Blurt bytes given the pe header's whereabouts and the pe header's magnitude and the buffer and 256.

To blurt a_ routine into a_ buffer:
If the routine's compiled flag is not set, exit.
Blurt the routine's fragments into the buffer.

To blurt some routines into a_ buffer:
Get a_ routine from the routines.
If the routine is nil, exit.
Blurt the routine into the buffer.
Repeat.

To blurt a_ string into a_ buffer at an address:
Blurt bytes given the string's first and the string's length and the buffer and the address.

To blurt a_ variable into a_ buffer:
If the variable's compiled flag is not set, exit.
If the variable's type can be reduced to "string", blurt the variable into the buffer (as a_ string); exit.
Put the variable's address minus the image base into an address.
Blurt the variable's data into the buffer at the address.

To blurt a_ variable into a_ buffer (as a_ string):
Put the variable's address minus the image base into an address.
Put the variable's data's length into a_ length.
Put the address into another address.
Add a_ prototype string's magnitude to the other address.
Add the image base to the other address.
Put 0 into the prototype string's first.
Put -1 into the prototype string's last.
If the length is not 0, put the other address into the prototype string's first.
If the length is not 0, put the prototype string's first plus the length minus 1 into the prototype string's last.
Blurt bytes given the prototype string's whereabouts and the prototype string's magnitude and the buffer and the address.
Add the prototype string's magnitude to the address.
Blurt the variable's data into the buffer at the address.

To blurt some variables into a_ buffer:
Get a_ variable from the variables.
If the variable is nil, exit.
Blurt the variable into the buffer.
Repeat.

a_ borough has a_ base address, a_ length and a_ size.

The break tag is a_ tag equal to 1.

To bubble a_ monikette:
If the monikette is nil, exit.
If the monikette's current substring is not blank, clear the monikette's current substring; exit.
If the monikette's current type is nil, exit.
If the monikette's current type is any built-in type, put nil into the monikette's current type; exit.
Put the monikette's current type's base type into the monikette's current type.

a_ built-in type is a_ type.

To calculate the length of a_ type:
If the type is nil, exit.
If the type's length is not -1, exit.
Calculate the length of the type's base type.
If the type's fields are empty, put the type's base type's length into the type's length; exit.
Put 0 into the type's length.
Loop.
If the compiler's abort flag is set, exit.
Get a_ field from the type's fields.
If the field is nil, exit.
If the field's redefinition target name is not blank, repeat.
Calculate the length of the field's type.
Add the field's type's length times the field's count to the type's length.
Repeat.

To calculate the lengths of some types:
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Calculate the length of the type.
Repeat.

To calculate the offsets in a_ type:
If the type is nil, exit.
Put 0 into an offset.
Loop.
If the compiler's abort flag is set, exit.
Get a_ field from the type's fields.
If the field is nil, exit.
If the field's redefinition target name is not blank, repeat.
Put the offset into the field's offset.
Add the field's type's length times the field's count to the offset.
Repeat.

To calculate the offsets in some types:
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Calculate the offsets in the type.
Repeat.

To calculate the redefinition offsets in a_ type:
If the type is nil, exit.
Loop.
If the compiler's abort flag is set, exit.
Get a_ field from the type's fields.
If the field is nil, exit.
If the field's redefinition target name is blank, repeat.
Find another field given the field's redefinition target name and the type's fields.
If the other field is nil, abort with "Redefinição inválida. Não consegui encontrar '" then the field's redefinition target name then "' field." and the field's locus; exit.
Put the other field's offset into the field's offset.
Repeat.

To calculate the redefinition offsets in some types:
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Calculate the redefinition offsets in the type.
Repeat.

The calculating timer is a_ timer.

The call external tag is a_ tag equal to 2.

The call indirect tag is a_ tag equal to 3.

The call internal tag is a_ tag equal to 4.

To check for_ invalid optional info on a_ type:
If the compiler's abort flag is set, exit.
If the type is nil, exit.
If the type's target name is not blank, check for_ invalid optional info on the type (target).
If the type's fields are not empty, check for_ invalid optional info on the type (fields).
If the type's scale is not 0, check for_ invalid optional info on the type (scale).

To check for_ invalid optional info on a_ type (fields):
If the compiler's abort flag is set, exit.
If the type cannot be reduced to "record", abort with "Informação opcional 'com' somente permitida em tipo registro." and the type's locus; exit.

To check for_ invalid optional info on a_ type (scale):
If the compiler's abort flag is set, exit.
If the type cannot be reduced to "number", abort with "Escalas somente permitidas em tipos numéricos." and the type's locus; exit.

To check for_ invalid optional info on a_ type (target):
If the compiler's abort flag is set, exit.
If the type cannot be reduced to "pointer", abort with "Informação optional 'a' somente está permitida em tipos ponteiros." and the type's locus; exit.

To clear a_ field term:
Fill bytes with the null byte starting at the field term's whereabouts for_ the field term's magnitude.

To clear a_ term:
Void the term's variable.
Clear the term's phrase.

The code borough is a_ borough.

To compile the bodies of the routines:
Compile the body of the routine called "initialize before run".
Compile the body of the routine called "executar".
Compile the body of the routine called "finalize after run".

To compile the body of a_ routine:
If the routine is nil, exit.
If the compiler's abort flag is set, exit.
If the routine's compiled flag is set, exit.
Set the routine's compiled flag.
Slap a_ rider on the routine's routine body.
Move the rider (compiler rules).
If the rider's token is the semi-colon byte, compile the body of the routine given the rider (alternate wording); exit. \ *** alternate wording
If the rider's token is any employ, compile the body of the routine given the rider (employ); exit.
Put the current routine into a_ saved routine.
Put the routine into the current routine.
Create the routine's nickname index given 101.
Eliminate duplicate nicknames from the routine's parameters given the routine's nickname index.
Compile the body of the routine (prolog).
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is blank, break.
Compile the next statement given the rider.
Repeat.
Compile the body of the routine (epilog).
Put the saved routine into the current routine.

To compile the body of a_ routine (epilog):
If the routine is nil, exit.
If the compiler's abort flag is set, exit.
Add a_ fragment given the finalize tag.
Loop.
Get a_ variable from the routine's locals.
If the variable is nil, break.
If the variable's kind is "scratch", repeat.
If the variable's type should not be finalized, repeat.
Add another fragment given the push address tag and the variable.
Find another routine given "~finalize" and the variable's type.
If the other routine is nil, abort with "Erro interno - compilando o corpo de uma rotina (epilog)"; exit.
Add a_ third fragment given the call internal tag and the other routine.
Repeat.
Add a_ fourth fragment given the epilog tag.

To compile the body of a_ routine (prolog):
If the routine is nil, exit.
If the compiler's abort flag is set, exit.
Add a_ fragment given the prolog tag.
Add another fragment given the loop tag.

To compile the body of the routine called a_ string:
If the compiler's abort flag is set, exit.
Find a_ routine given the string and the routine index.
If the routine is nil, abort with "Necessito uma rotina para '" then the string then "'."; exit.
Compile the body of the routine.

To compile the body of a_ routine given a_ rider (alternate wording): \ *** alternate wording
If the compiler's abort flag is set, exit.
Move the rider (compiler rules). \ *** do we need this?
Put the routine's next into a_ target routine.
If the target routine is nil, abort with "Você definiu uma forma alternativa aqui, mas não tenho certeza do que é." and the rider; exit.
Put the target routine's moniker into the routine's employs moniker.
Compile the body of the target routine.

To compile the body of a_ routine given a_ rider (employ):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Compile a_ routine reference given the rider.
Convert the routine reference to the routine's employs moniker.
Destroy the routine reference.
If the rider's token is not ".", abort with "As frases utilizadas devem terminar em ponto e não '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
If the rider's token is not blank, abort with "Una vez empleado, no hay otro." and the rider; exit.
Find another routine given the routine's employs moniker and the routine index.
If the other routine is nil, abort with "Não consegui encontrar '" then the routine's employs moniker then "' rotina que você está tentando usar " and the routine's locus; exit.
Compile the body of the other routine.

To compile the call'd part given a_ rider and a_ variable:
If the compiler's abort flag is set, exit.
If the variable is nil, exit.
Put the variable's name into the variable's type name.
Move the rider (compiler rules).
Scan the variable's name given the rider.

To compile a_ directory:
Compile the directory (start).
Compile the directory (load the source files).
Compile the directory (scan the source files).
Compile the directory (resolve the types).
Compile the directory (resolve the globals).
Compile the directory (compile the headers of the routines).
Compile the directory (calculate lengths and offsets of types).
Compile the directory (add the built-in memory routines).
Compile the directory (index the routines for utility use).
Compile the directory (compile the bodies of the routines).
Compile the directory (add and compile the built-in startup routine).
Compile the directory (offset parameters and variables).
Compile the directory (address).
Compile the directory (transmogrify).
Compile the directory (link).
Compile the directory (write the exe).
Compile the directory (stop).

To compile a_ directory (add and compile the built-in startup routine):
If the compiler's abort flag is set, exit.
Show status "Agregando...".
Start the adding built-in startup routine timer.
Add and compile the initialize before run and run and finalize after run routine.
Stop the adding built-in startup routine timer.

To compile a_ directory (add the built-in memory routines):
If the compiler's abort flag is set, exit.
Show status "Agregando...".
Start the adding built-in memory routines timer.
Add the allocate and deallocate and finalize and destroy routines.
Stop the adding built-in memory routines timer.

To compile a_ directory (address):
If the compiler's abort flag is set, exit.
Show status "Calcular lugares...".
Start the addressing timer.
Put 4096 into an address.
Put the address into the import borough's base.
Address the imports given the address.
Put the address minus the import borough's base into the import borough's length.
Round the address up to the nearest multiple of 4096.
Put the address into the data borough's base.
Address the globals given the address.
Address the literals given the address.
Put the address minus the data borough's base into the data borough's length.
Round the address up to the nearest multiple of 4096.
Put the address into the code borough's base.
Address the routines given the address.
Put the address minus the code borough's base into the code borough's length.
Stop the addressing timer.

To compile a_ directory (calculate lengths and offsets of types):
If the compiler's abort flag is set, exit.
Show status "Calculando...".
Start the calculating timer.
Calculate the lengths of the types.
Calculate the offsets in the types.
Calculate the redefinition offsets in the types.
Stop the calculating timer.

To compile a_ directory (compile the bodies of the routines):
If the compiler's abort flag is set, exit.
Show status "Compilando...".
Start the compiling routine bodies timer.
Compile the bodies of the routines.
Stop the compiling routine bodies timer.

To compile a_ directory (compile the headers of the routines):
If the compiler's abort flag is set, exit.
Show status "Compilando...".
Start the compiling routine headers timer.
Compile the headers of the routines.
Stop the compiling routine headers  timer.

To compile a_ directory (index the routines for utility use):
If the compiler's abort flag is set, exit.
Show status "Generalizando...".
Start the indexing utilities timer.
Index the routines for_ utility use.
Scrub the utility index.
Reindex the utility index.
Stop the indexing utilities timer.

To compile a_ directory (link):
If the compiler's abort flag is set, exit.
Show status "Conectando...".
Start the linking timer.
Link.
Stop the linking timer.

To compile a_ directory (offset parameters and variables):
If the compiler's abort flag is set, exit.
Show status "Cálculo de compensações...".
Start the offsetting timer.
Offset the parameters in the routines.
Offset the locals in the routines.
Stop the offsetting timer.

To compile a_ directory (load the source files):
If the compiler's abort flag is set, exit.
Show status "Carregando...".
Start the loading timer.
Load the source files.
Stop the loading timer.

To compile a_ directory (resolve the globals):
If the compiler's abort flag is set, exit.
Show status "Resolvendo...".
Start the resolving globals timer.
Resolve the globals.
Stop the resolving globals timer.

To compile a_ directory (resolve the types):
If the compiler's abort flag is set, exit.
Show status "Resolvendo...".
Start the resolving types timer.
Resolve the types (expand things).
Resolve the types (index plurals).
Resolve the types (base types).
Resolve the types (optional info).
Stop the resolving types timer.

To compile a_ directory (scan the source files):
If the compiler's abort flag is set, exit.
Show status "Exploração...".
Start the scanning timer.
Scan the source files.
Stop the scanning timer.

To compile a_ directory (start):
Show status "Iniciando...".
Finalize the compiler.
Start the compiler's timer.
Initialize the compiler given the directory.
Add the built-in types.

To compile a_ directory (stop):
Stop the compiler's timer.
Show status "".

To compile a_ directory (transmogrify):
If the compiler's abort flag is set, exit.
Show status "Transmogrificando...".
Start the transmogrifying timer.
Transmogrify the routines.
Stop the transmogrifying timer.

To compile a_ directory (write the exe):
If the compiler's abort flag is set, exit.
Show status "Escrevendo...".
Start the writing timer.
Write the compiler's exe to the compiler's exe path.
If o error de e/s is not blank, abort with o error de e/s.
Stop the writing timer.

To compile an expression given a_ rider:
If the compiler's abort flag is set, exit.
Compile a_ term given the rider.
Put the term into the expression.
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is not any operator, exit.
If the rider's token is any divided, compile the expression given the rider (divided); repeat.
If the rider's token is any minus, compile the expression given the rider (minus); repeat.
If the rider's token is any plus, compile the expression given the rider (plus); repeat.
If the rider's token is any then, compile the expression given the rider (then); repeat.
If the rider's token is any times, compile the expression given the rider (times); repeat.

To compile an expression given a_ rider (divided):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
If the rider's token is not any by, abort with "Prefiro a frase 'dividido POR'." and the rider; exit.
If the expression's variable is nil, abort with "Está inválido o 'dividido por', não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
Move the rider (compiler rules).
Compile a_ term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Está inválido o 'dividido por', não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add an intermediate given the expression's type name and the rider's token's first.
Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.
Add several fragments given "divide" and the intermediate and "by" and the term's variable and the rider's token's first.
Put the intermediate into the expression's variable.
Clear the expression's phrase.

To compile an expression given a_ rider (minus):
If the compiler's abort flag is set, exit.
If the expression's variable is nil, abort with "Está inválido o 'menos', não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
Move the rider (compiler rules).
Compile a_ term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Está inválido o 'menos', não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add an intermediate given the expression's type name and the rider's token's first.
Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.
Add several fragments given "subtract" and the term's variable and "from" and the intermediate and the rider's token's first.
Put the intermediate into the expression's variable.
Clear the expression's phrase.

To compile an expression given a_ rider (plus):
If the compiler's abort flag is set, exit.
If the expression's variable is nil, abort with "Está inválido o 'mais', não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
Move the rider (compiler rules).
Compile a_ term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Está inválido o 'mais', não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add an intermediate given the expression's type name and the rider's token's first.
Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.
Add several fragments given "add" and the term's variable and "to" and the intermediate and the rider's token's first.
Put the intermediate into the expression's variable.
Clear the expression's phrase.

To compile an expression given a_ rider (then):
If the compiler's abort flag is set, exit.
If the expression's variable is nil, abort with "Está inválido o 'então', não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
Move the rider (compiler rules).
Compile a_ term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Está inválido o 'então', não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add an intermediate given "string" and the rider's token's first.
Add the put or convert fragments given the expression's variable and the intermediate and the rider's token's first.
Convert the term for_ concatenation given the rider.
Add several fragments given "append" and the term's variable and "to" and the intermediate and the rider's token's first.
Put the intermediate into the expression's variable.
Clear the expression's phrase.

To compile an expression given a_ rider (times):
If the compiler's abort flag is set, exit.
If the expression's variable is nil, abort with "Está inválido o 'vezes', não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
Move the rider (compiler rules).
Compile a_ term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Está inválido o 'vezes', não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add an intermediate given the expression's type name and the rider's token's first.
Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.
Add several fragments given "multiply" and the intermediate and "by" and the term's variable and the rider's token's first.
Put the intermediate into the expression's variable.
Clear the expression's phrase.

To compile the header of a_ routine:
If the routine is nil, exit.
If the compiler's abort flag is set, exit.
Slap a_ rider on the routine's routine header.
Move the rider (compiler rules).
If the rider's token is any decide, compile the header of the routine given the rider (decider); exit.
If the rider is the start of any reverse-possessive function, compile the header of the routine given the rider (reverse-possessive function); exit.
If the rider is the start of any function, compile the header of the routine given the rider (function); exit.
If the rider's token is "compatibly", compile the header of the routine given the rider (callback); exit.
Compile the header of the routine given the rider (procedure).

To compile the header of a_ routine given a_ rider (callback):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Set the routine's callback flag.
Compile the routine's monikettes and the routine's parameters given the rider.
Convert the routine's monikettes to the routine's moniker.
If the routine's moniker is in the routine index, abort with "Já sei como '" then the routine's moniker then "'." and the routine's locus; exit.
Index the routine given the routine's monikettes and the routine index.

To compile the header of a_ routine given a_ rider (decider):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
If the rider's token is not any conditional, abort with "Diz-se 'Decidir SE'. Sempre 'Decidir SE'. Se entende?" and the rider; exit.
Move the rider (compiler rules).  
Set the routine's decider flag.
Compile the routine's monikettes and the routine's parameters given the rider.
If any of the routine's monikettes are negative words, abort with "Não é uma boa ideia usar negativos nos nomes dos tomadores de decisão." and the rider; exit.
Convert the routine's monikettes to the routine's moniker.
If the routine's moniker is in the routine index, abort with "Já sei como '" then the routine's moniker then "'." and the routine's locus; exit.
Index the routine given the routine's monikettes and the routine index.

To compile the header of a_ routine given a_ rider (function):
If the compiler's abort flag is set, exit.
Set the routine's function flag.
Add a_ monikette to the routine's monikettes given "put".
Move the rider (compiler rules).
If the rider's token is any indefinite article, set a_ flag.
If the flag is set, compile the routine's monikettes and the routine's parameters given the rider (indefinite article).
If the flag is not set, compile the routine's monikettes and the routine's parameters given the rider (definite article).
If the rider's token is not any possessive, abort with "An 's is missing or misplaced here." and the rider; exit. \ not translated - no possessives in Portuguese
Move the rider (compiler rules).
Scan a_ name given the rider.
Add another monikette to the routine's monikettes given "'s " then the name.
If the rider's token is not "into", abort with "I was expecting the word 'into', but found '" then the rider's token then "'." and the rider; exit. \ not translated - no possessives in Portuguese
Add a_ third monikette to the routine's monikettes given "into".
Convert the routine's monikettes to a_ moniker.
If the moniker is in the routine index, abort with "I already know how to '" then the moniker then "'." and the routine's locus; exit. \ not translated - no possessives in Portuguese
Index the routine given the routine's monikettes and the routine index.
Move the rider (compiler rules).
If the rider's token is not any indefinite article, abort with "I was expecting an indefinite article, but found '" then the rider's token then "'." and the rider; exit. \ not translated - no possessives in Portuguese
Compile the routine's monikettes and the routine's parameters given the rider (indefinite article).
If the rider's token is not blank, abort with "There's extra stuff on the end of this function." and the rider; exit. \ not translated - no possessives in Portuguese
Convert the routine's monikettes to the routine's moniker.
Index the routine given the routine's monikettes and the routine index. \ for employs

To compile the header of a_ routine given a_ rider (procedure):
If the compiler's abort flag is set, exit.
Compile the routine's monikettes and the routine's parameters given the rider.
Convert the routine's monikettes to the routine's moniker.
If the routine's moniker is in the routine index, abort with "Já sei como '" then the routine's moniker then "'." and the routine's locus; exit.
Index the routine given the routine's monikettes and the routine index.

To compile the headers of some routines:
If the compiler's abort flag is set, exit.
Get a_ routine from the routines.
If the routine is nil, exit.
Compile the header of the routine.
Repeat.

To compile a_ literal given a_ rider:
If the compiler's abort flag is set, exit.
Add the literal to the literals given the rider's token's first.
\If the rider's token is any flag literal, compile the literal given the rider (flag); exit.
If the rider's token is any hex literal, compile the literal given the rider (hex); exit.
If the rider's token is any numeric literal, compile the literal given the rider (numeric); exit.
If the rider's token is any pointer literal, compile the literal given the rider (pointer); exit.
If the rider's token is any string literal, compile the literal given the rider (string); exit.
Abort with "Internal error - compile a_ term given a_ rider (literal)" and the rider.

To compile a_ literal given a_ rider (flag):
If the compiler's abort flag is set, exit.
Convert the rider's token to a_ flag.
Convert the flag to the literal's data.
Move the rider (compiler rules).
Put "flag" into the literal's type name.
Resolve the literal.

To compile a_ literal given a_ rider (hex):
If the compiler's abort flag is set, exit.
Put the rider's token into a_ nibble substring.
Add 1 to the nibble substring's first.
Convert the nibble substring to the literal's data.
Move the rider (compiler rules).
Put "hex string" into the literal's type name.
Resolve the literal.

To compile a_ literal given a_ rider (numeric - integer):
If the compiler's abort flag is set, exit.
Convert the rider's token to a_ number.
Convert the number to the literal's data.
Move the rider (compiler rules).
Put "number" into the literal's type name.
Resolve the literal.

To compile a_ literal given a_ rider (numeric - ratio):
If the compiler's abort flag is set, exit.
Convert the rider's token to a_ ratio.
Convert the ratio to the literal's data.
Move the rider (compiler rules).
Put "ratio" into the literal's type name.
Resolve the literal.

To compile a_ literal given a_ rider (numeric - with unit of measure):
If the compiler's abort flag is set, exit.
Convert the rider's token to a_ ratio.
Move the rider (compiler rules).
Scan a_ name given the rider.
Find a_ type given the name and the type index.
If the type is nil, abort with "'" then the name then "' não é uma unidade de medida válida." and the literal's locus; exit.
If the type cannot be reduced to "number", abort with "'" then the name then "' não é uma unidade de medida válida." and the literal's locus; exit.
Put the type's scale into a_ final ratio.
If the type's scale is 0, put 1/1 into the final ratio.
Multiply the final ratio by the ratio.
Reduce the final ratio.
If the final ratio's denominator is 0, abort with "Parece que não temos uma unidade de medida válida aqui." and the literal's locus.
Put the final ratio's numerator divided by the final ratio's denominator into a_ number.
Put the type's name into the literal's type name.
Convert the number to the literal's data.
Resolve the literal.

To compile a_ literal given a_ rider (numeric):
If the compiler's abort flag is set, exit.
If the rider is followed by any unit of measure, compile the literal given the rider (numeric - with unit of measure); exit.
If the rider's token is any integer literal, compile the literal given the rider (numeric - integer); exit.
If the rider's token is any ratio literal, compile the literal given the rider (numeric - ratio); exit.
If the rider's token is any mixed literal, compile the literal given the rider (numeric - ratio); exit.

To compile a_ literal given a_ rider (pointer):
If the compiler's abort flag is set, exit.
Convert 0 to the literal's data. \ was nil
Move the rider (compiler rules).
Put "pointer" into the literal's type name.
Resolve the literal.

To compile a_ literal given a_ rider (string):
If the compiler's abort flag is set, exit.
Put the rider's token into the literal's data.
Unquote the literal's data.
Move the rider (compiler rules).
Put "string" into the literal's type name.
Resolve the literal.

To compile some monikettes and some parameters given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
If the rider is on any definite article, compile the monikettes and the parameters given the rider (definite article); repeat.
If the rider is on any indefinite article, compile the monikettes and the parameters given the rider (indefinite article); repeat.
If the rider is on any monikette string, compile the monikettes and the parameters given the rider (monikette string); repeat.
Abort with "'" then the rider's token then "' no es válido en un encabezado de rutina." and the rider.

To compile some monikettes and some parameters given a_ rider (definite article):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Scan a_ name given the rider.
If the compiler's abort flag is set, exit.
Prepend "the " to the name.
Add a_ monikette to the monikettes given the name.

To compile some monikettes and some parameters given a_ rider (indefinite article):
If the compiler's abort flag is set, exit.
Add a_ parameter to the parameters given "parameter" and the rider's token's first.
\PAL
If the rider's token is "outra", put "segunda" into the parameter's name.
If the rider's token is "outro", put "segundo" into the parameter's name.
\CAL
If the rider's token is "another", put "other" into the parameter's name.
Move the rider (compiler rules).
Scan a_ name given the rider.
Extend the parameter's name with the name.
If the rider's token is any called, compile the call'd part given the rider and the parameter.
Resolve the parameter.
If the parameter is duplicated in the parameters, abort with "Amigo, já existe um parâmetro chamado '" then the parameter's name then "'." and the parameter's locus; exit.
Add a_ monikette to the monikettes given the parameter's type.

To compile some monikettes and some parameters given a_ rider (monikette string):
If the compiler's abort flag is set, exit.
Add a_ monikette to the monikettes given the rider's token.
Move the rider (compiler rules).

To compile some monikettes given a_ rider: 
If the compiler's abort flag is set, exit.
\If the rider's token is "del", add a_ special monikette to the monikettes given "de"; add 1 to the rider's token's first. \ to make "del" in a_ call look like "de el"
If the rider is on any monikette string, add a_ monikette to the monikettes given the rider's token; move the rider (compiler rules); repeat.
If the rider's token is not the start of any expression, exit.
Compile an expression given the rider.
If the compiler's abort flag is set, exit.
Add another monikette to the monikettes given the expression.
Repeat.

\To compile some monikettes given a_ rider:
\If the compiler's abort flag is set, exit.
\If the rider's token is any monikette string, add a_ monikette to the monikettes given the rider's token; move the rider (compiler rules); repeat.
\If the rider's token is not the start of any expression, exit.
\Compile an expression given the rider.
\If the compiler's abort flag is set, exit.
\Add another monikette to the monikettes given the expression.
\Repeat.

To compile the next statement given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is any conditional, compile the next statement given the rider (if); exit.
If the rider's token is any loop, compile the next statement given the rider (loop); exit.
If the rider's token is any privatize, compile the next statement given the rider (privatize); exit.
If the rider's token is not the start of any statement, abort with "Esperava uma sentença aqui, mas encontrei '" then the rider's token then "'." and the rider; exit.
Compile the next statement given the rider (other).
If the rider's token is not the period byte, abort with "Parece que você esqueceu um ponto por aí." and the rider; exit.
Move the rider (compiler rules).

To compile the next statement given a_ rider (break):
Add a_ fragment given the break tag.
Move the rider (compiler rules).

To compile the next statement given a_ rider (call - external):
Put the rider's token into a_ string.
Unquote the string.
Move the rider (compiler rules).
If the rider's token is not any string literal, abort with "Ei, esperava que você citasse um nome de entrada, mas encontrei '" then the rider's token then "'." and the rider; exit.
Put the rider's token into another string.
Unquote the other string.
Move the rider (compiler rules).
Add an entry to the imports given the string and the other string.
If the rider's token is "with", compile the next statement given the rider (call - with clause).
If the rider's token is "returning", compile the next statement given the rider returning a_ term (call - returning part).
Add a_ fragment given the call external tag and the entry.
If the term is empty, exit.
If the term's variable is nil, abort with "Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add another fragment given the save eax tag and the term's variable.

To compile the next statement given a_ rider (call - indirect):
Compile an expression given the rider.
If the compiler's abort flag is set, exit.
If the expression's variable is nil, abort with "Não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
If the expression's type cannot be reduced to "pointer", abort with "Eu preciso de um tipo de ponteiro nesta CHAMADA." and the rider; exit.
If the rider's token is "with", compile the next statement given the rider (call - with clause).
If the rider's token is "returning", compile the next statement given the rider returning a_ term (call - returning part).
Add a_ fragment given the call indirect tag and the expression's variable.
If the term is empty, exit.
If the term's variable is nil, abort with "Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add another fragment given the save eax tag and the term's variable.

To compile the next statement given a_ rider (call - internal):
Compile some monikettes given the rider.
Find a_ routine given the monikettes.
If the routine is not nil, add push fragments given the monikettes.
If the routine is not nil, destroy the monikettes; add a_ fragment given the call internal tag and the routine; exit.
Convert the monikettes to a_ moniker.
Destroy the monikettes.
Abort with "No sé cómo '" then the moniker then "'." and the rider.

To compile the next statement given a_ rider (call - with clause): \ this guy is recursise so parameters get passed right to left
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Compile an expression given the rider.
If the compiler's abort flag is set, exit.
If the expression's variable is nil, abort with "Não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
If the expression's type is not value pushable, abort with "'" then the expression's type's name then "' ou poderia ser passado corretamente." and the rider; exit.
If the rider's token is any and, compile the next statement given the rider (call - with clause).
Add a_ fragment given the push value tag and the expression's variable.

To compile the next statement given a_ rider (call):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
If the rider's token is any string literal, compile the next statement given the rider (call - external); exit.
Compile the next statement given the rider (call - indirect).  

To compile the next statement given a_ rider (exit):
If the current routine's decider flag is set, abort with "O que significa 'sair' bem aqui? Sim, não, talvez?" and the rider; exit.
Add a_ fragment given the exit tag.
Move the rider (compiler rules).

To compile the next statement given a_ rider (if):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Compile some monikettes given the rider.
Remove any negatives from the monikettes returning a_ flag.
Find a_ routine given the monikettes.
If the routine is not nil, add push fragments given the monikettes.
If the routine is nil, convert the monikettes to a_ moniker.
Destroy the monikettes.
If the routine is nil, abort with "Preciso de um tomador de decisão com as palavras '" then the moniker then "'." and the rider; exit.
If the routine's decider flag is not set, abort with "Vou precisar de um tomador de decisões aqui, ok?" and the rider; exit.
If the rider's token is not the comma byte, abort with "Eu esperava uma vírgula por aí, mas encontrei '" then the rider's token then "'." and the rider; exit.
Add a_ fragment given the call internal tag and the routine.
If the flag is set, add another fragment given the not tag.
Add a_ third fragment given the jump false tag.
Move the rider (compiler rules).
Loop.
Compile the next statement given the rider (other).
If the compiler's abort flag is set, exit.
If the rider's token is the semi-colon byte, move the rider (compiler rules); repeat.
If the rider's token is not the period byte, abort with "Estava pensando em um ponto, mas você colocou '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Add a_ fourth fragment given the end if tag.

To compile the next statement given a_ rider (intel):
Move the rider (compiler rules).
If the rider's token is not any hex literal, abort with "Preciso do código de máquina aqui; encontrei '" then the rider's token then "'." and the rider; exit.
Add a_ fragment given the intel tag.
Put the rider's token into a_ nibble substring.
Add 1 to the nibble substring's first.
Convert the nibble substring to the fragment's code.
Move the rider (compiler rules).

To compile the next statement given a_ rider (loop):
If the compiler's abort flag is set, exit.
Add a_ fragment given the loop tag.
Move the rider (compiler rules).
If the rider's token is not the period byte, abort with "Parece que você esqueceu um ponto por aí." and the rider; exit.
Move the rider (compiler rules).

To compile the next statement given a_ rider (other):
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
If the rider's token is any exit, compile the next statement given the rider (exit); exit.
If the rider's token is any repeat, compile the next statement given the rider (repeat); exit.
If the rider's token is any break, compile the next statement given the rider (break); exit.
If the rider's token is any say, compile the next statement given the rider (say); exit.
If the rider's token is "intel", compile the next statement given the rider (intel); exit.
If the rider's token is "push", compile the next statement given the rider (push); exit.
If the rider's token is any call, compile the next statement given the rider (call); exit.
If the rider's token is any point, compile the next statement given the rider (point); exit.
If the rider's token is any conditional, abort with "As declarações aninhadas do SE são um sinal claro de raciocínio pouco claro. Pense de novo." and the rider; exit.
If the rider's token is any privatize, abort with "A sentença 'privatizar' não pode ser usada aqui." and the rider; exit.
If the rider's token is any loop, abort with "Empate depois de um SE é uma boa maneira de perder o almoço." and the rider; exit.
If the rider's token is any employ, abort with "'Empregue' deve ser o único imperativo em uma rotina." and the rider; exit.
Compile the next statement given the rider (call - internal).

To compile the next statement given a_ rider (point):
Move the rider (compiler rules).
Compile a_ term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
If the term's kind is "literal", abort with "Este tipo de variável não vem aqui." and the rider.
If the term's type's length is not 4, abort with "Este tipo de variável não vem aqui." and the rider.
If the rider's token is not "to", abort with "Esperava 'para', mas encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
If the rider's token is not "routine", abort with "Esperava a palavra 'rotina', mas encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Compile a_ routine reference given the rider.
Convert the routine reference to a_ moniker.
Destroy the routine reference.
Find a_ routine given the moniker and the routine index.
If the routine is nil, abort with "Não consegui encontrar uma rotina '" then the moniker then "' a que se refere." and the rider; exit.
Add a_ fragment given the routine address tag and the routine.
Put the term's variable into the fragment's variable.

To compile the next statement given a_ rider (privatize):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Compile a_ term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Uso inválido de 'privatizar', não encontro a variável '" then the term's phrase then "'." and the rider; exit.
If the term's kind is not "parameter", abort with "Somente pode privatizar parâmetros." and the rider; exit.
Add a_ local to the current routine's locals given "local" and the rider's token's first.
Put the term's name into the local's name.
Put the term's nickname into the local's nickname.
Put the term's type name into the local's type name.
Resolve the local.
Prepend "original " to the term's name.
If the term's nickname is not blank, prepend "original " to the term's nickname.
Add several fragments given "put" and the term's variable and "into" and the local and the rider's token's first.
If the rider's token is not the period byte, abort with "Parece que você esqueceu um ponto por aí." and the rider; exit.
Move the rider (compiler rules).

To compile the next statement given a_ rider (push):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Compile an expression given the rider.
If the compiler's abort flag is set, exit.
If the expression's variable is nil, abort with "'Push' inválido. Não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
If the expression's type is not value pushable, abort with "Os valores do tipo '" then the expression's type's name then "' não podem ser empilhados." and the rider; exit.
Add a_ fragment given the push value tag and the expression's variable.

To compile the next statement given a_ rider (repeat):
Add a_ fragment given the repeat tag.
Move the rider (compiler rules).

\To compile the next statement given a_ rider (say):
\If the current routine's decider flag is not set, compile the next statement given the rider (call - internal); exit.
\Move the rider (compiler rules).
\Compile an expression given the rider.
\If the compiler's abort flag is set, exit.
\If the expression's variable is nil, abort with "Não é válido este 'diga', não entendo a variável '" then the expression's phrase then "'." and the rider; exit.
\If the expression's type cannot be reduced to "flag", abort with "Eu preciso de um sonoro 'sim' ou 'não' aqui." and the rider; exit.
\Add a_ fragment given the load eax tag and the expression's variable.
\Add another fragment given the exit tag.

To compile the next statement given a_ rider (say):
If the current routine's decider flag is not set, compile the next statement given the rider (call - internal); exit.
Move the rider (compiler rules).
If the rider's token is not any decider literal, abort with "Eu preciso de um sonoro 'sim' ou 'não' aqui." and the rider; exit.
Clear a_ flag. If the rider's token is any positive decider literal, set the flag.
Move the rider (compiler rules).
If the rider's token is not the period byte, abort with "Estava pensando em um ponto, mas você colocou '" then the rider's token then "'." and the rider; exit.
Add a_ fragment given the load eax tag and the flag.
Add another fragment given the exit tag.

To compile the next statement given a_ rider returning a_ term (call - returning part):
Move the rider (compiler rules).
Compile the term given the rider.
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
If the term's type is not value pushable, abort with "Uma variável de 1, 2 ou 4 bytes é necessária na cláusula 'Retornar'." and the rider.

To compile a_ routine reference given a_ rider:
If the rider's token is "to", move the rider (compiler rules).
If the rider is the start of any function, compile the routine reference given the rider (function); exit.
If the rider's token is any decide, compile the routine reference given the rider (decide).
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
If the rider's token is ".", exit.
If the rider's token is any definite article, compile the routine reference given the rider (definite article); repeat.
If the rider's token is any indefinite article, compile the routine reference given the rider (indefinite article); repeat.
If the rider is on any monikette string, compile the routine reference given the rider (monikette string); repeat.
Abort with "'" then the rider's token then "' não é válido em uma declaração empregada. " and the rider.

To compile a_ routine reference given a_ rider (decide):
Move the rider (compiler rules).
If the rider's token is not any conditional, abort with "Sempre dizemos DECIDIR SE, e não DECIDIR '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).

To compile a_ routine reference given a_ rider (definite article):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Scan a_ name given the rider.
Prepend "the " to the name.
Add a_ monikette to the routine reference given the name.

To compile a_ routine reference given a_ rider (function):
If the compiler's abort flag is set, exit.
Add a_ monikette to the routine reference given "put".
Move the rider (compiler rules).
If the rider's token is any indefinite article, set a_ flag.
If the flag is set, compile the routine reference given the rider (indefinite article).
If the flag is not set, compile the routine reference given the rider (definite article).
If the rider's token is not any possessive, abort with "I was expecting an 's, but found '" then the rider's token then "'." and the rider; exit. \ not translated - no possessives in Portuguese
Move the rider (compiler rules).
Scan a_ name given the rider.
Add another monikette to the routine reference given "'s " then the name.
If the rider's token is not "into", abort with "I was expecting the word 'into', but found '" then the rider's token then "'." and the rider; exit. \ not translated - no possessives in Portuguese
Add a_ third monikette to the routine reference given "into".
Move the rider (compiler rules).
If the rider's token is not any indefinite article, abort with "I was expecting an indefinite article, but found '" then the rider's token then "'." and the rider; exit. \ not translated - no possessives in Portuguese
Compile the routine reference given the rider (indefinite article).

To compile a_ routine reference given a_ rider (indefinite article):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Scan a_ name given the rider.
Find a_ type and a_ nickname given the name.
If the type is nil, abort with "Sentença usada inválida, não entendo '" then the name then "'." and the rider; exit.
Add a_ monikette to the routine reference given the type.

To compile a_ routine reference given a_ rider (monikette string):
If the compiler's abort flag is set, exit.
Add a_ monikette to the routine reference given the rider's token.
Move the rider (compiler rules).

To compile a_ term given a_ rider:
Clear the term.
If the compiler's abort flag is set, exit.
Compile the term given the rider (common part).
If the rider is on any simile, exit. \ added for invisible turtle project ***
If the rider's token is "as_", compile the term given the rider (as part).
If the rider's token is "/", compile the term given the rider (runtime ratio).

To compile a_ term given a_ rider (as part):
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Não é válido este 'como', não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Move the rider (compiler rules).
If the rider's token is not any indefinite article, abort with "Eu esperava um artigo indefinido após o COMO, mas encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Scan a_ type name given the rider.
Find a_ type given the type name and the type index.
If the type is nil, abort with "Não consegui encontrar '" then the type name then "' un tipo." and the rider; exit.
Add a_ scratch given the type's name and the rider's token's first.
Add a_ fragment given the load address tag and the term's variable and the scratch.
Put the scratch into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider (common part):
If the compiler's abort flag is set, exit.
If the rider's token is the dash byte, compile the term given the rider (negated term); exit.
If the rider's token is the cross byte, compile the term given the rider (posigated term); exit.
If the rider's token is the start of any variable, compile the term given the rider (variable); exit.
If the rider's token is the start of any new local, compile the term given the rider (new local); exit.
If the rider's token is any literal, compile the term given the rider (literal); exit.
Abort with "Eu esperava por um término por aqui, mas tudo que encontrei foi '" then the rider's token then "'." and the rider.

To compile a_ term given a_ rider (dereference - in place):
If the term's variable is nil, abort with "Error interno - compilando um termo dado um iterador (dereference - in place)" and the rider; exit.
Put the term's type's target type's name into the term's type name.
Put the term's type's target type into the term's type.
Add a_ fragment given the dereference tag and the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider (dereference):
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Cancelamento de referência inválido. Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
If the term's type's target type is nil, abort with "Não consigo determinar o tipo deste alvo." and the rider; exit.
If the term's kind is "scratch", compile the term given the rider (dereference - in place); exit.
Add a_ scratch given the term's type's target type's name and the rider's token's first.
Add a_ fragment given the load address tag and the term's variable and the scratch.
Add another fragment given the dereference tag and the scratch.
Put the scratch into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider (literal):
If the compiler's abort flag is set, exit.
Compile a_ literal given the rider.
Put the literal into the term's variable.
Clear the term's phrase.
Compile the term given the rider (possessives).

To compile a_ term given a_ rider (negated term):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Compile another term given the rider.
If the compiler's abort flag is set, exit.
If the other term's variable is nil, abort with "Negação inválida, não entendo a variável '" then the other term's phrase then "'." and the rider; exit.
Add an intermediate given the other term's type name and the rider's token's first.
Add several fragments given "put" and the other term's variable and "into" and the intermediate and the other term's locus.
Add two fragments given "negate" and the intermediate and the rider's token's first.
Put the intermediate into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider (new local):
If the compiler's abort flag is set, exit.
If the current routine is nil, abort with "Não sei o que você está tentando desempilhar daqui." and the rider; exit.
Add a_ local to the current routine's locals given "local" and the rider's token's first.
\PAL
If the rider's token is "outra", put "segunda" into the local's name.
If the rider's token is "outro", put "segundo" into the local's name.
\CAL
If the rider's token is "another", put "other" into the local's name.
Move the rider (compiler rules).
Scan a_ name given the rider.
Extend the local's name with the name.
If the rider's token is any called, compile the call'd part given the rider and the local.
Resolve the local.
If the local is duplicated in the current routine's parameters, abort with "'" then the local's name then "' já está em uso como parâmetro." and the local's locus; exit.
If the local is duplicated in the current routine's locals, abort with "'" then the local's name then "' já está em uso como variável local." and the local's locus; exit.
Eliminate duplicate nicknames given the local and the current routine's nickname index.
Put the local into the term's variable.
Clear the term's phrase.
Compile the term given the rider (possessives).

To compile a_ term given a_ rider (posigated term):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Compile the term given the rider.
If the term's variable is nil, abort with "Prefixo de adição inválido. Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Clear the term's phrase.

To compile a_ term given a_ rider (possessive - magnitude):
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Uso inválido de magnitude, não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add a_ literal to the literals given the rider's token's first.
Convert the term's type's length to the literal's data.
Put "number" into the literal's type name.
Resolve the literal.
Put the literal into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider (possessive - target):
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Uso inválido de um alvo, não entendo a variável '" then the term's phrase then "'." and the rider; exit.
If the term's type cannot be reduced to "pointer", abort with "Você só pode obter o alvo dos tipos de ponteiro." and the rider; exit.
Compile the term given the rider (dereference).

To compile a_ term given a_ rider (possessive - whereabouts):
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Uso inválido de paradeiro, não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Add an intermediate given "pointer" and the rider's token's first. 
Add a_ fragment given the load address tag and the term's variable and the intermediate.
Put the intermediate into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider (possessive): \ similar to "compile a_ term given a_ rider (reverse-possessive)
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Scan a_ name given the rider.
If the compiler's abort flag is set, exit.
If the name is any magnitude, compile the term given the rider (possessive - magnitude); exit.
If the name is any target, compile the term given the rider (possessive - target); exit.
If the name is any whereabouts, compile the term given the rider (possessive - whereabouts); exit.
Compile the term given the rider and the name (possessive - field).

To compile a_ term given a_ rider (possessives):
If the compiler's abort flag is set, exit.
If the rider's token is not any possessive, exit.
Compile the term given the rider (possessive).
Repeat.  

To compile a_ term given a_ rider (runtime ratio):
If the compiler's abort flag is set, exit.
If the term's variable is nil, abort with "Uso inválido de /, não entendo a variável '" then the term's phrase then "'." and the rider; exit.
Move the rider (compiler rules).
Compile another term given the rider.
If the compiler's abort flag is set, exit.
If the other term's variable is nil, abort with "Uso inválido de /, não entendo a variável '" then the other term's phrase then "'." and the rider; exit.
Add an intermediate given "ratio" and the rider's token's first.
Add several fragments given "put" and the term's variable and "and" and the other term's variable and "into" and the intermediate and the rider's token's first.
Put the intermediate into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider (variable):
If the compiler's abort flag is set, exit.
If the current routine is nil, abort with "Não sei o que você está tentando fazer aqui." and the rider; exit.
Move the rider (compiler rules).
Scan a_ name given the rider.
If the rider is on any reverse-possessive, compile the term given the rider and the name (reverse-possessive); exit.
Find a_ variable given the name.
Put the variable into the term's variable.
Put "the " into the term's phrase.
Append the name to the term's phrase.
Compile the term given the rider (possessives).

To compile a_ term given a_ rider and a_ field name (reverse-possessive):  \ this is recursive \ dahn version 2
If the compiler's abort flag is set, exit.
Move the rider (compiler rules). \ past the reverse-possessive starter
\If the rider's token is not "del", Move the rider (compiler rules). \ past the reverse-possessive starter \ gerry added "if" part
\If the rider's token is "del", Add 1 to the rider's token's first. \ makes "del" look like "de el"
If the rider's token is not any article, abort with "Estava esperando um artigo, mas encontrei '" then the rider's token then "'."; exit.
Put the rider's token into an article token.
Move the rider (compiler rules).
Scan a_ name given the rider. 
If the rider is on any reverse-possessive, set a_ reverse-possessive flag.
If the reverse-possessive flag is set, compile the term given the rider and the name (reverse-possessive).
If the reverse-possessive flag is not set, compile the term given the rider and the name and the article (reverse-possessive prepare to unwind).
Compile the term given the field name and the rider (reverse-possessive).

To compile a_ term given a_ rider and a_ variable name and an article token (reverse-possessive prepare to unwind): \ dahn version 2
If the article is the start of any variable, compile the term given the rider and the variable name and the article (reverse-possessive prepare to unwind existing variable); exit.
Compile the term given the rider and the variable name (reverse-possessive prepare to unwind new local).

To compile a_ term given a_ rider and a_ variable name and an article token (reverse-possessive prepare to unwind existing variable): \ dahn version 2
Find a_ variable given the variable name.
If the variable is nil, abort with "Não foi possível encontrar uma variável com o nome '" then the variable name then "'.".
Put the variable into the term's variable.
Put "the " into the term's phrase.
Append the variable name to the term's phrase.

To compile a_ term given a_ rider and a_ variable name (reverse-possessive prepare to unwind new local): \ dahn version 2
If the compiler's abort flag is set, exit.
Add a_ local to the current routine's locals given "local" and the rider's token's first.
\PAL
If the rider's token is "outra", put "segunda" into the local's name.
If the rider's token is "outro", put "segundo" into the local's name.
\CAL
If the rider's token is "another", put "other" into the local's name.
Extend the local's name with the variable name.
If the rider's token is any called, compile the call'd part given the rider and the local.
Resolve the local.
If the local is duplicated in the current routine's parameters, abort with "'" then the local's name then "' já está em uso como parâmetro." and the local's locus; exit.
If the local is duplicated in the current routine's locals,abort with "'" then the local's name then "' já está em uso como uma variável local." and the local's locus; exit.
Eliminate duplicate nicknames given the local and the current routine's nickname index.
Put the local into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ field name and a_ rider (reverse-possessive):  \ similar to "compile a_ term given a_ rider (possessive)" \ dahn
If the compiler's abort flag is set, exit.
If the field name is any magnitude, compile the term given the rider (possessive - magnitude); exit.
If the field name is any target, compile the term given the rider (possessive - target); exit.
If the field name is any whereabouts, compile the term given the rider (possessive - whereabouts); exit.
Compile the term given the rider and the field name (possessive - field).

To compile a_ term given a_ rider and a_ field term:
If the compiler's abort flag is set, exit.
If the field term's dereference flag is set, compile the term given the rider (dereference).  
If the field term's function is not nil, compile the term given the rider and the field term (function); exit.
If the term's kind is "scratch", compile the term given the rider and the field term (in place); exit.
Put the field term's field into a_ field.
Add a_ scratch given the field's type's name and the rider's token's first.
Add a_ fragment given the load address tag and the term's variable and the scratch.
If the field's offset is not 0, add a_ third fragment given the increment tag and the scratch and the field's offset.
Put the scratch into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider and a_ field term (function):
If the compiler's abort flag is set, exit.
Put the field term's function into a_ routine.
Put the routine's parameters' last into a_ parameter.
If the parameter is nil, abort with "Erro interno - compilando um termo dados um iterador e um campo (function)." and the rider; exit.
If the parameter's type is nil, abort with "Erro interno 2 - compilando um termo dados um iterador e um campo (function)." and the rider; exit.
Add an intermediate given the parameter's type's name and the rider's token's first.
Add a_ fragment given the push address tag and the intermediate.
If the field term's push flag is set, add another fragment given the push address tag and the term's variable.
Add a_ third fragment given the call internal tag and the routine.
Put the intermediate into the term's variable.
Clear the term's phrase.

To compile a_ term given a_ rider and a_ field term (in place):
If the compiler's abort flag is set, exit.
Put the field term's field into a_ field.
Put the field's type's name into the term's type name.
Put the field's type into the term's type.
If the field's offset is not 0, add a_ third fragment given the increment tag and the term's variable and the field's offset.
Clear the term's phrase.

To compile a_ term given a_ rider and a_ name (possessive - field):
If the compiler's abort flag is set, exit.
If the term's variable is not nil, put the term's type into a_ type.
Find a_ field term given the term's phrase and the type and the name.
If the field term is not empty, compile the term given the rider and the field term; exit.
If the term's variable is nil, abort with "Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
If the type can be reduced to "pointer", put the type's target type into the type.
If the type is nil, abort with "Não existe um '" then the name then "' field in a_ '" then the term's type's name then "'." and the rider; exit.
Loop.
If the compiler's abort flag is set, exit.
Get a_ field from the type's fields.
If the field is nil, abort with "Não existe '" then the name then "' dentro de '" then the term's type's name then "'." and the rider; exit.
Find a_ deep field term given "" and the field's type and the name.
If the deep field term is empty, repeat.
Put the field into a_ first field term's field.
If the term's type can be reduced to "pointer", set the first field term's dereference flag.
Compile the term given the rider and the first field term.
Compile the term given the rider and the deep field term.

The compiler has
a_ directory,
a_ timer,
An abort flag,
An abort message,
An abort path,
An abort row#,
a_ name count,
a_ exe buffer,
a_ listing buffer.

The compiling routine bodies timer is a_ timer.

The compiling routine headers timer is a_ timer.

To convert some monikettes to a_ moniker:
Convert the monikettes to the moniker given the monikettes' last.

To convert some monikettes to a_ moniker given a_ monikette:
Clear the moniker.
Loop.
Get a_ current monikette from the monikettes.
If the current monikette is nil, exit.
Append the current monikette to the moniker.
If the current monikette is the monikette, exit.
Repeat.

To convert a_ nibble substring to a_ string: employ convert a_ nibble string to a_ hex string.

To convert a_ term for_ concatenation given a_ rider: \ used for right-side THEN operand
If the term's variable is nil, abort with "Não entendo a variável '" then the term's phrase then "'." and the rider; exit.
If the term's type can be reduced to "string", exit.
Add an intermediate given "string" and the rider's token's first.
Add the put or convert fragments given the term's variable and the intermediate and the rider's token's first.
Put the intermediate into the term's variable.
Clear the term's phrase.

To copy a_ field into another field:
If the field is nil, void the other field; exit.
Allocate memory for_ the other field.
Put the field's locus into the other field's locus.
Put the field's name into the other field's name.
Put the field's nickname into the other field's nickname.
Put the field's type name into the other field's type name.
Put the field's type into the other field's type.
Put the field's count into the other field's count.
Put the field's redefinition target name into the other field's redefinition target name.
Put the field's reference flag into the other field's reference flag.
Put the field's offset into the other field's offset.

To copy some fields into some other fields:
Get a_ field from the fields.
If the field is nil, exit.
Copy the field into another field.
Append the other field to the other fields.
Repeat.

To copy some fields into some other fields (data fields only):
If the fields' count is less than 4, exit. \ for english next and prev and portuguese next and prev redefinitions
\If the fields' first is nil, exit.
\If the fields' first's next is nil, exit.
\If the fields' first's next's next is nil, exit.
\\Put the fields' first's next's next into a_ field. \ skip next and prev
\If the fields' first's next's next's next is nil, exit.
\If the fields' first's next's next's next's next is nil, exit.
\If the fields' first's next's next's next's next's next is nil, exit.
Put the fields' first's next's next's next's next into a_ field. \ english next and prev and portuguese next and prev redefinitions
Loop.
If the field is nil, exit.
Copy the field into another field.
Append the other field to the other fields.
Get the field from the fields.
Repeat.

To copy a_ monikette into another monikette:
If the monikette is nil, void the other monikette; exit.
Allocate memory for_ the other monikette.
Put the monikette's string into the other monikette's string.
Put the monikette's type into the other monikette's type.
Put the monikette's variable into the other monikette's variable.
\ don't copy substring
Put the monikette's current type into the other monikette's current type.

To copy some monikettes into some other monikettes:
Destroy the other monikettes.
Loop.
Get a_ monikette from the monikettes.
If the monikette is nil, exit.
Copy the monikette into another monikette.
Append the other monikette to the other monikettes.
Repeat.

To create an entry:
Allocate memory for_ the entry.

To create a_ fragment given a_ tag:
Allocate memory for_ the fragment.
Put the tag into the fragment's tag.

To create an import:
Allocate memory for_ the import.

To create a_ monikette:
Allocate memory for_ the monikette.

To create a_ routine:
Allocate memory for_ the routine.

To create a_ source file:
Allocate memory for_ the source file.

To create a_ type:
Allocate memory for_ the type.
Put 0/1 into the type's scale.
Put -1 into the type's length.

To create a_ variable given a_ kind:
Allocate memory for_ the variable.
Put the kind into the variable's kind.
Put 1 into the variable's count.

The current header address is an address.

The current name address is an address.

The current routine is a_ routine.

The current thunk address is an address.

The data borough is a_ borough.

To decide if any of some monikettes are negative words:
Get a_ monikette from the monikettes.
If the monikette is nil, say no.
If the monikette's string is any negative word, say yes.
Repeat.

To decide if a_ byte is any glom byte:
If the byte is any letter, say yes.
If the byte is any digit, say yes.
If the byte is the tilde byte, say yes.
If the byte is the at-sign byte, say yes.
If the byte is the number-sign byte, say yes.
If the byte is the percent-sign byte, say yes.
If the byte is the ampersand byte, say yes.
If the byte is the underscore byte, say yes.
If the byte is the single-quote byte, say yes.
If the byte is the dash byte, say yes.
If the byte is the cross byte, say yes.
If the byte is the slash byte, say yes.
Say no.

To decide if a_ byte is any mark:
If the byte is the period byte, say yes.
If the byte is the comma byte, say yes.
If the byte is the semi-colon byte, say yes.
If the byte is the colon byte, say yes.
If the byte is the exclamation  byte, say yes.
If the byte is the question-mark byte, say yes.
Say no.

To decide if a_ byte is any stressed vowel:
If the byte is in "áãâéêíóõôú", say yes.
Say no.

To decide if a_ byte is any symbol:
If the byte is the caret byte, say yes.
If the byte is the bar byte, say yes.
If the byte is the asterisk byte, say yes.
If the byte is the cross byte, say yes.
If the byte is the dash byte, say yes.
If the byte is the slash byte, say yes.
If the byte is the left-alligator byte, say yes.
If the byte is the right-alligator byte, say yes.
If the byte is the left-brace byte, say yes.
If the byte is the right-brace byte, say yes.
If the byte is the equal-sign byte, say yes.
If the byte is 128, say yes.
If the byte is 130, say yes.
If the byte is between 132 and 137, say yes.
If the byte is 139, say yes.
If the byte is between 145 and 153, say yes.
If the byte is 155, say yes.
If the byte is between 161 and 180, say yes.
If the byte is between 183 and 191, say yes.
If the byte is 215, say yes.
If the byte is 247, say yes.
Say no.

To decide if a_ field term is empty:
If the field term's field is not nil, say no.
If the field term's function is not nil, say no.
Say yes.

To decide if some fields should be finalized:
Get a_ field from the fields.
If the field is nil, say no.
If the field's type should be finalized, say yes.
Repeat.

To decide if an item looks reamish:
Load the item's path into a_ buffer.
If the buffer starts with "ream cal", say yes.
Say no.

To decide if a_ moniker is in an index:
Find a_ refer given the moniker and the index.
If the refer is nil, say no.
If the refer's pointer is nil, say no.
Say yes.

To decide if a_ monikette is bubbled out:
If the monikette is nil, say yes.
If the monikette's current type is not nil, say no.
If the monikette's current substring is not blank, say no.
Say yes.

To decide if a_ name is any magnitude:
\PAL
If the name is "magnitude", say yes.
\CAL
If the name is "magnitud", say yes.
Say no.

To decide if a_ name is any target:
\PAL
If the name is "conteúdo", say yes.
If the name is "alvo", say yes.
\CAL
If the name is "target", say yes.
Say no.

To decide if a_ name is any whereabouts:
\PAL
If the name is "paradeiro", say yes.
\CAL
If the name is "whereabouts", say yes.
Say no.

To decide if a_ name is any valid field name:
If the name is any magnitude, say no.
If the name is any target, say no.
If the name is any whereabouts, say no.
Say yes.

To decide if a_ rider is followed by any unit of measure:
Privatize the rider.
Move the rider (compiler rules).
If the rider is not on any name starter, say no.
Scan a_ name given the rider.
Find a_ type given the name and the type index.
If the type is nil, say no.
If the name is not "times", say yes. \ special because times is an infix operator and a_ unit of measure
If the rider's token is the start of any expression, say no.
Say yes.

To decide if a_ rider is on any nested double-quote:
If the rider's source starts with """""", say yes.
Say no.

To decide if a_ rider is on any possessive:
If the rider's source is blank, say no.
If the rider's source's first's target is not the single-quote byte, say no.
If the rider is on any possessive (type 1 - single-quote, s, non-glom-byte), say yes.
If the rider is on any possessive (type 2 - preceding s, single-quote, non-glom-byte), say yes.
Say no.

To decide if a_ rider is on any possessive (type 1 - single-quote, s, non-glom-byte):
If the rider's source does not start with "'s", say no.
Privatize the rider.
Add 2 to the rider's source's first.
If the rider's source is blank, say yes.
If the rider's source's first's target is not any glom byte, say yes.
Say no.

To decide if a_ rider is on any possessive (type 2 - preceding s, single-quote, non-glom-byte):
Privatize the rider.
If the rider's source's first is the rider's original substring's first, say no.
Subtract 1 from the rider's source's first.
If the rider's source's first's target is not the little-s byte or the big-s byte, say no.
Add 2 to the rider's source's first.
If the rider's source is blank, say yes.
If the rider's source's first's target is not any glom byte, say yes.
Say no.

To decide if a_ rider is on any simile: \ added for invisible turtle project ***
Privatize the rider.
If the rider's token is "LIKE", say yes.
If the rider's token is not "as_", say no.
Move the rider (compiler rules).
If the rider's token is any indefinite article, say no.
Say yes.

To decide if a_ rider is the start of any function:
If the compiler's abort flag is set, say no.
If the rider's token is not "put", say no.
Privatize the rider.
Move the rider (compiler rules).
If the rider's token is not any article, say no.
Move the rider (compiler rules).
Scan a_ name given the rider.
If the rider's token is any possessive, say yes.
Say no.

To decide if a_ string is any contraction giving another string (portuguese rules - "no"):
If the string is not "no", say no.
If the other string is "say", say no.
If the other string is "diga", say no.
If the other string is "dizer", say no.
Say yes.

To decide if a_ string ends with any consonant and another string:
Slap a_ substring on the string.
Subtract the other string's length from the substring's last.
If the substring is blank, say no.
If the substring's last's target is not any consonant, say no.
If the string does not end with the other string, say no.
Say yes.

To decide if a_ string ends with any vowel and another string:
Slap a_ substring on the string.
Subtract the other string's length from the substring's last.
If the substring is blank, say no.
If the substring's last's target is not any vowel, say no.
If the string does not end with the other string, say no.
Say yes.

To decide if a_ string ends with any consonant:
If the string is blank, say no.
If the string's last's target is not any consonant, say no.
Say yes.

To decide if a_ string ends with any vowel:
If the string is blank, say no.
If the string's last's target is not any vowel, say no.
Say yes.

To decide if a_ string is any plus:
\PAL
If the string is "mais", say yes.
\CAL
If the string is "plus", say yes.
Say no.

To decide if a_ string is any put:
\PAL
If the string is "pôr", say yes.
\# Não precisa porque está como sinônimo: ver "To append a_ string to another string giving a_ third string (portuguese contractions and synonyms rules)"
\If the string is "colocar", say yes. 
\CAL
If the string is "put", say yes.
Say no.

To decide if a_ string is any minus:
\PAL
If the string is "menos", say yes.
\CAL
If the string is "minus", say yes.
Say no.

To decide if a_ string is any times:
\PAL
If the string is "vezes", say yes.
\CAL
If the string is "times", say yes.
Say no.

To decide if a_ string is any divided:
\PAL
If the string is "dividido", say yes.
\CAL
If the string is "divided", say yes.
Say no.

To decide if a_ string is any by:
\PAL
If the string is "por", say yes.
\CAL
If the string is "by", say yes.
Say no.

To decide if a_ string is any then:
\PAL
\# operador de concatenação de strings tipo: "abc" then "def" = "abcdef"
\# em português poderia ser: "mais", "depois", "então" ou "em seguida". 
If the string is "depois", say yes.
If the string is "então", say yes.
\CAL
If the string is "then", say yes.
Say no.

To decide if a_ string is any has:
\PAL
If the string is "tem", say yes.
If the string is "têm", say yes.
\CAL
If the string is "has", say yes.
If the string is "have", say yes.
Say no.

To decide if a_ string is any is:
\PAL
If the string is "é", say yes.
If the string is "está", say yes.
If the string is "são", say yes.
If the string is "estão", say yes.
\CAL
If the string is "is", say yes.
If the string is "are", say yes.
Say no.

To decide if a_ string is any equal:
\PAL
If the string is "igual", say yes.
\CAL
If the string is "equal", say yes.
Say no.

To decide if a_ string is any with:
\PAL
If the string is "com", say yes.
\CAL
If the string is "with", say yes.
Say no.

To decide if a_ string is any article:
If the string is any indefinite article, say yes.
If the string is any definite article, say yes.
Say no.

To decide if a_ string is any conjunction:
\PAL
\# verificar depois o uso dos termos: "ambos", "mas" e "nenhum"
If the string is "e", say yes.
If the string is "ou", say yes.
If the string is "nem", say yes.
\CAL
If the string is "and", say yes.
If the string is "both", say yes.
If the string is "but", say yes.
If the string is "either", say yes.
If the string is "neither", say yes.
If the string is "nor", say yes.
If the string is "or", say yes.
Say no.

To decide if a_ string is any to:
\PAL
If the string is "a", say yes. \ this is questionable
\CAL
If the string is "to", say yes.
Say no.

To decide if a_ string is any and:
\PAL
If the string is "e", say yes.
\CAL
If the string is "and", say yes.
Say no.

To decide if a_ string is any reverse-possessive function into:
\PAL
If the string is "em", say yes.
\CAL
If the string is "into", say yes.
Say no.

To decide if a_ string is any decider literal:
\PAL
If the string is "sim", say yes.
If the string is "não", say yes.
\CAL
If the string is "yes", say yes.
If the string is "yep", say yes.
If the string is "yea", say yes.
If the string is "no", say yes.
If the string is "nay", say yes.
If the string is "nope", say yes.
Say no.

To decide if a_ string is any positive decider literal:
\PAL
If the string is "sim", say yes.
\CAL
If the string is "yes", say yes.
If the string is "yep", say yes.
If the string is "yea", say yes.
Say no.

To decide if a_ string is any negative decider literal:
\PAL
If the string is "não", say yes.
\CAL
If the string is "no", say yes.
If the string is "nay", say yes.
If the string is "nope", say yes.
Say no.

To decide if a_ string is any hex literal:
If the string is blank, say no.
If the string's first's target is the dollar-sign byte, say yes.
Say no.

To decide if a_ string is any definite article:
\PAL
If the string is "o", say yes.
If the string is "a", say yes.
If the string is "os", say yes.
If the string is "as", say yes.
\CAL
If the string is "the", say yes.
Say no.

To decide if a_ rider is on any definite article:
If the rider is on any portuguese to, say no.
If the rider's token is not any definite article, say no.
Say yes.

To decide if a_ rider is on any indefinite article:
If the rider is on any portuguese to, say no.
If the rider's token is not any indefinite article, say no.
Say yes.

To decide if a_ rider is on any portuguese to:
If the rider's token is not "a", say no.
Privatize the rider. Move the rider (compiler rules).
If the rider's token is any article, say yes.
Say no.

To decide if a_ string is any indefinite article:
\PAL
If the string is any portuguese indefinite article, say yes.
\CAL
If the string is any english indefinite article, say yes.
Say no.

To decide if a_ string is any portuguese indefinite article:
\PAL
If the string is "um", say yes.
If the string is "uma", say yes.
If the string is "outro", say yes.
If the string is "outra", say yes.
If the string is "algum", say yes.
If the string is "alguma", say yes.
If the string is "alguns", say yes.
If the string is "algumas", say yes.
Say no.

To decide if a_ string is any english indefinite article:
\CAL
If the string is "a_", say yes.
If the string is "an", say yes.
If the string is "another", say yes.
If the string is "some", say yes.
Say no.

To decide if a_ string is any literal:
If the string is any pointer literal, say yes.
If the string is any numeric literal, say yes.
If the string is any string literal, say yes.
\If the string is any flag literal, say yes. ***
If the string is any hex literal, say yes.
Say no.

To decide if a_ string is any mark:
If the string's length is not 1, say no.
If the string's first's target is any mark, say yes.
Say no.

To decide if a_ rider is on any monikette string:
If the rider's token is blank, say no.
If the rider is on any definite article, say no.
If the rider is on any indefinite article, say no.
If the rider's token is any possessive, say no.
If the rider's token is any literal, say no.
If the rider's token is any mark, say no.
If the rider's token is any symbol, say no.
Say yes.

To decide if a_ string is any called:
\PAL
If the string is "chamado", say yes.
If the string is "chamada", say yes.
\CAL
If the string is "called", say yes.
Say no.

To decide if a_ string is any reference:
\PAL
If the string is "(referência)", say yes.
\CAL
If the string is "(reference)", say yes.
Say no.

To decide if a_ rider is on any name ender: \ compare with name starter
If the rider's token is any mark, say yes.
If the rider's token is any symbol, say yes.
If the rider's token is any article, say yes.
If the rider's token is any conjunction, say yes.
If the rider's token is any possessive, say yes.
If the rider is on any reverse-possessive, say yes.
If the rider's token is any verb, say yes.
If the rider's token is any operator, say yes.
If the rider is on any preposition, say yes.
If the rider's token is any qualifier, say yes.
If the rider's token is any literal, say yes.
If the rider's token is any called, say yes.
If the rider's token is any equal, say yes.
If the rider's token is blank, say yes.
\ Portuguese trouble makers
If the rider's token is any negative word, say yes.
Say no.

To decide if a_ rider is on any name starter: \ compare with name ender
If the rider's token is any mark, say no.
If the rider's token is any symbol, say no.
If the rider's token is any article, say no.
If the rider's token is any conjunction, say yes.
If the rider's token is any possessive, say no.
If the rider's token is any verb, say yes.
If the rider's token is any operator, say yes.
If the rider is on any preposition, say yes.
If the rider's token is any qualifier, say no.
If the rider's token is any literal, say no.
If the rider's token is any called, say yes.
If the rider's token is any equal, say yes.
If the rider's token is blank, say no.
Say yes.

To decide if a_ string is any negative word:
\SAL
If the string is "não", say yes.
If the string is "nada", say yes.
\CAL
If the string is "no", say yes.
If the string is "not", say yes.
If the string is "cannot", say yes.
If the string is "nothing", say yes.
If the string ends with "n't", say yes.
Say no.

To decide if a_ string is any operator:
\PAL
If the string is "mais", say yes.
If the string is "menos", say yes.
If the string is "vezes", say yes.
If the string is "dividido", say yes.
If the string is "depois", say yes.
If the string is "então", say yes.
\CAL
If the string is "plus", say yes.
If the string is "minus", say yes.
If the string is "times", say yes.
If the string is "divided", say yes.
If the string is "then", say yes.
Say no.

To decide if a_ string is any pause:
\PAL
If the string is "e", say yes.
If the string is "ou", say yes.
\CAL
If the string is "and", say yes.
If the string is "or", say yes.
\default
If the string is ",", say yes.
If the string is ";", say yes.
Say no.

To decide if a_ string is any pointer literal:
\PAL
If the string is "nulo", say yes.
\CAL
If the string is "nil", say yes.
Say no.

To decide if a_ string is any possessive:
If the string is "'s", say yes.
If the string is "'", say yes.
Say no.

To decide if a_ rider is on any preposition:
Put the rider's token into a_ substring.
\PAL
If the rider is on any portuguese to, say yes. \ "a" followed by an article is "to" in portuguese
If the substring is "abaixo", say yes. \ down
If the substring is "acima", say yes. \ up
If the substring is "ante", say yes. \ before
If the substring is "antes", say yes. \ before
If the substring is "perante", say yes. \ before
If the substring is "debaixo", say yes. \ below
If the substring is "sob", say yes. \ below
If the substring is "acerca", say yes. \ near
If the substring is "próximo", say yes. \ near
If the substring is "perto", say yes. \ near
If the substring is "com", say yes. \ with
If the substring is "como", say yes. \ as
If the substring is "contra", say yes. \ against
\ If the substring is "de", say yes. \ reverse-possessive indicator 
If the substring is "dada", say yes. \ given
If the substring is "dado", say yes. \ given
If the substring is "dando", say yes. \ given
If the substring is "gerando", say yes. \ giving
If the substring is "resultando", say yes. \ giving
If the substring is "retornando", say yes. \ giving
If the substring is "direita", say yes. \ right
If the substring is "desde", say yes. \ since
If the substring is "depois", say yes. \ after
If the substring is "durante", say yes. \ during
If the substring is "em", say yes. \ in
If the substring is "entre", say yes. \ between
If the substring is "até", say yes. \ until
If the substring is "esquerda", say yes. \ left
If the substring is "mediante", say yes. \ through
If the substring is "para", say yes. \ to
If the substring is "por", say yes. \ by
If the substring is "segundo", say yes. \ according
If the substring is "sem", say yes. \ without
If the substring is "então", say yes.
If the substring is "sobre", say yes. \ on
If the substring is "após", say yes. \ after
If the substring is "depois", say yes. \ after
If the substring is "usando", say yes. \ using
If the substring is "versus", say yes. \ versus
If the substring is "via", say yes. \ via
If the substring is "enquanto", say yes. \ while
If the substring is "redefinindo", say yes. \# 'at' na redefinição de campos  
\CAL
If the substring is "about", say yes.
If the substring is "above", say yes.
If the substring is "across", say yes.
If the substring is "after", say yes.
If the substring is "against", say yes.
If the substring is "all", say yes.
If the substring is "alone", say yes.
If the substring is "along", say yes.
If the substring is "among", say yes.
If the substring is "any", say yes.
If the substring is "anywhere", say yes.
If the substring is "around", say yes.
If the substring is "as_", say yes.
If the substring is "at", say yes.
If the substring is "away", say yes.
If the substring is "back", say yes.
If the substring is "backward", say yes.
If the substring is "backwards", say yes.
If the substring is "before", say yes.
If the substring is "beginning", say yes.
If the substring is "behind", say yes.
If the substring is "below", say yes.
If the substring is "beneath", say yes.
If the substring is "beside", say yes.
If the substring is "between", say yes.
If the substring is "beyond", say yes.
If the substring is "bigger", say yes.
If the substring is "by", say yes.
If the substring is "close", say yes.
If the substring is "deep", say yes.
If the substring is "diagonally", say yes.
If the substring is "down", say yes.
If the substring is "downward", say yes.
If the substring is "ending", say yes.
If the substring is "everywhere", say yes.
If the substring is "except", say yes.
If the substring is "finishing", say yes.
If the substring is "facing", say yes.
If the substring is "for_", say yes.
If the substring is "forward", say yes.
If the substring is "from", say yes.
If the substring is "given", say yes.
If the substring is "giving", say yes.
If the substring is "high", say yes.
If the substring is "in", say yes.
If the substring is "inside", say yes.
If the substring is "into", say yes.
If the substring is "en", say yes.
If the substring is "larger", say yes.
If the substring is "leaning", say yes.
If the substring is "left", say yes.
If the substring is "leftward", say yes.
If the substring is "leftways", say yes.
If the substring is "like", say yes.
If the substring is "limiting", say yes.
If the substring is "long", say yes.
If the substring is "near", say yes.
If the substring is "of", say yes.
If the substring is "off", say yes.
If the substring is "on", say yes.
If the substring is "only", say yes.
If the substring is "onto", say yes.
If the substring is "out", say yes.
If the substring is "outside", say yes.
If the substring is "over", say yes.
If the substring is "past", say yes.
If the substring is "pointing", say yes.
If the substring is "returning", say yes.
If the substring is "right", say yes.
If the substring is "rightward", say yes.
If the substring is "rightways", say yes.
If the substring is "shorter", say yes.
If the substring is "sideway", say yes.
If the substring is "sideways", say yes.
If the substring is "similar", say yes.
If the substring is "smaller", say yes.
If the substring is "somewhere", say yes.
If the substring is "slantwise", say yes.
If the substring is "slantway", say yes.
If the substring is "slantways", say yes.
If the substring is "starting", say yes.
If the substring is "tall", say yes.
If the substring is "taller", say yes.
If the substring is "thru", say yes.
If the substring is "through", say yes.
If the substring is "throughout", say yes.
If the substring is "to", say yes.
If the substring is "toward", say yes.
If the substring is "towards", say yes.
If the substring is "under", say yes.
If the substring is "underneath", say yes.
If the substring is "until", say yes.
If the substring is "unto", say yes.
If the substring is "up", say yes.
If the substring is "upward", say yes.
If the substring is "upon", say yes.
If the substring is "using", say yes.
If the substring is "via", say yes.
If the substring is "while", say yes.
If the substring is "wide", say yes.
If the substring is "with", say yes.
If the substring is "within", say yes.
If the substring is "without", say yes.
Say no.

To decide if a_ string is any qualifier:
If the string is blank, say no.
If the string's first's target is the left-paren byte, say yes.
Say no.

To decide if a_ rider is on any reverse-possessive:
Privatize the rider.
\CAL
If the rider's token is "uv", say yes.
\PAL
If the rider's token is not "de", say no.
Move the rider (compiler rules).
If the rider's token is any article, say yes.
Say no.

To decide if a_ string is any string literal:
If the string is blank, say no.
If the string's first's target is the double-quote byte, say yes.
Say no.

To decide if a_ string is any symbol:
If the string's length is not 1, say no.
If the string's first's target is any symbol, say yes.
Say no.

To decide if a_ string is any verb:
\PAL
If the string is "deve", say yes. \ it "should" should not \ shouldn't: (3ps)
If the string is "devem", say yes. \ they "should" should not \ shouldn't: (3pp)
If the string is "estar", say yes. \ "be"
If the string is "ser", say yes. \ "be"
If the string is "fôr", say yes. \ "be"
If the string is "forem", say yes. \ "be"
If the string is "estiver", say yes. \ "be"
If the string is "estiverem", say yes. \ "be"
If the string is "é", say yes. \ "is" is not \ isn't: "to be" conjugated in the singular third person (3ps) present, perm.
If the string is "está", say yes. \ "is" is not \ isn't: "to be" conjugated in the singular third person (3ps) present, temp.
If the string is "são", say yes. \ "are" are not \ aren't: "to be" conjugated in the plural third person (3pp) present, perm.
If the string is "estão", say yes. \ "are" are not \ aren't: "to be" conjugated in the plural third person (3pp) present, temp.
If the string is "foi", say yes. \ "was" was not \ wasn't: only used in Noodle (3ps) past, perm.
If the string is "estava", say yes. \ "was" was not \ wasn't: only used in Noodle (3ps) past, temp.
If the string is "foram", say yes. \ "were" were not \ weren't?: not used in CAL (3pp) past, perm.
If the string is "estavam", say yes. \ "were" were not \ weren't?: not used in CAL (3pp) past, temp.
If the string is "será", say yes. \ it "will" will not \ won't: not used in CAL (3ps) past, perm.
If the string is "estará", say yes. \ it "will" will not \ won't: not used in CAL (3ps) past, temp.
If the string is "serão", say yes. \ they "will" will not \ won't: not used in CAL (3pp) past, perm.
If the string is "estarão", say yes. \ they "will" will not \ won't: not used in CAL (3pp) past, temp.
If the string is "supera", say yes. \ beats, exceeds
If the string is "superam", say yes. \ beats, exceeds
If the string is "excede", say yes. \ beats, exceeds
If the string is "excedem", say yes. \ beats, exceeds
If the string is "pode", say yes. \ it "can" cannot \ can't: only case in CAL (3ps)
If the string is "podem", say yes. \ they "can" cannot \ can't: not used in CAL (3pp) added just in case 
If the string is "poderia", say yes. \ it "could" could not \ couldn't: not used in CAL (3ps) added just in case
If the string is "poderia", say yes. \ they "could" could not \ couldn't:  not used in CAL (3pp) added just in case
If the string is "podemos", say yes. \ we "could" could not \ couldn't: only once in Noodle (1pp) "To decide if we could find a_ pointer:"
If the string is "tem", say yes. \ it "has" used in type definitions; (3ps) present
If the string is "têm", say yes. \ they "have" used in type definitions; (3pp) present
If the string is "ter", say yes. \ used in type definitions
\\ trouble makers
If the string is "inicia", say yes. \ "begins" does not begin \ doesn't begin
If the string is "começa", say yes. \ "starts" does not start \ doesn't start: I hear a_ yes
If the string is "começar", say yes. \ "starts" does not start \ doesn't start: I hear a_ yes
If the string is "termina", say yes. \ "ends" does not end \ doesn't end
If the string is "terminar", say yes. \ "ends" does not end \ doesn't end
If the string is "finaliza", say yes. \ "ends" does not end \ doesn't end
If the string is "finalizar", say yes. \ "ends" does not end \ doesn't end
If the string is "parece", say yes. \ "looks" does not look \ doesn't look
If the string is "necessita", say yes. \ "needs" does not need \ doesn't need: not used in CAL
If the string is "necessitar", say yes. \ "needs" does not need \ doesn't need: not used in CAL
If the string is "requer", say yes. \ "needs" does not need \ doesn't need: not used in CAL
\CAL
If the string is "are", say yes. \ are not \ aren't
If the string is "be", say yes. \
If the string is "can", say yes. \ cannot \ can't
If the string is "cannot", say yes. 
If the string is "could", say yes. \ could not \ couldn't
If the string is "do", say yes. \ do not \ don't
If the string is "does", say yes. \ does not \ doesn't
If the string is "is", say yes. \ is not \ isn't
If the string is "may", say yes. \ may not \ mayn't
If the string is "should", say yes. \ should not \ shouldn't
If the string is "was", say yes. \ was not \ wasn't
If the string is "will", say yes. \ will not \ won't
If the string is "would", say yes. \ would not \ wouldn't
If the string is "has", say yes. \ used in type definitions
If the string is "have", say yes. \ used in type definitions
If the string ends with "n't", say yes.
\\ trouble makers
If the string is "begins", say yes. \ does not begin \ doesn't begin
If the string is "ends", say yes. \ does not end \ doesn't end
If the string is "looks", say yes. \ does not look \ doesn't look
If the string is "needs", say yes. \ does not need \ doesn't need
If the string is "starts", say yes. \ does not start \ doesn't start
Say no.

To decide if a_ string is the start of any definition:
\PAL
If the string is "para", say yes.
If the string is "pra", say yes.
\CAL
If the string is "to", say yes.
\default
If the string is any indefinite article, say yes.
If the string is any definite article, say yes.
Say no.

To decide if a_ string is any conditional:
\PAL
If the string is "se", say yes.
If the string is "quando", say yes.
\CAL
If the string is "if", say yes.
Say no.

To decide if a_ string is any privatize:
\PAL
If the string is "privatizar", say yes.
\If the string is "privatize", say yes. \# modo imperativo
\CAL
If the string is "privatize", say yes.
Say no.

To decide if a_ string is any loop:
\PAL
If the string is "volta", say yes.
If the string is "laço", say yes. \# muito usado em pseudo-codigo
\CAL
If the string is "loop", say yes.
Say no.

To decide if a_ string is any break:
\PAL
If the string is "interromper", say yes.
If the string is "cessar", say yes.
If the string is "romper", say yes.
\CAL
If the string is "break", say yes.
Say no.

To decide if a_ string is any exit:
\PAL
If the string is "sair", say yes.
\CAL
If the string is "exit", say yes.
Say no.

To decide if a_ string is any repeat:
\PAL
If the string is "voltar", say yes.
If the string is "repetir", say yes. \# muito usado em pseudo-codigo
\CAL
If the string is "repeat", say yes.
Say no.

To decide if a_ string is any say:
\PAL
If the string is "diga", say yes. \# modo imperativo
If the string is "dizer", say yes. \# modo infinitivo opcional.
\CAL
If the string is "say", say yes.
Say no.

To decide if a_ string is any decide:
\PAL
If the string is "decidir", say yes.
\CAL
If the string is "decide", say yes.
Say no.

To decide if a_ string is any call:
\PAL
If the string is "chamar", say yes.
\CAL
If the string is "call", say yes.
Say no.

To decide if a_ string is any point:
\PAL
If the string is "apontar", say yes.
\CAL
If the string is "point", say yes.
Say no.

To decide if a_ string is any employ:
\PAL
If the string is "empregar", say yes.
\CAL
If the string is "employ", say yes.
Say no.

To decide if a_ string is the start of any expression:
If the string is any sign, say yes.
If the string is any indefinite article, say yes.
If the string is any definite article, say yes.
If the string is any literal, say yes.
Say no.

To decide if a_ string is the start of any global:
If the string is any definite article, say yes.
Say no.

To decide if a_ string is the start of any new local:
If the string is any indefinite article, say yes.
Say no.

To decide if a_ string is the start of any optional info:
\PAL
If the string is "com", say yes.
\CAL
If the string is "to", say yes.
If the string is "with", say yes.
Say no.

To decide if a_ string is the start of any routine:
\PAL
If the string is "para", say yes.
If the string is "pra", say yes.
\CAL
If the string is "to", say yes.
Say no.

To decide if a_ string is the start of any statement:
If the string is the start of any definition, say no.
If the string is any literal, say no.
If the string is any mark, say no.
If the string is blank, say no.
Say yes.

To decide if a_ string is the start of any type:
If the string is any indefinite article, say yes.
Say no.

To decide if a_ string is the start of any variable:
If the string is any definite article, say yes.
Say no.

To decide if a_ string has any stressed vowel:
Privatize the string.
Loop.
If the string is blank, say no.
If the string's last's target is any stressed vowel, say yes.
Subtract 1 from the string's last.
Repeat.

To decide if a_ term is empty:
If the term's variable is not nil, say no.
If the term's phrase is not blank, say no.
Say yes.

To decide if a_ type can be reduced to a_ string using the base name:
If the type is nil, say no.
If the type's name is the string, say yes.
If the type's cooking flag is set, say no.
Set the type's cooking flag.
Find a_ base type given the type's base name and the type index.
If the base type is nil, clear the type's cooking flag; say no.
If the base type can be reduced to the string using the base name, clear the type's cooking flag; say yes.
Clear the type's cooking flag.
Say no.

To decide if a_ type can be reduced to a_ type name:
If the type is nil, say no.
Privatize the type.
Loop.
If the type is nil, say no.
If the type's name is the type name, say yes.
If the type's base type is the type, say no.
Put the type's base type into the type.
Repeat.

To decide if a_ type is any built-in type:
If the type is nil, say no.
If the type is the type's base type, say yes.
Say no.

To decide if a_ type is value pushable:
If the type is nil, say no.
If the type is nil, say no.
If the type's length is 4, say yes.
If the type's length is 2, say yes.
If the type's length is 1, say yes.
Say no.

To decide if a_ type should be finalized:
If the type is nil, say no.
If the type can be reduced to "substring", say no.
If the type can be reduced to "string", say yes.
If the type's fields should be finalized, say yes.
Say no.

To decide if a_ type should be forgotten:
If the type is nil, say no.
If the type's name is "thing", say no.
If the type's name is "coisa", say no.
If the type's name is "things", say no.
If the type can be reduced to "things", say yes.
If the type can not be reduced to "pointer", say no.
If the type's target type is nil, say no.
If the type's target type cannot be reduced to "pointer", say yes.
If the type's target type should not be forgotten, say no.
Say yes.

To decide if a_ variable is duplicated in some variables:
Get another variable from the variables.
If the other variable is nil, say no.
If the other variable's name is blank, repeat.
If the other variable is the variable, repeat.
If the other variable's name is the variable's name, say yes.
Repeat.

The dereference tag is a_ tag equal to 5.

a_ dosheader is a_ record with
a_ wyrd called signature,
a_ wyrd called numberofbytesonlastpage,
a_ wyrd called numberofpages,
a_ wyrd called relocuss,
a_ wyrd called sizeofheaderinparagraphs,
a_ wyrd called minimumextraparagraphs,
a_ wyrd called maximumextraparagraphs,
a_ wyrd called initialrelativess,
a_ wyrd called initialsp,
a_ wyrd called initialchecksum,
a_ wyrd called initialip,
a_ wyrd called initialirelativecs,
a_ wyrd called addressofrelocationtableinfile,
a_ wyrd called overlynumber,
8 bytes called resveredbytes,
a_ wyrd called oemidentifier,
a_ wyrd called oeminfo,
20 bytes called reservedwords,  
a_ number called addressofpeheaderinfile.

To eliminate duplicate nicknames from some variables:
Create an index given 101.
Eliminate duplicate nicknames from the variables given the index.
Destroy the index.

To eliminate duplicate nicknames from some variables given an index:
If the index is nil, exit.
Loop.
Get a_ variable from the variables.
If the variable is nil, exit.
Eliminate duplicate nicknames given the variable and the index.
Repeat.

To eliminate duplicate nicknames given a_ variable and an index:
If the variable is nil, exit.
If the index is nil, exit.
Find another variable given the variable's nickname and the index.
If the other variable is nil, find the other variable given the variable's name and the index.
If the other variable is nil, index the variable given the variable's nickname and the index; exit.
Clear the other variable's nickname.
Clear the variable's nickname.

The end if tag is a_ tag equal to 6.

An entry is a_ thing with
a_ name address,
a_ thunk address,
a_ name,
An address.

The epilog tag is a_ tag equal to 7.

The exit tag is a_ tag equal to 8.

An expression is a_ term.

To extend a_ string with another string:
If the other string is blank, exit.
If the string is not blank, append the space byte to the string.
Append the other string to the string.

a_ field is a_ variable.

a_ field term has
a_ dereference flag,
a_ field (reference),
a_ function routine (reference),
a_ push flag.

To finalize the compiler:
Destroy the utility index.
Destroy the routine index.
Destroy the literal index.
Destroy the global index.
Destroy the type index.
Destroy the imports.
Destroy the routines.
Destroy the literals.
Destroy the globals.
Destroy the types.
Destroy the source files.

The finalize tag is a_ tag equal to 9.

To find an entry given a_ string and some entries:
Void the entry.
Loop.
Get the entry from the entries.
If the entry is nil, exit.
If the entry's name is the string, exit.
Repeat.

To find a_ field term given a_ phrase and a_ type and a_ name:
Clear the field term.
Find the field term given the type and the name.
If the field term's field is not nil, exit.
If the phrase is not blank, find a_ routine given "put" and the phrase and "'s " then the name and "into".
If the routine is not nil, put the routine into the field term's function; exit.
If the type is nil, exit.
Find the routine given "put" and the type and "'s " then the name and "into".
If the routine is not nil, set the field term's push flag; put the routine into the field term's function; exit.
\  code below for looking deep within pointers - a_ debatable feature
\  if the type's target type is not nil, find the routine given "put" and the type's target type and "'s " then the name and "into".
\  if the routine is not nil, set the field term's dereference flag; put the routine into the field term's function; exit.

To find a_ field term given a_ type and a_ name:
If the type is nil, exit.
Find a_ field given the name and the type's fields.
If the field is not nil, put the field into the field term's field; exit.
If the type's target type is not nil, find the field given the name and the type's target type's fields.
If the field is not nil, set the field term's dereference flag; put the field into the field term's field; exit.

To find a_ fragment given another fragment and a_ tag:
Put the other fragment into the fragment.
Loop.
If the fragment is nil, exit.
If the fragment's tag is the tag, exit.
Put the fragment's next into the fragment.
Repeat.

To find a_ fragment given another fragment and a_ tag (backwards):
Put the other fragment into the fragment.
Loop.
If the fragment is nil, exit.
If the fragment's tag is the tag, exit.
Put the fragment's previous into the fragment.
Repeat.

To find an import given a_ string:
Void the import.
Loop.
Get the import from the imports.
If the import is nil, exit.
If the import's name is the string, exit.
Repeat.

To find a_ path and a_ row# given a_ byte pointer:
Clear the path.
Put 0 into the row#.
Find a_ source file given the byte pointer.
If the source file is nil, exit.
Put the source file's path into the path.
Find the row# given the source file and the byte pointer.

To find a_ routine given a_ moniker and a_ monikette and an index:
If the monikette is nil, exit.
Void the routine.
Privatize the moniker.
Put the monikette's type into the monikette's current type.
Slap the monikette's current substring on the monikette's string.
Loop.
Append the monikette to the moniker (while bubbling).
Find a_ refer given the moniker and the index.
If the refer is not nil, put the refer's pointer into the routine.
If the refer is not nil, find the routine given the moniker and the monikette's next and the index.
If the routine is not nil, break.
Bubble the monikette.
If the monikette is bubbled out, break.
Put the original moniker into the moniker.
Repeat.

To find a_ routine given some monikettes:
Void the routine.
Find the routine given a_ moniker and the monikettes' first and the routine index.

To find a_ routine given a_ string and another string and a_ third string and a_ fourth string:
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the other string.
Add a_ third monikette to the monikettes given the third string.
Add a_ fourth monikette to the monikettes given the fourth string.
Find the routine given the monikettes.
Destroy the monikettes.

To find a_ routine given a_ string and a_ type:
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the type.
Find the routine given the monikettes.
Destroy the monikettes.

To find a_ routine given a_ string and a_ type and another string and another type:
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the type.
Add a_ third monikette to the monikettes given the other string.
Add a_ fourth monikette to the monikettes given the other type.
Find the routine given the monikettes.
Destroy the monikettes.

To find a_ routine given a_ string and a_ type and another string and a_ third string:
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the type.
Add a_ third monikette to the monikettes given the other string.
Add a_ fourth monikette to the monikettes given the third string.
Find the routine given the monikettes.
Destroy the monikettes.

To find a_ routine given a_ string and a_ type and another string and a_ third string and a_ fourth string and a_ fifth string:
Add a_ monikette to some monikettes given the string.
Add another monikette to the monikettes given the type.
Add a_ third monikette to the monikettes given the other string.
Add a_ fourth monikette to the monikettes given the third string.
Add a_ fifth monikette to the monikettes given the fourth string.
Add a_ sixth monikette to the monikettes given the fifth string.
Find the routine given the monikettes.
Destroy the monikettes.

To find a_ row# given a_ source file and a_ byte pointer:
If the byte pointer is nil, put 0 into the row#; exit.
Slap a_ substring on the source file's buffer.
Put 1 into the row#.
Loop.
If the substring is blank, exit.
If the substring's first is the byte pointer, exit.
If the substring's first's target is the return byte, add 1 to the row#.
Add 1 to the substring's first.
Repeat.

To find a_ source file given a_ byte pointer:
If the byte pointer is nil, void the source file; exit.
Loop.
Get the source file from the source files.
If the source file is nil, exit.
If the byte pointer is less than the source file's buffer's first, repeat.
If the byte pointer is greater than the source file's buffer's last, repeat.

To find a_ type and a_ nickname given a_ name:
Void the type.
Clear the nickname.
Find the type and the nickname given the name (forward).
If the type is not nil, exit.
Find the type and the nickname given the name (backward).

To find a_ type and a_ nickname given a_ name (backward):
Void the type.
Clear the nickname.
Slap a_ substring on the name.
Loop.
If the substring is blank, exit.
Find the type given the substring and the type index.
If the type is not nil, break.
Skip to the previous word in the substring.
Repeat.
Put the name's last into another substring's last.
Put the substring's last plus 2 into the other substring's first.
If the other substring is not blank, put the other substring into the nickname.
If the other substring is blank, put the substring into the nickname.

To find a_ type and a_ nickname given a_ name (forward):  \ original - no change
Void the type.
Clear the nickname.
Slap a_ substring on the name.
Loop.
If the substring is blank, exit.
Find the type given the substring and the type index.
If the type is not nil, break.
Skip to the next word in the substring.
Repeat.
Put the name's first into another substring's first.
Put the substring's first minus 2 into the other substring's last.
If the other substring is not blank, put the other substring into the nickname.
If the other substring is blank, put the substring into the nickname.

To find a_ variable given a_ name:
If the current routine is nil, void the variable; exit.
Find the variable given the name and the current routine's locals.
If the variable is not nil, exit.
Find the variable given the name and the current routine's parameters.
If the variable is not nil, exit.
Find the variable given the name and the global index.
If the variable is not nil, exit.
Find the variable given the name and the literal index.

To find a_ variable given a_ name and some variables:
Void the variable.
Loop.
Get the variable from the variables.
If the variable is nil, exit.
If the variable's name is the name, exit.
If the variable's nickname is the name, exit.
Repeat.

a_ fragment is a_ thing with
a_ tag [break, call external, call indirect, call internal, dereference, end if, epilog, exit, finalize, increment, intel, jump false, load address, load eax, loop, not, prolog, push address, push value, save eax, repeat, routine address],
a_ variable (reference) [call indirect, dereference, increment, load address, load eax, pop, push address, push value, routine address, save eax],
Another variable (reference) [load address],
a_ routine (reference) [call internal, routine address],
An entry (reference) [call external],
a_ number [increment],
a_ flag [load eax],
An address,
a_ hex string called code.

To generate a_ name given a_ string:
Put the string into the name.
Add 1 to the compiler's name count.
Convert the compiler's name count to another string.
Append the other string to the name.

To get an address given a_ routine:
If the routine's address is not 0, put the routine's address into the address; exit.
Put -1 into the routine's address.
Find another routine given the routine's employs moniker and the routine index.
If the other routine is nil, abort with "Não consigo encontrar a rotina '" then the routine's employs moniker then "' que você está tentando usar." and the routine's locus; exit.
If the other routine's address is -1, abort with "Referência recursiva na cláusula usada." and the routine's locus; exit.
Get the address given the other routine.
Put the address into the routine's address.

To get a_ count given some imports (all entries plus markers):
Put 0 into the count.
Loop.
Get an import from the imports.
If the import is nil, exit.
Add the import's entries' count to the count.
Add 1 to the count.
Repeat.

a_ global body is a_ substring.

The global index is an index.

a_ global is a_ variable.

The globals are some globals.

The image base is an address equal to 4194304 [$00400000].

The import borough is a_ borough.

An import header is a_ record with
An address called original first thunk,
a_ number called timestamp,
An address called forwarder chain,
An address called name memory address,
An address called first thunk memory address.

An import is a_ thing with
a_ name address,
a_ header address,
a_ name,
An import header,
Some entries.

The imports are some imports.

The increment tag is a_ tag equal to 10.

To index a_ global:
If the compiler's abort flag is set, exit.
If the global is nil, exit.
If the global's name is in the global index, abort with "'" then the global's name then "' é uma duplicata de uma variável global." and the global's locus; exit.
Index the global given the global's name and the global index.

To index a_ literal:
If the compiler's abort flag is set, exit.
If the literal is nil, exit.
If the literal's name is in the literal index, abort with "Erro interno - indexando um literal" and the literal's locus; exit.
Index the literal given the literal's name and the literal index.

To index a_ partial moniker given an index (special):
Find a_ refer given the partial moniker and the index.
If the refer is not nil, exit.
Index the partial moniker in the index.

To index a_ routine for_ utility use:
If the compiler's abort flag is set, exit.
If the routine is nil, exit.
If the routine's function flag is set, exit.
If the routine's parameters' count is 0, exit.
Copy the routine's monikettes into some monikettes.
Reduce the monikettes for_ utility use.
Convert the monikettes to a_ moniker.
Destroy the monikettes.
If the moniker is in the routine index, exit.
Find a_ refer given the moniker and the utility index.
If the refer is not nil, put nil into the refer's pointer; exit.
Index the routine given the moniker and the utility index.

To index a_ routine given a_ moniker and an index (special):
Find a_ refer given the moniker and the index.
If the refer is not nil, put the routine into the refer's pointer; exit.
Index the routine given the moniker and the index.

To index a_ routine given some monikettes and an index:
If the routine is nil, exit.
Clear a_ partial moniker.
Loop.
Get a_ monikette from the monikettes.
If the monikette is nil, exit.
Append the monikette to the partial moniker.
If the monikette is the monikettes' last, break.
Index the partial moniker given the index (special).
Repeat.
Index the routine given the partial moniker as_ a_ moniker and the index (special).

To index some routines for_ utility use:
If the compiler's abort flag is set, exit.
Get a_ routine from the routines.
If the routine is nil, exit.
Index the routine for_ utility use.
Repeat.

To index a_ type:
If the type is nil, exit.
If the compiler's abort flag is set, exit.
Index the type given the type's name.

To index a_ type given a_ name:
If the type is nil, exit.
If the compiler's abort flag is set, exit.
Find an existing type given the name and the type index.
If the existing type is nil, index the type given the name and the type index; exit.
Put the type's locus into a_ locus.
If the locus is nil, put the existing type's locus into the locus. \ point the error to a_ type in the source code, not a_ generated type
Abort with "Acho que vi esse tipo '" then the name then "' em algum lugar antes; deve ser duplicado." and the locus.

The indexing utilities timer is a_ timer.

To initialize the compiler:

To initialize the compiler given a_ directory:
Put the directory into the compiler's directory.
Put 0 into the compiler's name count.
Clear the compiler's abort flag.
Clear the compiler's abort message.
Clear the compiler's abort path.
Put 0 into the compiler's abort row#.
Void the current routine.
Create the type index with 13001 [buckets]. \ was 4027
Create the global index with 13001 [buckets]. \ was 4027
Create the literal index with 13001 [buckets]. \ was 4027
Create the routine index with 13001 [buckets]. \ was 7919
Create the utility index with 13001 [buckets]. \ was 4027

To initialize a_ dosheader:
Put 23117 [$5A4D] into the dosheader's signature.
Put 64 [$0040] into the dosheader's addressofrelocationtableinfile.
Put 256 [$00000100] into the dosheader's addressofpeheaderinfile.

To initialize a_ pe header:
Initialize the pe header (standard header).
Initialize the pe header (optional header).
Initialize the pe header (version information).
Initialize the pe header (directories).
Initialize the pe header (import section).
Initialize the pe header (data section).
Initialize the pe header (code section).

To initialize a_ pe header (code section):
Copy bytes from "code  "'s first to the pe header's code section's name's whereabouts for_ 6.
Put the code borough's length into the pe header's code section's sizeinbytes.
Put the code borough's base into the pe header's code section's addressinmemory.
Put the code borough's length into the pe header's code section's sizeinfile.
Put the code borough's base into the pe header's code section's addressinfile.
Put -536870880 [$E0000020] into the pe header's code section's characteristics. \ executable, readable, writable, code object

To initialize a_ pe header (data section):
Copy bytes from "data  "'s first to the pe header's data section's name's whereabouts for_ 6.
Put the data borough's length into the pe header's data section's sizeinbytes.
Put the data borough's base into the pe header's data section's addressinmemory.
Put the data borough's length into the pe header's data section's sizeinfile.
Put the data borough's base into the pe header's data section's addressinfile.
Put -1073741760 [$C0000040] into the pe header's data section's characteristics. \ initialized, readable, writable

To initialize a_ pe header (directories):
Put 16 [$00000010] into the pe header's numberofdirectories.
Put the import borough's base into the pe header's imagedirectoryentryimportaddress.
Put the import borough's length into the pe header's imagedirectoryentryimportsize.

To initialize a_ pe header (import section):
Copy bytes from "idata "'s first to the pe header's idata section's name's whereabouts for_ 6.
Put the import borough's length into the pe header's idata section's sizeinbytes.
Put the import borough's base into the pe header's idata section's addressinmemory.
Put the import borough's length into the pe header's idata section's sizeinfile.
Put the import borough's base into the pe header's idata section's addressinfile.
Put -1073741760 [$C0000040] into the pe header's idata section's characteristics. \ initialized, readable, writable

To initialize a_ pe header (optional header):
Put 267 [$010B] into the pe header's magicnumber.
Put the code borough's length into the pe header's sizeofcodeinfile.
Put the data borough's length into the pe header's sizeofinitializeddatainfile.
Put 0 into the pe header's sizeofuninitializeddatainfile.
Find a_ routine given "~initialize before run and run and finalize after run" and the routine index.
If the routine is nil, abort with "Erro interno: não consegui encontrar a rotina de inicialização"; exit.
Put the routine's address minus the image base into the pe header's addressofentrypointinmemory.
Put the code borough's base into the pe header's addressofcodeinmemory.
Put the data borough's base into the pe header's addressofinitializeddatainmemory.
Put the image base into the pe header's imagebase.
Put 4096 [$00001000] into the pe header's memoryalignment.
Put 4096 [$00001000] into the pe header's filealignment.
Put 0 into the pe header's reserved.
Put the compiler's exe size into the pe header's sizeofimageinmemory.
Put 4096 [section base] into the pe header's sizeofallheadersinfile.
Put 0 into the pe header's checksum.
Put 0 into the pe header's dllcharacteristics.
Put 1048576 [$00100000] into the pe header's maxstack.
Put 16384 [$00004000] into the pe header's minstack.
Put 1048576 [$00100000] into the pe header's maxheap.
Put 16384 [$00004000] into the pe header's minheap.
Put 0 into the pe header's loaderflags.

To initialize a_ pe header (standard header):
Put 17744 [$00004550] into the pe header's signature.
Put 332 [$014C] into the pe header's machinetype.
Put 3 [$0003] into the pe header's numberofsections.
Put 0 into the pe header's timestamp.
Put 0 into the pe header's pointertosymboltable.
Put 0 into the pe header's numberofsymbols.
Put 224 [$00E0] into the pe header's sizeofoptionalheaderinbytes.
Put 33166 [$818E] into the pe header's characteristics.

To initialize a_ pe header (version information):
Put 0 into the pe header's majorlinkerversion.
Put 0 into the pe header's minorlinkerversion.
Put 4 [$0004] into the pe header's osmajorversion.
Put 0 [$0000] into the pe header's osminorversion.
Put 0 into the pe header's usermajorversion.
Put 0 into the pe header's userminorversion.
Put 4 [$0004] into the pe header's subsystemmajorversion.
Put 0 [$0000] into the pe header's subsystemminorversion.
Put 2 [$0002] into the pe header's subsystem.

The intel tag is a_ tag equal to 11.

An intermediate is a_ local.

The jump false tag is a_ tag equal to 12.

To link:
Round up borough sizes.
Initialize a_ dosheader.
Initialize a_ pe header.
Fill the compiler's exe with the null byte given the compiler's exe size.
Blurt the dosheader into the compiler's exe.
Blurt the pe header into the compiler's exe.
Blurt the imports into the compiler's exe.
Blurt the globals into the compiler's exe.
Blurt the literals into the compiler's exe.
Blurt the routines into the compiler's exe.

The linking timer is a_ timer.

To list:
Clear the compiler's listing.
List the compiler's abort message in the compiler's listing.
List the types under "TYPES:" in the compiler's listing.
List the globals under "GLOBALS:" in the compiler's listing.
List the literals under "LITERALS:" in the compiler's listing.
List the routines under "ROUTINES:" in the compiler's listing.
List the type index under "TYPE INDEX:" in the compiler's listing.
List the global index under "GLOBAL INDEX:" in the compiler's listing.
List the literal index under "LITERAL INDEX:" in the compiler's listing.
List the routine index under "ROUTINE INDEX:" in the compiler's listing.
List the utility index under "UTILITY INDEX:" in the compiler's listing.
List the imports under "IMPORTS:" in the compiler's listing.
List the source files under "SOURCE FILES:" in the compiler's listing.
List the timers under "TIMERS:" in the compiler's listing.
Write the compiler's listing to the compiler's listing path.

To list an abort message in a_ buffer:
If the abort message is blank, exit.
Append "COMPILE ABORTED - LISTING INCOMPLETE" to the buffer.
Advance the buffer (twice).
Append the abort message to the buffer.
Advance the buffer (twice).

To list a_ bucket in a_ buffer:
If the bucket's refers are empty, exit.
Append "/bucket" to the buffer (with separator).
Advance the buffer.
List the bucket's refers in the buffer.
Advance the buffer.

To list some entries in a_ buffer:
Get an entry from the entries.
If the entry is nil, exit.
List the entry in the buffer.
Repeat.

To list an entry in a_ buffer:
If the entry is nil, exit.
Append "/entry" to the buffer (with separator).
Append the entry's name to the buffer (with separator).
Append the entry's address to the buffer (as hex with separator).
Advance the buffer.

To list a_ fragment in a_ buffer:
Append "/fragment" to the buffer (with separator).
Append the fragment's tag to the buffer (as a_ fragment tag string with separator).
Append the fragment's variable to the buffer (with separator).
Append the fragment's other variable to the buffer (with separator).
Append the fragment's routine to the buffer (with separator).
Append the fragment's entry to the buffer (with separator).
Append the fragment's number to the buffer (as hex with separator).
Append the fragment's address to the buffer (as hex with separator).
Convert the fragment's code to a_ nibble string.
Append the nibble string to the buffer (with separator).
Advance the buffer.

To list some fragments in a_ buffer:
Get a_ fragment from the fragments.
If the fragment is nil, exit.
List the fragment in the buffer.
Repeat.

To list an import in a_ buffer:
If the import is nil, exit.
Append "/import" to the buffer (with separator).
Append the import's name to the buffer (with separator).
Advance the buffer.
List the import's entries in the buffer.
Advance the buffer.

To list some imports in a_ buffer:
Get an import from the imports.
If the import is nil, exit.
List the import in the buffer.
Repeat.

To list some imports under a_ string in a_ buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the imports are empty, exit.
List the imports in the buffer.

To list an index in a_ buffer:
Append "/" then the index's used bucket count then " buckets" to the buffer (with separator).
Append the index's count then " refers" to the buffer (with separator).
Advance the buffer (twice).
Loop.
Get a_ bucket given the index.
If the bucket is nil, exit.
List the bucket in the buffer.
Repeat.

To list an index under a_ string in a_ buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the index is empty, exit.
List the index in the buffer.

To list a_ refer in a_ buffer:
If the refer is nil, exit.
Append "/refer" to the buffer (with separator).
Append the refer's string to the buffer.
If the refer's pointer is nil, append "..." to the buffer.
Append "/" to the buffer.
Advance the buffer.

To list some refers in a_ buffer:
Get a_ refer from the refers.
If the refer is nil, exit.
List the refer in the buffer.
Repeat.

To list a_ routine in a_ buffer:
If the routine is nil, exit.
Append "/routine" to the buffer (with separator).
Append the routine's moniker to the buffer (with separator).
Append the routine's compiled flag to the buffer (with separator).
Append the routine's callback flag to the buffer (with separator).
Append the routine's decider flag to the buffer (with separator).
Append the routine's function flag to the buffer (with separator).
Append the routine's employs moniker to the buffer (with separator).
Append the routine's parameter size to the buffer (with separator).
Append the routine's local size to the buffer (with separator).
Append the routine's address to the buffer (as hex with separator).
Advance the buffer.
List the routine's parameters in the buffer.
List the routine's locals in the buffer.
List the routine's fragments in the buffer.
Advance the buffer.

To list some routines in a_ buffer:
Get a_ routine from the routines.
If the routine is nil, exit.
List the routine in the buffer.
Repeat.

To list some routines under a_ string in a_ buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the routines are empty, exit.
List the routines in the buffer.

To list a_ source file in a_ buffer:
If the source file is nil, exit.
Append "/source file" to the buffer (with separator).
Append the source file's path to the buffer (with separator).
Advance the buffer.

To list some source files in a_ buffer:
Get a_ source file from the source files.
If the source file is nil, exit.
List the source file in the buffer.
Repeat.

To list some source files under a_ string in a_ buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the source files are empty, exit.
List the source files in the buffer.
Advance the buffer.

To list a_ timer given a_ string in a_ buffer:
Append "/timer" to the buffer (with separator).
Append the string to the buffer (with separator).
Append the timer's string to the buffer (with separator).
Advance the buffer.

To list the timers under a_ string in a_ buffer:
Append the string to the buffer.
Advance the buffer (twice).
List the loading timer given "loading" in the buffer.
List the scanning timer given "scanning" in the buffer.
List the resolving types timer given "resolving types" in the buffer.
List the resolving globals timer given "resolving globals" in the buffer.
List the compiling routine headers timer given "compiling routine headers" in the buffer.
List the calculating timer given "calculating" in the buffer.
List the adding built-in memory routines timer given "adding built-in memory routines" in the buffer.
List the indexing utilities timer given "indexing utilities" in the buffer.
List the compiling routine bodies timer given "compiling routine bodies" in the buffer.
List the adding built-in startup routine timer given "adding built-in startup routine" in the buffer.
List the offsetting timer given "offsetting" in the buffer.
List the addressing timer given "addressing" in the buffer.
List the transmogrifying timer given "transmogrifying" in the buffer.
List the linking timer given "linking" in the buffer.
List the writing timer given "writing" in the buffer.
List the compiler's timer given "total" in the buffer.
Advance the buffer.

To list a_ type in a_ buffer:
If the type is nil, exit.
Append "/type" to the buffer (with separator).
Append the type's name to the buffer (with separator).
Append the type's plural name to the buffer (with separator).
Append the type's length to the buffer (as hex with separator).
Append the type's base name to the buffer (with separator).
Append the type's base type to the buffer (with separator).
Append the type's target name to the buffer (with separator).
Append the type's target type to the buffer (with separator).
Append the type's scale to the buffer (with separator).
Advance the buffer.
List the type's fields in the buffer.
Advance the buffer.

To list some types in a_ buffer:
Get a_ type from the types.
If the type is nil, exit.
List the type in the buffer.
Repeat.

To list some types under a_ string in a_ buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the types are empty, exit.
List the types in the buffer.

To list a_ variable in a_ buffer:
If the variable is nil, exit.
Append "/variable" to the buffer (with separator).
Append the variable's kind to the buffer (with separator).
Append the variable's compiled flag to the buffer (with separator).
Append the variable's name to the buffer (with separator).
Append the variable's nickname to the buffer (with separator).
Append the variable's type name to the buffer (with separator).
Append the variable's type to the buffer (with separator).
Append the variable's address [or offset] to the buffer (as hex with separator).
Append the variable's by-value flag to the buffer (with separator).
Append the variable's count to the buffer (with separator).
Append the variable's reference flag to the buffer (with separator).
Append the variable's redefinition target name to the buffer (with separator).
Append the variable's literal to the buffer (with separator).
Convert the variable's data to a_ nibble string.
Append the nibble string to the buffer (with separator).
Advance the buffer.

To list some variables in a_ buffer:
Get a_ variable from the variables.
If the variable is nil, exit.
List the variable in the buffer.
Repeat.

To list some variables under a_ string in a_ buffer:
Append the string to the buffer.
Advance the buffer (twice).
If the variables are empty, exit.
List the variables in the buffer.
Advance the buffer.

The literal index is an index.

a_ literal is a_ variable.

The literals are some literals.

The load address tag is a_ tag equal to 13.

The load eax tag is a_ tag equal to 14.

a_ local is a_ variable.

a_ locus is a_ byte pointer.

The loop tag is a_ tag equal to 15.

a_ moniker is a_ string.

a_ monikette is a_ thing with
a_ string,
a_ type (reference),
a_ variable (reference),
\ for bubbling
a_ current type (reference),
a_ current substring.

To move a_ rider (code rules - comment):
Bump the rider.
If the rider's source is blank, exit.
If the rider's source's first's target is not the return byte, repeat.

To move a_ rider (code rules - glom):
Bump the rider.
If the rider's source is blank, exit.
If the rider is on any possessive, exit.
If the rider's source's first's target is any glom byte, repeat.

To move a_ rider (code rules - mark):
Bump the rider.

To move a_ rider (code rules - noise):
Bump the rider.
If the rider's source is blank, exit.
If the rider's source's first's target is noise, repeat.

To move a_ rider (code rules - possessive):
Bump the rider.
If the rider's source is blank, exit.
If the rider's source starts with "s", bump the rider.

To move a_ rider (code rules - qualifier):
If the rider's source is blank, exit.
If the rider's source's first's target is the return byte, break.
If the rider's source's first's target is the left-paren byte, add 1 to a_ count.
If the rider's source's first's target is the right-paren byte, subtract 1 from the count.
Bump the rider.
If the count is 0, break.
Repeat.

To move a_ rider (code rules - remark):
If the rider's source is blank, exit.
If the rider's source's first's target is the return byte, break.
If the rider's source's first's target is the left-bracket byte, add 1 to a_ count.
If the rider's source's first's target is the right-bracket byte, subtract 1 from the count.
Bump the rider.
If the count is 0, break.
Repeat.  

To move a_ rider (code rules - string):
Bump the rider.
If the rider's source is blank, exit.
If the rider's source's first's target is the return byte, exit.
If the rider is on any nested double-quote, bump the rider; repeat.
If the rider's source's first's target is the double-quote byte, bump the rider; exit.
Repeat.

To move a_ rider (code rules - symbol):
Bump the rider.

To move a_ rider (code rules):
Position the rider's token on the rider's source.
If the rider's source is blank, exit.
If the rider's source's first's target is noise, move the rider (code rules - noise); exit.
If the rider's source's first's target is the backslash byte, move the rider (code rules - comment); exit.
If the rider's source's first's target is the left-bracket byte, move the rider (code rules - remark); exit.
If the rider's source's first's target is the double-quote byte, move the rider (code rules - string); exit.
If the rider's source's first's target is the left-paren byte, move the rider (code rules - qualifier); exit.
If the rider's source's first's target is any mark, move the rider (code rules - mark); exit.
If the rider is on any possessive, move the rider (code rules - possessive); exit.
Move the rider (code rules - glom).

To move a_ rider (compiler rules):
If the compiler's abort flag is set, clear the rider's token; exit.
Move the rider returning an error string (code rules).
If the error string is not blank, abort with the error string and the rider's token's first; exit.
If the rider's token is blank, exit.
If the rider's token's first's target is noise, repeat.
If the rider's token's first's target is the backslash byte, repeat.
If the rider's token's first's target is the left-bracket byte, repeat.

To move a_ rider returning an error string (code rules - validate qualifier):
If the rider's token's length is less than 2, put "Qualifiers need to end with ')'." into the error string; exit.
If the rider's token's last's target is not the right-paren byte, put "Qualifiers need to end with ')'." into the error string; exit.

To move a_ rider returning an error string (code rules - validate remark):
If the rider's token's length is less than 2, put "Remarks need to end with ']'." into the error string; exit.
If the rider's token's last's target is not the right-bracket byte, put "Remarks need to end with ']'." into the error string; exit.

To move a_ rider returning an error string (code rules - validate string):
If the rider's token's length is less than 2, put "Strings need to end with '""'." into the error string; exit.
If the rider's token's last's target is not the double-quote byte, put "Strings need to end with '""'." into the error string; exit.

To move a_ rider returning an error string (code rules):
Clear the error string.
Move the rider (code rules).
If the rider's token is blank, exit.
If the rider's token's first's target is the left-bracket byte, move the rider returning the error string (code rules - validate remark); exit.
If the rider's token's first's target is the double-quote byte, move the rider returning the error string (code rules - validate string); exit.
If the rider's token's first's target is the left-paren byte, move the rider returning the error string (code rules - validate qualifier); exit.

a_ nibble substring is a_ substring.

a_ nickname is a_ name.

The not tag is a_ tag equal to 16.

To offset the locals in a_ routine:
If the routine is nil, exit.
If the routine's compiled flag is not set, exit.
Clear the routine's local size.
Loop.
If the compiler's abort flag is set, exit.
Get a_ local from the routine's locals.
If the local is nil, exit.
If the local's previous is not nil, put the local's previous' offset into the local's offset.
Put the local's type's length into a_ length.
If the local's kind is "scratch", put a_ pointer's magnitude into the length.
Round the length up to the nearest multiple of 4.
Subtract the length from the local's offset.
Add the length to the routine's local size.
Repeat.

To offset the locals in some routines:
If the compiler's abort flag is set, exit.
Get a_ routine from the routines.
If the routine is nil, exit.
Offset the locals in the routine.
Repeat.

To offset the parameters in a_ routine:
If the routine is nil, exit.
If the routine's compiled flag is not set, exit.
Clear the routine's parameter size.
Loop.
If the compiler's abort flag is set, exit.
Get a_ parameter from the routine's parameters.
If the parameter is nil, exit.
If the routine's callback flag is set, set the parameter's by-value flag.
If the parameter's previous is nil, put 8 into the parameter's offset. \ skip the return address and saved ebp
If the parameter's previous is not nil, put the parameter's previous' offset plus 4 into the parameter's offset. \ all parameters are 4 byte pointers or 4 byte values for callbacks
Add 4 to the routine's parameter size.
Repeat.

To offset the parameters in some routines:
If the compiler's abort flag is set, exit.
Get a_ routine from the routines.
If the routine is nil, exit.
Offset the parameters in the routine.
Repeat.

The offsetting timer is a_ timer.

a_ parameter is a_ variable.

a_ partial moniker is a_ moniker.

a_ pe header is a_ record with
a_ number called signature,
a_ wyrd called machinetype,
a_ wyrd called numberofsections,
a_ number called timestamp,
a_ number called pointertosymboltable,
a_ number called numberofsymbols,
a_ wyrd called sizeofoptionalheaderinbytes,
a_ wyrd called characteristics,
\ optional header
a_ wyrd called magicnumber,
a_ byte called majorlinkerversion,
a_ byte called minorlinkerversion,
a_ number called sizeofcodeinfile,
a_ number called sizeofinitializeddatainfile,
a_ number called sizeofuninitializeddatainfile,
a_ number called addressofentrypointinmemory,
a_ number called addressofcodeinmemory,
a_ number called addressofinitializeddatainmemory,
a_ number called imagebase,
a_ number called memoryalignment,
a_ number called filealignment,
a_ wyrd called osmajorversion,
a_ wyrd called osminorversion,
a_ wyrd called usermajorversion,
a_ wyrd called userminorversion,
a_ wyrd called subsystemmajorversion,
a_ wyrd called subsystemminorversion,
a_ number called reserved,
a_ number called sizeofimageinmemory,
a_ number called sizeofallheadersinfile,
a_ number called checksum,
a_ wyrd called subsystem,
a_ wyrd called dllcharacteristics,
a_ number called maxstack,
a_ number called minstack,
a_ number called maxheap,
a_ number called minheap,
a_ number called loaderflags,
\ directories (16 address and size pairs)
a_ number called numberofdirectories,
8 bytes called directory0,
a_ number called imagedirectoryentryimportaddress,
a_ number called imagedirectoryentryimportsize,
112 bytes called directories2-15,
a_ pe section header called idata section,
a_ pe section header called data section,
a_ pe section header called code section.

a_ pe section header is a_ record with
8 bytes called name,
a_ number called sizeinbytes,
a_ number called addressinmemory,
a_ number called sizeinfile,
a_ number called addressinfile,
12 bytes called reserved,
a_ number called characteristics.

a_ phrase is a_ string.

\To decide if a_ string looks like English:
\Load the lexicon.
\If the lexicon is nil, show error "I can't find any lecksicon."; say no.
\If the string is blank, say no.
\Slap a_ substring on the string.
\Put the substring's last into the substring's first.
\Loop.
\If the substring's first is the string's first, break.
\If the substring's first's target is the space byte, add 1 to the substring's first; break.
\Subtract 1 from the substring's first.
\Repeat.
\If the substring is in the lexicon's index, say yes.
\Say no.

To pluralize a_ string (portuguese rules):
Slap a_ rider on the string.
Loop.
Move the rider (spell checking rules).
If the rider's token is blank, break.
If a_ plural string is not blank, append " " to the plural string.
Append the rider's token to the plural string.
If the rider's token is "de", set a_ flag; repeat.
If the flag is not set, pluralize the plural string (portuguese rules - each word).
Repeat.
Put the plural string into the string.

To pluralize a_ string (portuguese rules - each word):
\PAL
\# https://www.normaculta.com.br/singular-e-plural/
\# palavras que são exceções às regras
If the string is "cidadão", append "s" to the string; exit.
If the string is "irmão", append "s" to the string; exit.
If the string is "cristão", append "s" to the string; exit.
If the string is "refrão", append "s" to the string; exit.
If the string is "pão", remove the last byte from the string; append "es" to the string; exit.
If the string is "capitão", remove the last byte from the string; append "es" to the string; exit.
If the string is "alemão", remove the last byte from the string; append "es" to the string; exit.
If the string is "charlatão", remove the last byte from the string; append "es" to the string; exit.
If the string is "caráter", put "carateres" into the string; exit.
If the string is "júnior", put "juniores" into the string; exit.
If the string is "sênior", put "seniores" into the string; exit.
If the string is "mão", put "mãos" into the string; exit.
If the string is "são", put "sãos" into the string; exit.
\# advérbios principais
If the string is "muito", exit.
If the string is "pouco", exit.
If the string is "mais", exit.
If the string is "menos", exit.
If the string is "bastante", exit.
If the string is "quase", exit.
If the string is "demais", exit.
If the string is "bem", exit.
If the string is "deveras", exit.
If the string is "mal", exit.
If the string is "melhor", exit.
If the string is "pior", exit.
\# palavras terminadas com "ão"
If the string ends with "ão", pluralize the string (portuguese rules - ending words with "ão"); exit.
\# palavras terminadas com "l"
If the string ends with "l", pluralize the string (portuguese rules - ending words with "l"); exit.
\# palavra terminadas com "m"
If the string ends with "m", remove the last byte from the string; append "ns" to the string; exit.
\# palavra terminadas com "n" (essa regra é preferível porque mantém o acento da palavra, se houver)
If the string ends with "n", append "es" to the string; exit.
\# palavras terminadas com "r"
If the string ends with "r", pluralize the string (portuguese rules - ending words with "r"); exit.
\# palavras terminadas com "s"
If the string ends with "s", pluralize the string (portuguese rules - ending words with "s"); exit.
\# palavra terminadas com "x"
If the string ends with "x", exit.
\# palavras terminadas com "z"
If the string ends with "z", pluralize the string (portuguese rules - ending words with "z"); exit.
\# regra padrão
Append "s" to the string.

To pluralize a_ string (portuguese rules - ending words with "ão"):
\# acentos em sílabas prévias
Slap a_ substring on the string.
Subtract 2 from the substring's last.
If the substring has any stressed vowel, append "s" to the string; exit.
\# regra padrão
Remove the last two bytes from the string.
Append "ões" to the string.

To pluralize a_ string (portuguese rules - ending words with "l"):
\# palavras terminadas com "al"
If the string ends with "al", remove the last byte from the string; append "is" to the string; exit.
\# palavras terminadas com "el"
If the string ends with "el", pluralize the string (portuguese rules - ending words with "el"); exit.
\# palavras terminadas com "il"
If the string ends with "il", pluralize the string (portuguese rules - ending words with "il"); exit.
\# palavras terminadas com "ol"
If the string ends with "ol", pluralize the string (portuguese rules - ending words with "ol"); exit.
\# palavras terminadas com "ul"
If the string ends with "ul", remove the last byte from the string; append "is" to the string; exit.

To pluralize a_ string (portuguese rules - ending words with "el"):
\# acentos em sílabas prévias
Slap a_ substring on the string.
Subtract 2 from the substring's last.
If the substring has any stressed vowel, remove the last byte from the string; append "is" to the string; exit.
Remove the last two bytes from the string.
Append "éis" to the string.

To pluralize a_ string (portuguese rules - ending words with "il"):
\# acentos em sílabas prévias
Slap a_ substring on the string.
Subtract 2 from the substring's last.
If the substring has any stressed vowel, remove the last two bytes from the string; append "eis" to the string; exit.
Remove the last byte from the string.
Append "s" to the string.

To pluralize a_ string (portuguese rules - ending words with "ol"):
\# acentos em sílabas prévias
Slap a_ substring on the string.
Subtract 2 from the substring's last.
If the substring has any stressed vowel, remove the last byte from the string; append "is" to the string; exit.
Remove the last two bytes from the string.
Append "óis" to the string.

To pluralize a_ string (portuguese rules - ending words with "r"):
\# hiatos acentuados
If the string ends with "aír", append "es" to the string; exit.
If the string ends with "aúr", append "es" to the string; exit.
\# palavras terminas em "ár", "âr", "ér", "êr", "ír", "ór", "ôr", "úr"
If the string ends with "ár", remove the last two bytes from the string; append "ares" to the string; exit.
If the string ends with "âr", remove the last two bytes from the string; append "ares" to the string; exit.
If the string ends with "ér", remove the last two bytes from the string; append "eres" to the string; exit.
If the string ends with "êr", remove the last two bytes from the string; append "eres" to the string; exit.
If the string ends with "ír", remove the last two bytes from the string; append "ires" to the string; exit.
If the string ends with "ór", remove the last two bytes from the string; append "ores" to the string; exit.
If the string ends with "ôr", remove the last two bytes from the string; append "ores" to the string; exit.
If the string ends with "úr", remove the last two bytes from the string; append "ures" to the string; exit.
\# acentos em sílabas prévias
Slap a_ substring on the string.
Subtract 2 from the substring's last.
If the substring has any stressed vowel, append "es" to the string; exit.
\# hiatos
If the string ends with "air", remove the last two bytes from the string; append "íres" to the string; exit.
If the string ends with "aur", remove the last two bytes from the string; append "úres" to the string; exit.
\# regra padrão
Append "es" to the string.

To pluralize a_ string (portuguese rules - ending words with "s"):
\# proparoxítonas/paroxítonas terminadas com "as", "es", "os"
If the string ends with "as", exit.
If the string ends with "es", exit.
If the string ends with "os", exit.
\# hiatos acentuados
If the string ends with "aís", append "es" to the string; exit.
If the string ends with "aús", append "es" to the string; exit.
\# oxítonas terminadas com "ás", "âs", "és", "ês", "ís", "ós", "ôs", "ús"
If the string ends with "ás", remove the last two bytes from the string; append "ases" to the string; exit.
If the string ends with "âs", remove the last two bytes from the string; append "ases" to the string; exit.
If the string ends with "és", remove the last two bytes from the string; append "eses" to the string; exit.
If the string ends with "ês", remove the last two bytes from the string; append "eses" to the string; exit.
If the string ends with "ís", remove the last two bytes from the string; append "ises" to the string; exit.
If the string ends with "ós", remove the last two bytes from the string; append "oses" to the string; exit.
If the string ends with "ôs", remove the last two bytes from the string; append "oses" to the string; exit.
If the string ends with "ús", remove the last two bytes from the string; append "uses" to the string; exit.
\# palavras terminadas com "is", "us"
If the string ends with "is", pluralize the string (portuguese rules - ending words with "is/us"); exit.
If the string ends with "us", pluralize the string (portuguese rules - ending words with "is/us"); exit.
\# regra padrão
Append "es" to the string.

To pluralize a_ string (portuguese rules - ending words with "is/us"):
\# acentos em sílabas prévias
Slap a_ substring on the string.
Subtract 2 from the substring's last.
If the substring has any stressed vowel, exit.
\# hiatos
If the string ends with "ais", remove the last two bytes from the string; append "íses" to the string; exit.
If the string ends with "aus", remove the last two bytes from the string; append "úses" to the string; exit.
\# regra padrão
Append "es" to the string.

To pluralize a_ string (portuguese rules - ending words with "z"):
\# hiatos acentuados
If the string ends with "aíz", append "es" to the string; exit.
If the string ends with "aúz", append "es" to the string; exit.
\# palavras terminas em "áz", "âz", "éz", "êz", "íz", "óz", "ôz", "úz"
If the string ends with "áz", remove the last two bytes from the string; append "azes" to the string; exit.
If the string ends with "âz", remove the last two bytes from the string; append "azes" to the string; exit.
If the string ends with "éz", remove the last two bytes from the string; append "ezes" to the string; exit.
If the string ends with "êz", remove the last two bytes from the string; append "ezes" to the string; exit.
If the string ends with "íz", remove the last two bytes from the string; append "izes" to the string; exit.
If the string ends with "óz", remove the last two bytes from the string; append "ozes" to the string; exit.
If the string ends with "ôz", remove the last two bytes from the string; append "ozes" to the string; exit.
If the string ends with "úz", remove the last two bytes from the string; append "uzes" to the string; exit.
\# acentos em sílabas prévias
Slap a_ substring on the string.
Subtract 2 from the substring's last.
If the substring has any stressed vowel, append "es" to the string; exit.
\# hiatos
If the string ends with "aiz", remove the last two bytes from the string; append "ízes" to the string; exit.
If the string ends with "auz", remove the last two bytes from the string; append "úzes" to the string; exit.
\# regra padrão
Append "es" to the string.

To pluralize a_ string (english rules):
If the string is "alumnus", put "alumni" into the string; exit.
If the string is "auto", put "autos" into the string; exit.
If the string is "cello", put "cellos" into the string; exit.
If the string is "dwarf", put "dwarfs" into the string; exit.
If the string is "foot", put "feet" into the string; exit.
If the string is "genus", put "genera" into the string; exit.
If the string is "goose", put "geese" into the string; exit.
If the string is "hippo", put "hippos" into the string; exit.
If the string is "louse", put "lice" into the string; exit.
If the string is "memo", put "memos" into the string; exit.
If the string is "mouse", put "mice" into the string; exit.
If the string is "ox", put "oxen" into the string; exit.
If the string is "phenomenon", put "phenomena" into the string; exit.
If the string is "photo", put "photos" into the string; exit.
If the string is "phylum", put "phyla" into the string; exit.
If the string is "piano", put "pianos" into the string; exit.
If the string is "pimento", put "pimentos" into the string; exit.
If the string is "pro", put "pros" into the string; exit.
If the string is "proof", put "proofs" into the string; exit.
If the string is "radius", put "radii" into the string; exit.
If the string is "rhinoceros", put "rhinoceri" into the string; exit.
If the string is "roof", put "roofs" into the string; exit.
If the string is "solo", put "solos" into the string; exit.
If the string is "soprano", put "sopranos" into the string; exit.
If the string is "staff", put "staffs" into the string; exit.
If the string is "tooth", put "teeth" into the string; exit.
If the string is "torus", put "tori" into the string; exit.
If the string is "turf", put "turfs" into the string; exit.
If the string is "virus", put "viruses" into the string; exit.
If the string ends with "sh", append "es" to the string; exit.
If the string ends with "ch", append "es" to the string; exit.
If the string ends with "man", remove the last two bytes from the string; append "en" to the string; exit.
If the string ends with "child", append "ren" to the string; exit.
If the string ends with "ex", remove the last two bytes from the string; append "ices" to the string; exit. \ or add ES
If the string ends with "fe", remove the last two bytes from the string; append "ves" to the string; exit.
If the string ends with "is", remove the last two bytes from the string; append "es" to the string; exit.
If the string ends with "ix", remove the last two bytes from the string; append "ices" to the string; exit. \ or add ES
If the string ends with "ma", append "ta" to the string; exit. \ or add S
If the string ends with any consonant and "y", remove the last byte from the string; append "ies" to the string; exit.
If the string ends with any vowel and "o", append "s" to the string; exit.
If the string ends with any vowel and "y", append "s" to the string; exit.
If the string ends with "f", remove the last byte from the string; append "ves" to the string; exit.
If the string ends with "s", append "es" to the string; exit.
If the string ends with "x", append "es" to the string; exit.
If the string ends with "z", append "es" to the string; exit.
Append "s" to the string.

The prolog tag is a_ tag equal to 17.

a_ prototype string has a_ first byte pointer and a_ last byte pointer.

The push address tag is a_ tag equal to 18.

The push value tag is a_ tag equal to 19.

To put the compiler's exe path into a_ path:
Extract a_ designator from the compiler's directory.
Remove any trailing backslash from the designator.
Put the compiler's directory then the designator then ".exe" into the path.

To put the compiler's exe size into a_ size:
Put 4096 [section base] into the size.
Add the import borough's size to the size.
Add the data borough's size to the size.
Add the code borough's size to the size.

To put the compiler's listing path into a_ path:
Extract a_ designator from the compiler's directory.
Remove any trailing backslash from the designator.
Put the compiler's directory then the designator then ".lst" into the path.

To put a_ term into another term:
Put the term's variable into the other term's variable.
Put the term's phrase into the other term's phrase.

To load a_ source file:
If the source file is nil, exit.
Load the source file's path into a_ string.
If o error de e/s is not blank, abort with "Não consegui carregar o arquivo chamado '" then the source file's path then "'."; exit.
Parse the string to the source file's buffer (portuguese contractions and synonyms rules).

To load some source files:
Loop.
If the compiler's abort flag is set, exit.
Get an item from the compiler's directory.
If the item is not found, break.
If the item's kind is not "file", repeat.
If the item's extension is not blank, repeat.
If the item looks reamish, repeat.
Add a_ source file to the source files given the item's path.
Load the source file.
Repeat.

The loading timer is a_ timer.

To parse a_ string to another string (portuguese contractions and synonyms rules):
Clear the other string.
Clear a_ third string.
Slap a_ rider on the string.
Loop.
If the rider's source is blank, exit.
Position the rider's token on the rider's source.
Move the rider (code rules).
If the rider's token's first's target is not any glom byte, append the rider's token to the other string; repeat.
Append the rider's token to the other string giving the third string (portuguese contractions and synonyms rules).
Put the rider's token into the third string.
Repeat.

To reduce some monikettes for_ utility use:
Get a_ monikette from the monikettes.
If the monikette is nil, exit.
If the monikette's type is nil, repeat.
Reduce the monikette's type to a_ type for_ utility use.
If the type is not nil, put the type into the monikette's type.
Repeat.

To reduce a_ type to another type for_ utility use:
Put the type into the other type.
Loop.
If the other type is nil, exit.
If the other type's name is "hex string", exit.
If the other type's name is "string", exit.
If the other type's name is "number", exit.
If the other type's name is "pointer", exit.
If the other type's name is "thing", void the other type; exit.
\PAL
If the other type's name is "coisa", void the other type; exit.
If the other type's base type is the other type, void the other type; exit.
Put the other type's base type into the other type.
Repeat.

To reindex the utility index:
If the compiler's abort flag is set, exit.
Get a_ bucket given the utility index.
If the bucket is nil, exit.
If the bucket's refers are empty, repeat.
Reindex the utility index given the bucket's refers.
Repeat.

To reindex the utility index given some refers:
Get a_ refer from the refers.
If the refer is nil, exit.
Put the refer's pointer into a_ routine.
If the routine is nil, abort with "Erro interno - indexando as rotinas utilitárias dadas algumas referências"; exit.
Copy the routine's monikettes into some monikettes.
Reduce the monikettes for_ utility use.
Index the routine given the monikettes and the routine index.
Destroy the monikettes.
Repeat.

To remove any negatives from some monikettes returning a_ flag:
Clear the flag.
Swap the monikettes with some other monikettes.
Loop.
Put the other monikettes' first into a_ monikette.
If the monikette is nil, exit.
Remove the monikette from the other monikettes.
\PAL
If the monikette's string is "não", reverse the flag; destroy the monikette; repeat.
If the monikette's string is "nada", reverse the flag; destroy the monikette; repeat.
\CAL
If the monikette's string is "no", reverse the flag; destroy the monikette; repeat.
If the monikette's string is "not", reverse the flag; destroy the monikette; repeat.
Append the monikette to the monikettes.
If the monikette's string is "can't", reverse the flag; put "can" into the monikette's string; repeat.
If the monikette's string is "cannot", reverse the flag; put "can" into the monikette's string; repeat.
If the monikette's string is "nothing", reverse the flag; put "something" into the monikette's string; repeat.
If the monikette's string is "won't", reverse the flag; put "will" into the monikette's string; repeat.
If the monikette's string ends with "n't", reverse the flag; remove trailing bytes from the monikette's string given 3; repeat.
Repeat.

The repeat tag is a_ tag equal to 21.

To resolve a_ field:
If the compiler's abort flag is set, exit.
If the field is nil, exit.
Resolve the field as_ a_ variable.
If the field's nickname is not any valid field name, clear the field's nickname.
If the field's name is not any valid field name, abort with "'" then the field's name then "' não é um nome de campo válido." and the field's locus; exit.

To resolve a_ global:
If the global is nil, exit.
If the compiler's abort flag is set, exit.
If the global's global body is not blank, resolve the global (compile body).
If the global's type name is blank, abort with "Variável global inválida '" then the global's name then "'." and the global's locus; exit.
Resolve the global as_ a_ variable.

To resolve a_ global (compile body):
If the global is nil, exit.
If the compiler's abort flag is set, exit.
Slap a_ rider on the global's global body.
Move the rider (compiler rules).
If the rider's token is not any literal, abort with "Preciso de uma definição literal aqui, mas encontrei '" then the rider's token then "'." and the rider; exit.
Compile a_ literal given the rider.
If the compiler's abort flag is set, exit.
If the rider's token is not blank, abort with "Você perdeu um ponto aí?" and the rider; exit.
If the global's type name is blank, put the literal's type's name into the global's type name.
Put the literal into the global's literal.
Index the literal.

To resolve some globals:
If the compiler's abort flag is set, exit.
Get a_ global from the globals.
If the global is nil, exit.
Resolve the global.
Repeat.

To resolve a_ type (base type):
If the compiler's abort flag is set, exit.
If the type is nil, exit.
If the type's base type is not nil, exit.
Find the type's base type given the type's base name and the type index.
If the type's base type is nil, abort with "Tipo base inválido. '" then the type's base name then "'." and the type's locus; exit.
Set the type's cooking flag.
If the type's base type's cooking flag is set, abort with "Definição recursiva com '" then the type's base name then "'." and the type's locus; exit.
Resolve the type's base type (base type).
Clear the type's cooking flag.

To resolve a_ type (expand thing): \ type's base type is not resolved yet
If the compiler's abort flag is set, exit.
If the type is nil, exit.
If the type's base type is not nil, exit.
If the type's name is "thing", exit.
\If the type's name is "coisa", exit.
If the type cannot be reduced to "thing" using the base name, exit.
Find a_ base type given the type's base name and the type index.
\  add thing record - the number of secret fields is hard coded in two places: search for "than 4" \ was 6
Put the type's name then " record" into a_ name.
Put the type's name then " records" into a_ plural name.
Put the base type's name then " record" into a_ base name.
Add a_ record type to the types given the name and the plural name and the base name.
Add a_ field to the record type's fields given "next " then the type's name and "next" and the type's name and the on flag.
\PAL
Add a_ portuguese field to the record type's fields given "seguinte " then the type's name and "seguinte" and the type's name and the on flag.
Put "next " then the type's name into the portuguese field's redefinition target name.
Add another field to the record type's fields given "previous " then the type's name and "previous" and the type's name and the on flag.
Add another portuguese reverse field to the record type's fields given the type's name then " anterior" and "anterior" and the type's name and the on flag.
Put "previous " then the type's name into the other portuguese reverse field's redefinition target name.
If the type's fields are not empty, append the type's fields to the record type's fields.
Index the record type.
\ fix up original type to look like a_ pointer
Put the record type's name into the type's target name.
\ add chain type
Add a_ chain type to the types given the type's plural name and "" and the base type's plural name.
Add a_ third field to the chain type's fields given "first " then the type's name and "first" and the type's name and the on flag.
Add a_ third portuguese field to the chain type's fields given "primeiro " then the type's name and "primeiro" and the type's name and the on flag.
Put "first " then the type's name into the third portuguese field's redefinition target name.
Add a_ third feminine portuguese field to the chain type's fields given "primeira " then the type's name and "primeira" and the type's name and the on flag.
Put "first " then the type's name into the third feminine portuguese field's redefinition target name.
Add a_ fourth field to the chain type's fields given "last " then the type's name and "last" and the type's name and the on flag.
Add a_ fourth portuguese field to the chain type's fields given "último " then the type's name and "último" and the type's name and the on flag.
Put "last " then the type's name into the fourth portuguese field's redefinition target name.
Add a_ fourth portuguese feminine field to the chain type's fields given "última " then the type's name and "última" and the type's name and the on flag.
Put "last " then the type's name into the fourth portuguese feminine field's redefinition target name.
Index the chain type.

To resolve a_ type (index plural):
If the compiler's abort flag is set, exit.
If the type is nil, exit.
If the type's plural name is blank, exit.
If the type can be reduced to "thing" using the base name, exit.
Index the type given the type's plural name.

To resolve a_ type (optional info - pointer):
If the compiler's abort flag is set, exit.
If the type's target type is not nil, exit.
If the type's target name is blank, put the type's base type's target type into the type's target type; exit.
Find the type's target type given the type's target name and the type index.
If the type's target type is nil, abort with "Realmente não vejo o que você está buscando. Por favor seja mais claro." and the type's locus; exit.

To resolve a_ type (optional info - record):
If the compiler's abort flag is set, exit.
If the type's fields are empty, copy the type's base type's fields into the type's fields; exit.
Loop.
If the compiler's abort flag is set, exit.
Get a_ field from the type's fields (backwards).
If the field is nil, break.
If the field is duplicated in the type's fields, abort with "O campo '" then the field's name then "' está definido mais de uma vez." and the field's locus; exit.
Resolve the field.
If the compiler's abort flag is set, exit.
If the field's type's cooking flag is set, abort with "Definição recursiva com '" then the field's type's name then "'." and the field's locus; exit.
Resolve the field's type (optional info).
If the field's reference flag is not set, repeat.
If the field's type cannot be reduced to "pointer", abort with "O que você quer dizer com '(referência)' bem aqui neste '" then the field's name then "'?" and the field's locus; exit.
Repeat.
Eliminate duplicate nicknames from the type's fields.
If the type cannot be reduced to "thing record", exit.
If the type's fields' count is greater than 4, exit. \ already copied? was 2 for next and prev, now 6 to included portuguese redefiniions
Copy the type's base type's fields into the type's fields (data fields only).

To resolve a_ type (optional info - scale):
If the compiler's abort flag is set, exit.
Put the type's base type into a_ base type.
If the type's scale is 0, put the type's base type's scale into the type's scale; exit.
If the base type's scale is 0, exit.
Multiply the type's scale by the base type's scale.
Put the base type's base type into the type's base type.

To resolve a_ type (optional info):
If the compiler's abort flag is set, exit.
If the type is nil, exit.
If the type's optional info resolved flag is set, exit.
If the type's base type is the type, exit. \ for built in types
Check for_ invalid optional info on the type.
Set the type's cooking flag.
Resolve the type's base type (optional info).
If the type can be reduced to "pointer", resolve the type (optional info - pointer).
If the type can be reduced to "record", resolve the type (optional info - record).
If the type can be reduced to "number", resolve the type (optional info - scale).
Clear the type's cooking flag.
Set the type's optional info resolved flag.

To resolve some types (base types):
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Resolve the type (base type).
Repeat.

To resolve some types (expand things):
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Resolve the type (expand thing).
Repeat.

To resolve some types (index plurals):
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Resolve the type (index plural).
Repeat.

To resolve some types (optional info):
If the compiler's abort flag is set, exit.
Get a_ type from the types.
If the type is nil, exit.
Resolve the type (optional info).
Repeat.

To resolve a_ variable:
If the compiler's abort flag is set, exit.
If the variable is nil, exit.
If the variable's type is not nil, exit.
If the variable's type name is not blank, resolve the variable (explicit type name); exit.
Find the variable's type and the variable's nickname given the variable's name.
If the variable's type is not nil, put the variable's type's name into the variable's type name; exit.
Abort with "Não consigo encontrar o tipo '" then the variable's name then "'." and the variable's locus.

To resolve a_ variable (explicit type name):
Find the variable's type given the variable's type name and the type index.
If the variable's type is nil, abort with "Não consigo encontrar o tipo '" then the variable's type name then "'." and the variable's locus; exit.

The resolving globals timer is a_ timer.

The resolving types timer is a_ timer.

To round up borough sizes:
Put the import borough's length into the import borough's size.
Round the import borough's size up to the nearest multiple of 4096.
Put the data borough's length into the data borough's size.
Round the data borough's size up to the nearest multiple of 4096.
Put the code borough's length into the code borough's size.
Round the code borough's size up to the nearest multiple of 4096.

The routine address tag is a_ tag equal to 22.

a_ routine body is a_ substring.

a_ routine header is a_ substring.

The routine index is an index.

a_ routine is a_ thing with
a_ locus (reference),
a_ callback flag,
a_ decider flag,
a_ function flag,
a_ compiled flag,
a_ nickname index,
a_ moniker, some monikettes, some parameters, a_ parameter size,
An employs moniker,
Some locals, a_ local size,
a_ routine header, a_ header string,
a_ routine body, a_ body string,
Some fragments,
An address.

a_ routine reference is some monikettes.

The routines are some routines.

The save eax tag is a_ tag equal to 20.

To scan any optional info for_ a_ type given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is "to", scan any optional info for_ the type given the rider (pointer); exit.
If the rider's token is "para", scan any optional info for_ the type given the rider (pointer); exit.
If the rider's token is any with, scan any optional info for_ the type given the rider (record); exit.

To scan any optional info for_ a_ type given a_ rider (pointer):
Move the rider (compiler rules).
If the rider's token is not any indefinite article, abort with "O 'para' neste lugar precisa de um artigo definido logo após, e não '" then the rider's token then "'." and the rider; exit. 
Move the rider (compiler rules).
Scan the type's target name given the rider.

To scan any optional info for_ a_ type given a_ rider (record):
Move the rider (compiler rules).
Scan the type's fields given the rider.

To scan any pauses given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is not any pause, exit.
Move the rider (compiler rules).
Repeat.

To scan a_ field given a_ rider:
If the compiler's abort flag is set, exit.
Scan the field given the rider (type part).
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is any called, scan the field given the rider (called part); repeat.
If the rider's token is "at", scan the field given the rider (redefine part); repeat.
If the rider's token is "em", scan the field given the rider (redefine part); repeat.
If the rider's token is "redefinindo", scan the field given the rider (redefine part); repeat.
If the rider's token is any reference, scan the field given the rider (reference part); repeat.

To scan a_ field given a_ rider (called part):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
If the field's type name is blank, put the field's name into the field's type name. \ byte array type name already filled in
Scan the field's name given the rider.

To scan a_ field given a_ rider (redefine part):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
If the rider's token is not any definite article, abort with "Esperava uma palavra 'a/o/as/os', mas encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Scan the field's redefinition target name given the rider.

To scan a_ field given a_ rider (reference part):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Set the field's reference flag.

To scan a_ field given a_ rider (type part - byte array):
If the compiler's abort flag is set, exit.
Convert the rider's token to a_ ratio.
Reduce the ratio.
If the ratio's denominator is not 1, abort with "Você deve especificar um número inteiro de bytes para uma matriz de bytes." and the rider; exit.
Put the ratio's numerator into the field's count.
Move the rider (compiler rules).
If the rider's token is not "byte" or "bytes", abort with "Somente a palavra 'bytes' é apropriada após uma designação de campo contado." and the rider; exit.
Move the rider (compiler rules).
Put "byte" into the field's type name.

To scan a_ field given a_ rider (type part - normal):
If the compiler's abort flag is set, exit.
If the rider's token is not any indefinite article, abort with "Esperava um artigo indefinido, mas encontrei '" then the rider's token then "'." and the rider; exit.
If the rider's token is "another", put "other" into the field's name.
\PAL
If the rider's token is "outra", put "segunda" into the field's name.
If the rider's token is "outro", put "segundo" into the field's name.
Move the rider (compiler rules).
Scan a_ name given the rider.
Extend the field's name with the name.

To scan a_ field given a_ rider (type part):
If the compiler's abort flag is set, exit.
If the rider's token is any numeric literal, scan the field given the rider (type part - byte array); exit.
Scan the field given the rider (type part - normal).

To scan some fields given a_ rider:
If the compiler's abort flag is set, exit.
Add a_ field to the fields given "field" and the rider's token's first.
Scan the field given the rider.
If the rider's token is not any pause, exit.
Scan any pauses given the rider.
Repeat.

To scan a_ global body given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
Put the rider's token's first into the global body's first.
Put -1 into the global body's last.
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
If the rider's token is the colon byte, exit.
If the rider's token is the period byte, exit.
Put the rider's token's last into the global body's last.
Move the rider (compiler rules).
Repeat.

To scan a_ global given a_ rider:
If the compiler's abort flag is set, exit.
Add the global to the globals given "global" and the rider's token's first.
Move the rider (compiler rules).
Scan the global's name given the rider.
If the rider's token is any has, scan the global given the rider (has or have); exit.
If the rider's token is not any is, abort with "Ei! Preciso de um 'é' ou um 'são' por aí, mas tudo que eu encontrei foi '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
If the rider's token is not any indefinite article, scan the global given the rider (literal term); exit.
Move the rider (compiler rules).
Scan the global's type name given the rider.  
If the rider's token is the start of any optional info, scan the global given the rider (optional info); exit.
If the rider's token is any equal, scan the global given the rider (data part); exit.
If the rider's token is not the period byte, abort with "Todas as definições globais devem terminar com um ponto." and the rider; exit. 
Move the rider (compiler rules).
Index the global.

To scan a_ global given a_ rider (data part):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
If the rider's token is not any to, abort with "Preciso da palavra 'a' depois da palavra 'igual', e não '" then the rider's token then "'." and the rider; exit. 
Move the rider (compiler rules).
Scan the global's global body given the rider.
If the rider's token is not the period byte, abort with "Todas as definições globais devem terminar com um ponto." and the rider; exit. 
Move the rider (compiler rules).
Index the global.

To scan a_ global given a_ rider (has or have):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Put "~inline " then the global's name then " type" into a_ name.
Put the name then "s" into a_ plural name.
Add a_ type to the types given the name and the plural name and "record" and the global's locus.
Index the type.
Put the type's name into the global's type name.
Scan the type's fields given the rider.
If the rider's token is not the period byte, abort with "Algum sinal de pontuação aqui está errado." and the rider; exit. 
Move the rider (compiler rules).
Index the global.

To scan a_ global given a_ rider (literal term):
If the compiler's abort flag is set, exit.
Scan the global's global body given the rider.
If the rider's token is not the period byte, abort with "Todas as definições globais devem terminar com um ponto." and the rider; exit. 
Move the rider (compiler rules).
Index the global.

To scan a_ global given a_ rider (optional info):
If the compiler's abort flag is set, exit.
Put "~inline " then the global's name then " type" into a_ name.
Put the name then "s" into a_ plural name.
Add a_ type to the types given the name and the plural name and the global's type name and the global's locus.
Index the type.
Put the type's name into the global's type name.
Scan any optional info for_ the type given the rider.
If the rider's token is not the period byte, abort with "Todas as definições globais devem terminar com um ponto." and the rider; exit. 
Move the rider (compiler rules).
Index the global.

To scan a_ name given a_ rider:
Clear the name.
If the compiler's abort flag is set, exit.
If the rider is on any name starter, extend the name with the rider's token; move the rider (compiler rules).
Loop.
If the compiler's abort flag is set, exit.
If the rider is on any name ender, break.
Extend the name with the rider's token.
Move the rider (compiler rules).
Repeat.
If the name is blank, abort with "Digamos que esperava um nome por aí, mas encontrei '" then the rider's token then "'." and the rider; exit.

To scan a_ routine body given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
If the rider's token is the start of any definition, exit.
Put the rider's token's first into the routine body's first.
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
Put the rider's token's last into the routine body's last.
If the rider's token is the colon byte, abort with "Pode ser que você tenha esquecido de colocar um ponto final antes." and the rider; exit.
If the rider's token is not the period byte, move the rider (compiler rules); repeat.
Move the rider (compiler rules).
If the rider's token is the start of any definition, exit.
Repeat.

To scan a_ routine given a_ rider:
If the compiler's abort flag is set, exit.
Add the routine to the routines given the rider's token's first.
Move the rider (compiler rules).
Scan the routine's routine header given the rider.
If the rider's token is the semi-colon byte, scan the routine given the rider (alternate wording); exit.  \ *** for alternate wordings
If the rider's token is not the colon byte, abort with "Este cabeçalho de rotina não está bem formulado." and the routine's locus; exit.
Move the rider (compiler rules).
Scan the routine's routine body given the rider.

To scan a_ routine given a_ rider (alternate wording):  \ *** for alternate wordings
Privatize the rider.
Move the rider (compiler rules).
If the rider's token is not the start of any routine, abort with "Acho que deve haver um ponto e vírgula fora do lugar." and the original rider; exit.
Put the original rider's token's first into the routine's routine body's first.
Put the original rider's token's last into the routine's routine body's last.
Move the original rider (compiler rules).

To scan a_ routine header given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
Put the rider's token's first into the routine header's first.
Put -1 into the routine header's last.
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
If the rider's token is the semi-colon byte, exit. \ *** alternate wordings
If the rider's token is the colon byte, exit.
If the rider's token is the period byte, exit.
Put the rider's token's last into the routine header's last.
Move the rider (compiler rules).
Repeat.

To scan a_ source file:
If the source file is nil, exit.
If the compiler's abort flag is set, exit.
Slap a_ rider on the source file's buffer.
Move the rider (compiler rules).
Loop.
If the compiler's abort flag is set, exit.
If the rider's token is blank, exit.
If the rider's token is the start of any type, scan a_ type given the rider; repeat.
If the rider's token is the start of any global, scan a_ global given the rider; repeat.
If the rider's token is the start of any routine, scan a_ routine given the rider; repeat.
Abort with "Esperava por uma definição, mas tudo que encontrei foi '" then the rider's token then "'." and the rider.
Repeat.

To scan some source files:
If the compiler's abort flag is set, exit.
Get a_ source file from the source files.
If the source file is nil, exit.
Scan the source file.
Repeat.

To scan a_ type given a_ rider:
If the compiler's abort flag is set, exit.
If the rider's token is any portuguese indefinite article, set an portuguese flag.
If the rider's token is any english indefinite article, set an english flag.
Add the type to the types given the rider's token's first.
Move the rider (compiler rules).
Scan the type's name given the rider.
Put the type's name into the type's plural name.
If the portuguese flag is set, pluralize the type's plural name (portuguese rules).
If the english flag is set, pluralize the type's plural name (english rules).
If the rider's token is any has, scan the type given the rider (has or have); exit.
If the rider's token is not any is, abort with "Esperava um 'é' ou um 'são', mas encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
If the rider's token is any numeric literal, scan the type given the rider (unit of measure); exit.
If the rider's token is not any indefinite article, abort with "Esperava um artigo indefinido, mas encontrei '" then the rider's token then "'." and the rider; exit. 
Move the rider (compiler rules).
Scan the type's base name given the rider.
Scan any optional info for_ the type given the rider.
If the rider's token is not the period byte, abort with "As definições de tipo terminam com um ponto, ao invés disso encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Index the type.

To scan a_ type given a_ rider (has or have):
If the compiler's abort flag is set, exit.
Move the rider (compiler rules).
Put "record" into the type's base name.
Scan the type's fields given the rider.
If the rider's token is not the period byte, abort with "As definições de tipo terminam com um ponto, ao invés disso encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Index the type.

To scan a_ type given a_ rider (unit of measure):
If the compiler's abort flag is set, exit.
Convert the rider's token to the type's scale.
If the type's scale is 0, abort with "Zero não é uma escala válida." and the type's locus; exit.
Move the rider (compiler rules).
Scan the type's base name given the rider.
If the rider's token is not the period byte, abort with "Caras devem terminar com um ponto final, encontrei '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Index the type.

The scanning timer is a_ timer.

a_ scratch is a_ local.

To scrub an index:
Get a_ bucket given the index.
If the bucket is nil, exit.
If the bucket's refers are empty, repeat.
Scrub the bucket's refers.
Repeat.

To scrub some refers:
Swap the refers with some other refers.
Loop.
Put the other refers' first into a_ refer.
If the refer is nil, exit.
Remove the refer from the other refers.
If the refer's pointer is nil, destroy the refer; repeat.
Append the refer to the refers.
Repeat.

To set the compiled flag in a_ variable:
If the variable is nil, exit.
If the variable's compiled flag is set, exit.
Set the variable's compiled flag.
If the variable's kind is not "global", exit.
If the variable's literal is nil, exit.
Find a_ routine given "put" and the variable's literal's type and "into" and the variable's type.
If the routine is nil, find the routine given "convert" and the variable's literal's type and "to" and the variable's type; set a_ flag.
If the routine is nil, abort with "O tipo desta definição global e o tipo de sua descrição literal não são compatíveis." and the variable's locus; exit.
Compile the body of the routine.
If the flag is set, put "convert the " then the variable's literal's name then " to the " then the variable's name then ". " into the variable's initializer string.
If the flag is not set, put "put the " then the variable's literal's name then " into the " then the variable's name then ". " into the variable's initializer string.

To skip to the next word in a_ substring:
If the substring is blank, exit.
If the substring's first's target is noise, break.
Add 1 to the substring's first.
Repeat.
Skip any leading noise in the substring.

To skip to the previous word in a_ substring:
If the substring is blank, exit.
If the substring's last's target is noise, break.
Subtract 1 from the substring's last.
Repeat.
Skip any trailing noise in the substring.

a_ source file is a_ thing with a_ path and a_ buffer.

The source files are some source files.

a_ tag is a_ number.

a_ term has a_ variable and a_ phrase.

To transmogrify a_ fragment:
If the compiler's abort flag is set, exit.
If the fragment is nil, exit.
If the fragment's tag is the push address tag, transmogrify the fragment (push address); exit.
If the fragment's tag is the call internal tag, transmogrify the fragment (call internal); exit.
If the fragment's tag is the load address tag, transmogrify the fragment (load address); exit.
If the fragment's tag is the increment tag, transmogrify the fragment (increment); exit.
If the fragment's tag is the dereference tag, transmogrify the fragment (dereference); exit.
If the fragment's tag is the jump false tag, transmogrify the fragment (jump false); exit.
If the fragment's tag is the not tag, transmogrify the fragment (not); exit.
If the fragment's tag is the exit tag, transmogrify the fragment (exit); exit.
If the fragment's tag is the repeat tag, transmogrify the fragment (repeat); exit.
If the fragment's tag is the break tag, transmogrify the fragment (break); exit.
If the fragment's tag is the prolog tag, transmogrify the fragment (prolog); exit.
If the fragment's tag is the epilog tag, transmogrify the fragment (epilog); exit.
If the fragment's tag is the push value tag, transmogrify the fragment (push value); exit.
If the fragment's tag is the call external tag, transmogrify the fragment (call external); exit.
If the fragment's tag is the load eax tag, transmogrify the fragment (load eax); exit.
If the fragment's tag is the save eax tag, transmogrify the fragment (save eax); exit.
If the fragment's tag is the call indirect tag, transmogrify the fragment (call indirect); exit.
If the fragment's tag is the routine address tag, transmogrify the fragment (routine address); exit.

To transmogrify a_ fragment (break):
Put the repeat tag into a_ tag.
Find another fragment given the fragment and the tag.
If the other fragment is nil, put the finalize tag into the tag. \ for break without a_ loop or after a_ loop
Find a_ third fragment given the current routine's fragments' last and the tag (backwards).
If the third fragment is nil, abort with "Internal error - transmogrify a_ fragment (break)"; exit.
If the third fragment's next is nil, abort with "Internal error 2 - transmogrify a_ fragment (break)"; exit.
Attach $E9 and the third fragment's next's address to the fragment. \ jmp the destination's address

To transmogrify a_ fragment (call external):
Attach $FF15 and the fragment's entry's address to the fragment's code. \ call [the fragment's entry's address]

To transmogrify a_ fragment (call indirect):
Attach address loading code to the fragment's code given the fragment's variable. \ put address into edx
Attach $FF12 to the fragment's code. \ call [edx]

To transmogrify a_ fragment (call internal):
Get an address given the fragment's routine.
Attach $E8 and the address to the fragment. \ call the fragment's routine's address

To transmogrify a_ fragment (dereference):
Attach $8B95 and the fragment's variable's offset to the fragment's code. \ mov edx,[ebp+the fragment's variable's offset]
Attach $8B12 to the fragment's code. \ mov edx,[edx]
Attach $8995 and the fragment's variable's offset to the fragment's code. \ mov [ebp+the fragment's variable's offset],edx

To transmogrify a_ fragment (epilog):
If the current routine's callback flag is set, attach $5F5E5B to the fragment's code. \ pop edi, esi, ebx
Attach $8BE5 to the fragment's code. \ mov esp,ebp
Attach $5D to the fragment's code. \ pop ebp
Attach $C2 and the current routine's parameter size to the fragment's code. \ ret the current routine's parameter size

To transmogrify a_ fragment (exit):
Find another fragment given the fragment and the finalize tag.
If the other fragment is nil, abort with "Internal error - transmogrify a_ fragment (exit)"; exit.
Attach $E9 and the other fragment's address to the fragment. \ jmp the destination's address

To transmogrify a_ fragment (increment):
If the fragment's variable is nil, abort with "Internal error - transmogrify a_ fragment (increment)"; exit.
If the fragment's variable's kind is not "scratch", abort with "Internal error 2 - transmogrify a_ fragment (increment)"; exit.
Attach $8185 and the fragment's variable's offset and the fragment's number to the fragment's code. \ add [ebp+the fragment's variable's offset],the fragment's number

To transmogrify a_ fragment (jump false):
Find another fragment given the fragment and the end if tag.
If the other fragment is nil, abort with "Internal error - transmogrify a_ fragment (jump false)"; exit.
Attach $83F800 to the fragment's code. \ cmp eax,0
Attach $0F84 and the other fragment's address to the fragment. \ je the destination's address

To transmogrify a_ fragment (load address):
Attach address loading code to the fragment's code given the fragment's variable. \ put address into edx
Attach $8995 and the fragment's other variable's offset to the fragment's code. \ mov [ebp+the fragment's variable's offset],edx

\To transmogrify a_ fragment (load eax):
\Attach address loading code to the fragment's code given the fragment's variable. \ put address into edx
\If the fragment's variable is nil, abort with "Internal error - transmogrify a_ fragment (load eax)"; exit.
\If the fragment's variable's type is nil, abort with "Internal error 2 - transmogrify a_ fragment (load eax)"; exit.
\If the fragment's variable's type's length is not 4, abort with "Internal error 3 - transmogrify a_ fragment (load eax)"; exit.
\Attach $8B02 to the fragment's code. \ mov eax,[edx]

To transmogrify a_ fragment (load eax):
Attach $B8 and the fragment's flag to the fragment's code. \ mov eax,flag

To transmogrify a_ fragment (not):
Attach $83F001 to the fragment's code. \ xor eax,1

To transmogrify a_ fragment (prolog):
Attach $55 to the fragment's code. \ push ebp
Attach $8BEC to the fragment's code. \ mov ebp,esp
Put the current routine's local size divided by 4 into a_ number.
If the number is not 0, attach $B9 and the number and $6A004975FB to the fragment's code. \ mov ecx,number; loop: push 0; dec ecx; jnz loop
If the current routine's callback flag is set, attach $535657 to the fragment's code. \ push ebx, esi, edi

To transmogrify a_ fragment (push address):
Attach address loading code to the fragment's code given the fragment's variable. \ put address into edx
Attach $52 to the fragment's code. \ push edx

To transmogrify a_ fragment (push value):
Attach address loading code to the fragment's code given the fragment's variable. \ put address into edx
If the fragment's variable is nil, abort with "Internal error - transmogrify a_ fragment (push value)"; exit.
If the fragment's variable's type is nil, abort with "Internal error 2 - transmogrify a_ fragment (push value)"; exit.
Put the fragment's variable's type's length into a_ length.
If the length is 4, attach $FF32 to the fragment's code; exit. \ push [edx]
If the length is 2, attach $66FF32 to the fragment's code; exit. \ push word ptr [edx]
If the length is 1, attach $0FB61252 to the fragment's code; exit. \ movzxb edx,[edx]; push edx
Abort with "Internal error 3 - transmogrify a_ fragment (push value)".

To transmogrify a_ fragment (repeat):
Find another fragment given the fragment and the loop tag (backwards).
If the other fragment is nil, abort with "Internal error - transmogrify a_ fragment (repeat)"; exit.
Attach $E9 and the other fragment's address to the fragment. \ jmp the destination's address

To transmogrify a_ fragment (routine address):
Attach address loading code to the fragment's code given the fragment's variable. \ put address into edx
If the fragment's routine is nil, abort with "Internal error - transmogrify a_ fragment (routine address)"; exit.
Get an address given the fragment's routine.
Attach $C702 and the address to the fragment's code. \ mov [edx],the address

To transmogrify a_ fragment (save eax):
Attach address loading code to the fragment's code given the fragment's variable. \ put address into edx
If the fragment's variable is nil, abort with "Internal error - transmogrify a_ fragment (save eax)"; exit.
If the fragment's variable's type is nil, abort with "Internal error 2 - transmogrify a_ fragment (save eax)"; exit.
Put the fragment's variable's type's length into a_ length.
If the length is 4, attach $8902 to the fragment's code; exit. \ mov [edx],eax
If the length is 2, attach $668902 to the fragment's code; exit. \ mov [edx],ax
If the length is 1, attach $8802 to the fragment's code; exit. \ mov [edx],al
Abort with "Internal error 3 - transmogrify a_ fragment (save eax)".

To transmogrify some fragments:
If the compiler's abort flag is set, exit.
Get a_ fragment from the fragments.
If the fragment is nil, exit.
Transmogrify the fragment.
Repeat.

To transmogrify a_ routine:
If the compiler's abort flag is set, exit.
If the routine is nil, exit.
If the routine's employs moniker is not blank, exit.
If the routine's compiled flag is not set, exit.
Put the routine into the current routine.
Transmogrify the routine's fragments.

To transmogrify some routines:
If the compiler's abort flag is set, exit.
Get a_ routine from the routines.
If the routine is nil, break.
Transmogrify the routine.
Repeat.

The transmogrifying timer is a_ timer.

The type index is an index.

a_ type is a_ thing with
a_ locus (reference),
a_ name, a_ plural name,
a_ partial moniker,
a_ length,
a_ base name, a_ base type (reference),
a_ target name, a_ target type (reference) [pointers only],
a_ scale ratio,
Some fields [records only],
a_ cooking flag,
a_ optional info resolved flag.

a_ type name is a_ name.

The types are some types.

The utility index is an index.

a_ variable is a_ thing with
a_ locus (reference),
a_ kind [literal, global, local, parameter, scratch],
a_ compiled flag,
a_ name, a_ nickname, a_ type name,
a_ type (reference), \ actual type on literal, global, local; dereferenced type on parameters and scratches
An address [globals and literals only] or 
An offset at the address [locals, parameters, and fields only],
a_ count [fields only],
a_ reference flag [fields only],
a_ redefinition target name [fields only],
a_ by-value flag [parameters only],
An global body [globals only],
An initializer string [globals only],
a_ literal (reference) [globals only - constant with which to initalize the global],
a_ hex string called data [literals only].

The writing timer is a_ timer.

To skip any trailing noise in a_ substring:
If the substring is blank, exit.
If the substring's last's target is not noise, exit.
Subtract 1 from the substring's last.
Repeat.

\ dahn - reverse functions
\ to put the xxx uv a/the yyy into zzz
\ internally we turn this into "to put a/the yyy's xxx into zzz"
To compile the header of a_ routine given a_ rider (reverse-possessive function):
If the compiler's abort flag is set, exit.
Set the routine's function flag.
Add a_ monikette to the routine's monikettes given "put".
Move the rider (compiler rules). \ skip "put" or "pôr"
Move the rider (compiler rules). \ skip "the" or Portuguese definite article
Scan a_ name given the rider. \ field name
Move the rider (compiler rules). \ skip "uv" or "de"
If the rider's token is any indefinite article, set a_ flag.
If the flag is set, compile the routine's monikettes and the routine's parameters given the rider (indefinite article).
If the flag is not set, compile the routine's monikettes and the routine's parameters given the rider (definite article).
Add another monikette to the routine's monikettes given "'s " then the name.
If the rider's token is not any reverse-possessive function into, abort with "Esperava a palavra 'em', mas encontrei '" then the rider's token then "'." and the rider; exit.
Add a_ third monikette to the routine's monikettes given "into".
Convert the routine's monikettes to a_ moniker.
If the moniker is in the routine index, abort with "Já sei como '" then the moniker then "'." and the routine's locus; exit.
Index the routine given the routine's monikettes and the routine index.
Move the rider (compiler rules).
If the rider's token is not any indefinite article, abort with "Esperava um artigo indefinido, mas encontrei '" then the rider's token then "'." and the rider; exit.
Compile the routine's monikettes and the routine's parameters given the rider (indefinite article).
If the rider's token is not blank, abort with "Existem outras coisas no final desta função." and the rider; exit.
Convert the routine's monikettes to the routine's moniker.
Index the routine given the routine's monikettes and the routine index. \ for employs

\ dahn - reverse functions
\ to put the xxx uv a/the yyy into zzz
To decide if a_ rider is the start of any reverse-possessive function:
If the compiler's abort flag is set, say no.
If the rider's token is not any put, say no.
Privatize the rider.
Move the rider (compiler rules).
If the rider's token is not any definite article, say no.
Move the rider (compiler rules).
Scan a_ name given the rider.
If the rider is not on any reverse-possessive, say no.
Say yes.
