{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1046\deflangfe1041\themelang1046\themelangfe1041\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f11\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\f38\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f39\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}@MS Mincho;}
{\f40\fbidi \froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f41\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f42\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f44\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f45\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f46\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f47\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f48\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f49\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f61\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f62\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f64\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f65\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f66\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f67\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f68\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f69\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f153\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f151\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f152\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f154\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f155\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f158\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f411\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f412\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\f414\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f415\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f418\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f419\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}
{\f421\fbidi \fswiss\fcharset238\fprq2 Tahoma CE;}{\f422\fbidi \fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f424\fbidi \fswiss\fcharset161\fprq2 Tahoma Greek;}{\f425\fbidi \fswiss\fcharset162\fprq2 Tahoma Tur;}
{\f426\fbidi \fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f427\fbidi \fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f428\fbidi \fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f429\fbidi \fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}
{\f430\fbidi \fswiss\fcharset222\fprq2 Tahoma (Thai);}{\f433\fbidi \fmodern\fcharset0\fprq1 @MS Mincho Western;}{\f431\fbidi \fmodern\fcharset238\fprq1 @MS Mincho CE;}{\f432\fbidi \fmodern\fcharset204\fprq1 @MS Mincho Cyr;}
{\f434\fbidi \fmodern\fcharset161\fprq1 @MS Mincho Greek;}{\f435\fbidi \fmodern\fcharset162\fprq1 @MS Mincho Tur;}{\f438\fbidi \fmodern\fcharset186\fprq1 @MS Mincho Baltic;}{\f441\fbidi \froman\fcharset238\fprq2 Georgia CE;}
{\f442\fbidi \froman\fcharset204\fprq2 Georgia Cyr;}{\f444\fbidi \froman\fcharset161\fprq2 Georgia Greek;}{\f445\fbidi \froman\fcharset162\fprq2 Georgia Tur;}{\f448\fbidi \froman\fcharset186\fprq2 Georgia Baltic;}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbmajor\f31520\fbidi \fmodern\fcharset0\fprq1 MS Gothic Western{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\fdbmajor\f31518\fbidi \fmodern\fcharset238\fprq1 MS Gothic CE{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}
{\fdbmajor\f31519\fbidi \fmodern\fcharset204\fprq1 MS Gothic Cyr{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\fdbmajor\f31521\fbidi \fmodern\fcharset161\fprq1 MS Gothic Greek{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}
{\fdbmajor\f31522\fbidi \fmodern\fcharset162\fprq1 MS Gothic Tur{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\fdbmajor\f31525\fbidi \fmodern\fcharset186\fprq1 MS Gothic Baltic{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31560\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\fdbminor\f31558\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\fdbminor\f31559\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\fdbminor\f31561\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\fdbminor\f31562\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\fdbminor\f31565\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp 
\fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1046\langfe1041\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1046\langfenp1041 \snext0 \sqformat \spriority0 Normal;}
{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1046\langfe1041\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1046\langfenp1041 \snext11 \ssemihidden \sunhideused 
Normal Table;}{\*\cs16 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \ul\cf2 \sbasedon10 \ssemihidden \sunhideused \styrsid14897706 Hyperlink;}{\*\cs17 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \ul\cf12 \sbasedon10 \ssemihidden \sunhideused \styrsid14897706 
FollowedHyperlink;}{\s18\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 
\fs24\lang1046\langfe1041\loch\f0\hich\af0\dbch\af11\cgrid\langnp1046\langfenp1041 \sbasedon0 \snext18 \ssemihidden \sunhideused \styrsid14897706 Normal (Web);}{\s19\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\rtlch\fcs1 \af38\afs16\alang1025 \ltrch\fcs0 \fs16\lang1046\langfe1041\loch\f38\hich\af38\dbch\af11\cgrid\langnp1046\langfenp1041 \sbasedon0 \snext19 \slink20 \ssemihidden \sunhideused \styrsid14897706 Balloon Text;}{\*\cs20 \additive \rtlch\fcs1 
\af38\afs16 \ltrch\fcs0 \fs16\loch\f38\hich\af38\dbch\af11 \sbasedon10 \slink19 \slocked \ssemihidden \styrsid14897706 Texto de bal\'e3o Char;}{\*\cs21 \additive \rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b \sbasedon10 \sqformat \spriority22 \styrsid14897706 
Strong;}{\*\cs22 \additive \rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i \sbasedon10 \sqformat \spriority20 \styrsid14897706 Emphasis;}}{\*\revtbl {Unknown;}}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}}
{\*\rsidtbl \rsid1056589\rsid2709864\rsid12006458\rsid12546122\rsid12984221\rsid14897706}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author HT12345678}
{\operator HT12345678}{\creatim\yr2020\mo12\dy3\hr12\min49}{\revtim\yr2020\mo12\dy3\hr12\min49}{\version2}{\edmins1}{\nofpages148}{\nofwords46503}{\nofchars251121}{\nofcharsws297030}{\vern49169}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/wo
rd/2003/wordml}}\paperw11906\paperh16838\margl1701\margr1701\margt1417\margb1417\gutter0\ltrsect 
\deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml1\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0
\showxmlerrors1\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1701\dgvorigin1417\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale103\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot14897706\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14897706 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang1046\langfe1041\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1046\langfenp1041 {\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
This is the first part. It assumes familiarity with Plain English and the CAL-4700 development environment. Let me know how you do with it. Ask any questions that come to mind.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  
\par 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 When developing a compiler and integrated development environment, we need to keep three "generations" in mind:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The CAL-4700:\~The program we're using to do the development.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The CAL-4700's son: The program we're developing.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The CAL-4700's son's daughter: The program we hope to compile with our new program.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 So let's get to it.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 1. Start up the CAL-4700.exe.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
2. Find the CAL-4700 directory, and use the Duplicate command to make a copy. When asked to name the copy, enter "CAL-4700's son" just like that, but without the quotes. This will keep the two directories next to each ot
her in the Finder, and will be a constant reminder of the son's roots.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 3. Open up the new "CAL-4700's son" directory, and delete the CAL-4700.exe.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 4. Open up the six source files in the son's directory. The quick way is to just drag-select them all, and hit ENTER.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 5. In the Desktop file, find this line...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the lightest gray color into the desktop color.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...and change it to read:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the lightest sky color into the desktop color.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
6. Now it's time to geld our boy, so he can grow a new pair, bit by bit. In the Compiler file, use the Select All command followed by the Comment command to "comment out" the whole file. All the text will turn a delightful shade of blue.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The CAL's son wi
ll no longer compile or run because certain types and routines that are defined in the compiler file are referenced elsewhere in the program. So we have to put those things back. And while we're doing that, we're going to put most of the compiler's "infra
structure" and "testing" routines back as well.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
You can use the usual "find" procedure (CTRL-HOME, CTRL-F, start typing) to locate the stuff we need to put back, drag down the left edge of the work area to select the text, then use the Uncomment command (
or CTRL-U) to do the deed. You should read over everything we put back, and ask questions about anything that you don't understand.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Now let's do it.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 7. We'll be needing our error handling stuff (one type and three routines), specifically:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An abort message is a string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To abort with a string:\line If the compiler's abort flag is set, exit.\line Set the compiler's abort flag.\line 
Put the string into the compiler's abort message.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To abort with a string and a byte pointer:\line If the compiler's abort flag is set, exit.\line Set the compiler's abort flag.\line 
Put the string into the compiler's abort message.\line Find the compiler's abort path and the compiler's abort row# given the byte pointer.\line If the compiler's abort path is blank, exit.\line Extract a file name from the compiler's abort path.\line 
Prepend "Error in " then the file name then ". " to the compiler's abort message.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To abort with a string and a rider:\line If the rider's token is not blank, abort with the string and the rider's token's first; exit.\line 
Abort with the string and the rider's source's last.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
8. We'll also be needing all of our timers. There are 15 of them, corresponding to the 15 time-consuming steps in the compiler process. They look like this...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The adding built-in memory routines timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The adding built-in startup routine timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The addressing timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The calculating timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The compiling routine bodies timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The compiling routine headers timer is a timer.\line The indexing utilities timer is a timer.\line The linking timer is a timer.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The offsetting timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The loading timer is a timer.\line The resolving globals timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The resolving types timer is a timer.\line The scanning timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The transmogrifying timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The writing timer is a timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
...and they're splattered all through the file, but you can easily put the first one back by typing CTRL-HOME, CTRL-F, "timer is a timer" (without the quotes), select and uncomment the line with END SHIFT-HOME\~CTRL-U. You ca
n use CTRL-N followed by END SHIFT-HOME\~CTRL-U for the rest.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 9. Find this type definition and put it back as well:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An address is a number.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 10. These two routines below should also be put back. They're used to conveniently format the listing file.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To advance a buffer:\line Append the return byte to the buffer.\line Append the linefeed byte to the buffer.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To advance a buffer (twice):\line Advance the buffer. \line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 11. The "append" routines below are also needed to format the listing file. There ar
e of 10 them, but there are a handful of intervening "append" routines that are used for other purposes\~that we'll put back later.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append an entry to a buffer (with separator):\line If the entry is nil, append "" to the buffer (with separator); exit.\line Appen
d the entry's name to the buffer (with separator).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a flag to a buffer (with separator):\line Convert the flag to a string.\line Append the string to the buffer (with separator).}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a number to a buffer (as hex with separator):\line Convert the number to a nibble string.\line 
Append the nibble string to the buffer (with separator).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a number to a buffer (with separator):\line Convert the number to a string.\line Append the string to the buffer (with separator).
}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a ratio to a buffer (with separator):\line Convert the ratio to a string.\line Append the string to the buffer (with separator).}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a routine to a buffer (with separator):\line If the routine is nil, append "" to the buffer (with separator); exit.\line Appe
nd the routine's moniker to the buffer (with separator).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a string to a buffer (with separator):\line Append the string to the buffer.\line Append "/" to the buffer.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a tag to a buffer (as a fragment tag string with separator):\line If the tag is the 
break tag, append "break" to the buffer (with separator); exit.\line If the tag is the call external tag, append "call external" to the buffer (with separator); exit.\line 
If the tag is the call indirect tag, append "call indirect" to the buffer (with separator); exit.\line If the tag is the call internal tag, append "call internal" to the buffer (with separator); exit.\line 
If the tag is the dereference tag, append "dereference" to the buffer (with separator); exit.\line If the tag is the end if tag, append "end if" to the buffer (with separator); exit.\line 
If the tag is the epilog tag, append "epilog" to the buffer (with separator); exit.\line If the tag is the exit tag, append "exit" to the buffer (with separator); exit.\line If the tag is the finalize tag, append "finalize" to the buffer (wit
h separator); exit.\line If the tag is the increment tag, append "increment" to the buffer (with separator); exit.\line If the tag is the intel tag, append "intel" to the buffer (with separator); exit.\line 
If the tag is the jump false tag, append "jump false" to the buffer (with separator); exit.\line If the tag is the load address tag, append "load address" to the buffer (with separator); exit.\line 
If the tag is the load eax tag, append "load eax" to the buffer (with separator); exit.\line If the tag is the loop tag, append "loop" to the buffer (with separator); exit.\line If the tag is the not tag, append "not" to the buffer (with separator); exit.
\line If the tag is the prolog tag, append "prolog" to the buffer (with separator); exit.\line If the tag is the push address tag, append "push address" to the buffer (with separator); exit.\line 
If the tag is the push value tag, append "push value" to the buffer (with separator); exit.\line If the tag is the save eax tag, append "save eax" to the buffer (with separator); exit.\line If the tag is the repeat tag, append "
repeat" to the buffer (with separator); exit.\line If the tag is the routine address tag, append "routine address" to the buffer (with separator); exit.\line Append "?" to the buffer (with separator).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a type to a buffer (with separator):\line If the type is nil, append "" to the buffer (with separator); exit.\line 
Append the type's name to the buffer (with separator).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a variable to a buffer (with separator):\line If the variable is nil, append "" to the buffer (with separator); exit.\line 
Append the variable's name to the buffer (with separator).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
12. Woohoo! Done with the "A"s. Now we need to put our tags back, which are splattered around like the timers. There are 22 of them. Look for "is a tag equal to" and use the same END SHIFT-HOME CTRL-U keyboard sequence 
to make quick work of putting them back. Don't forget the tag type, shown here at the top:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A tag is a number.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The break tag is a tag equal to 1.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The call external tag is a tag equal to 2.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The call indirect tag is a tag equal to 3.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The call internal tag is a tag equal to 4.\line The dereference tag is a tag equal to 5.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The end if tag is a tag equal to 6.\line The epilog tag is a tag equal to 7.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The exit tag is a tag equal to 8.\line The finalize tag is a tag equal to 9.\line The increment tag is a tag equal to 10.\line The intel
 tag is a tag equal to 11.\line The jump false tag is a tag equal to 12.\line The load address tag is a tag equal to 13.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The load eax tag is a tag equal to 14.\line The loop tag is a tag equal to 15.\line The not tag is a tag equal to 16.\line 
The prolog tag is a tag equal to 17.\line The push address tag is a tag equal to 18.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The push value tag is a tag equal to 19.\line The repeat tag is a tag equal to 21.\line The routine address tag is a tag equal to 22.\line 
The save eax tag is a tag equal to 20.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 While you're doing that, think about this: those 22 tags define the }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 only}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 things the compiler generates machine code to do. Which means the whole CAL (and every program written with the CAL) runs on just 22 machine-code "instructions." Wouldn't it be great if Intel built CPUs with this (and Aunt Tilly) i
n mind? Fewer transistors, lower costs, and no cooling fans necessary!}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 13. Done with the "B"s. And that brings us to the heart of the whole compiler:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (start).\line \\Compile the directory (load the source files).\line \\Compile the directory (scan the source files).\line \\
Compile the directory (resolve the types).\line \\Compile the directory (resolve the globals).\line \\Compile the directory (compile the headers of the routines).\line \\Compile the directory (calculate lengths and offsets of types).\line \\
Compile the directory (add the built-in memory routines).\line \\Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\
Compile the directory (add and compile the built-in startup routine).\line \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).
\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
In this case, don't uncomment the whole routine. Uncomment only the header, and add the "abort" line you see above. Note the two periods in the abort message, one inside and one outside the string. Leave the rest blue.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Isn't it handy to be able to see, at a glance, which parts of the program are commented, and which parts are not? Now }{\rtlch\fcs1 
\ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 that's }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 a proper use of color-coding.
}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 14. Time to put back the compiler record:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The compiler has\line a\~directory,\line a\~timer,\line an abort flag,\line an abort message,\line an abort path,\line an abort row#,\line a
\~name count,\line an\~exe buffer,\line a\~listing buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 15. Then a couple of trivial "deciders":}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a byte is any mark:\line If the byte is the period byte, say yes.\line If the byte is the comma byte, say yes.\line 
If the byte is the semi-colon byte, say yes.\line If the byte is the colon byte, say yes.\line If the byte is the exclamation\~ byte, say yes.\line If the byte is the question-mark byte, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any flag literal:\line If the string is "yes", say yes.\line If the string is "no", say yes.\line Say no.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 16. Then the "entry" type:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An entry is a thing with\line A name address,\line A thunk address,\line A name,\line An address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 There's one "entry" for each DLL routine that we call.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 17. Now we're up to the "F"s. Let's put back the finalize routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To finalize the compiler:\line Destroy the utility index.\line Destroy the routine index.\line Destroy the literal index.\line 
Destroy the global index.\line Destroy the type index.\line Destroy the imports.\line Destroy the routines.\line Destroy the literals.\line Destroy the globals.\line Destroy the types.\line Destroy the source files.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 18. And now, the "fragment" type, that makes use of all those tags we put back earlier:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A fragment is a thing with\line A tag [break, call external, call indirect, call inter
nal, dereference, end if, epilog, exit, finalize, increment, intel, jump false, load address, load eax, loop, not, prolog, push address, push value, save eax, repeat, routine address],\line 
A variable (reference) [call indirect, dereference, increment, load address, load eax, pop, push address, push value, routine address, save eax],\line Another variable (reference) [load address],\line 
A routine (reference) [call internal, routine address],\line An entry (reference) [call external],\line A number [increment],\line An address,\line A hex string called code.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
19. Next, the "global body" type. This is a substring that spans the part of a global variable definition in the source code that we're not ready to process until later:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A global body is a substring.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 20. Time for more keyboarding fun. All our indexes need to be put back. There are only 5.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The global index is an index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The literal index is an index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The routine index is an index.\line The type index is an index.\line The utility index is an index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 While you're putting those back, think about this: All a\~compiler really has to do, as it\~wades through source\~code, is\~
to collect the information it needs to put GLOBALS, LITERALS, and ROUTINES in the right places in an EXE file. It uses TYPES to tell it how big\~things are, but types\~don't end up\~anywhere in the EXE.\~
The rest is decoration. If you're wondering about the Utility Index, it's used to allow generic routines to operate on types that aren't formally specified in their headers. For example, the "number" typ
e and the "pointer" type are distinct in our Noodle; but pointers are really just numbers, so routines like "To add a number to another number" ought to work on pointers as well as numbers. So, as you'll see later, we do a little type trickery, using the 
Utility Index, to allow that to happen.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 21. Now put back these three guys:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A global is a variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A field is a variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The globals are some globals.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The first\~two are\~types that say global variables and fields\~are a lot like any other variables.
 The third is a global variable itself: it's the list on which we hang all the global variables we find.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 22. Moving along. Put these three things back:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An import header is a record with\line An address called original first thunk,\line A number called timestamp,\line 
An address called forwarder chain,\line An address called name memory address,\line An address called first thunk memory address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An import is a thing with\line A name address,\line A header address,\line A name,\line An import header,\line Some entries.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The imports are some imports.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An "import" is a DLL. That's what Windows calls them. Ugly stuff.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 23. Let's not forget this silly little guy...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize the compiler:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...who does nothing at all. We put it in, and left it in, just to make Desktop code up above symmetrical.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 2
4. And now we put back the code we need for testing. Everything that starts with "To List..." except the file lines that list indexes (see below). Leave them out; we haven't created the indices yet, so they won't work and the thing will blow away. The lis
ting stuff is all in a bunch; just find the first routine and drag down until you've got them all. But make sure you re-comment those five lines.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list:\line Clear the compiler's listing.\line List the compiler's abort message in the compiler's listing.\line List the 
types under "TYPES:" in the compiler's listing.\line List the globals under "GLOBALS:" in the compiler's listing.\line List the literals under "LITERALS:" in the compiler's listing.\line List the routines under "ROUTINES:" in the compiler's listing.\line 
}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\List the type index under "TYPE INDEX:" in the compiler's listing.\line \\
List the global index under "GLOBAL INDEX:" in the compiler's listing.\line \\List the literal index under "LITERAL INDEX:" in the compiler's listing.\line \\List the routine index under "ROUTINE INDEX:" in the compiler's listing.\line \\
List the utility index under "UTILITY INDEX:" in the compiler's listing.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 List the imports under "IMPORTS:" in the compiler's listing.
\line List the source files under "SOURCE FILES:" in the compiler's listing.\line List the timers under "TIMERS:" in the compiler's listing.\line Write the compiler's listing to the compiler's listing path.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list an abort message in a buffer:\line If the abort message is blank, exit.\line 
Append "COMPILE ABORTED - LISTING INCOMPLETE" to the buffer.\line Advance the buffer (twice).\line Append the abort message to the buffer.\line Advance the buffer (twice).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a bucket in a buffer:\line If the bucket's refers are empty, exit.\line Append "/bucket" to the buffer (with separator).\line 
Advance the buffer.\line List the bucket's refers in the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some entries in a buffer:\line Get an entry from the entries.\line If the entry is nil, exit.\line List the entry in the buffer.
\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list an entry in a buffer:\line If the entry is nil, exit.\line Append "/entry" to the buffer (with separator).\line Append the en
try's name to the buffer (with separator).\line Append the entry's address to the buffer (as hex with separator).\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a fragment in a buffer:\line Append "/fragment" to the buffer (with separator).\line Append the fragment's tag to the buffer (a
s a fragment tag string with separator).\line Append the fragment's variable to the buffer (with separator).\line Append the fragment's other variable to the buffer (with separator).\line Append the fragment's routine to the buffer (with separator).\line 
Append the fragment's entry to the buffer (with separator).\line Append the fragment's number to the buffer (as hex with separator).\line Append the fragment's address to the buffer (as hex with separator).\line 
Convert the fragment's code to a nibble string.\line Append the nibble string to the buffer (with separator).\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some fragments in a buffer:\line Get a fragment from the fragments.\line If the fragment is nil, exit.\line 
List the fragment in the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list an import in a buffer:\line If the import is nil, exit.\line Append "/import" to the buffer (with separator).\line 
Append the import's name to the buffer (with separator).\line Advance the buffer.\line List the import's entries in the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some imports in a buffer:\line Get an import from the imports.\line If the import is nil, exit.\line List the import in the buffer.
\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some imports under a string in a buffer:\line Append the string to the buffer.\line Advance the buffer (twice).\line 
If the imports are empty, exit.\line List the imports in the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list an index in a buffer:\line Append "/" then the index's used bucket count then " buckets" to the buffer (with separator).\line 
Append the index's count then " refers" to the buffer (with separator).\line Advance the buffer (twice).\line Loop.\line Get a bucket given the index.\line If the bucket is nil, exit.\line List the bucket in the buffer.\line Repeat.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list an index under a string in a buffer:\line Append the string to the buffer.\line Advance the buffer (twice).\line 
If the index is empty, exit.\line List the index in the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a refer in a buffer:\line If the refer is nil, exit.\line Append "/refer" to the buffer (with separator).\line 
Append the refer's string to the buffer.\line If the refer's pointer is nil, append "..." to the buffer.\line Append "/" to the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some refers in a buffer:\line Get a refer from the refers.\line If the refer is nil, exit.\line List the refer in the buffer.\line 
Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a routine in a buffer:\line If the routine is nil, exit.\line Append "/routine" to the buffer (with separator).\line 
Append the routine's moniker to the buffer (with separator).\line Append the routine's compiled flag to the buffer (with separator).\line Append the routine's callback flag to the buffer (with separator).\line 
Append the routine's decider flag to the buffer (with separator).\line Append the routine's function flag to the buffer (with separator).\line Append the routine's employs moniker to the buffer (with separator).\line 
Append the routine's parameter size to the buffer (with separator).\line Append the routine's local size to the buffer (with separator).\line Append the routine's address to the buffer (as hex with separator).\line Advance the buffer.\line 
List the routine's parameters in the buffer.\line List the routine's locals in the buffer.\line List the routine's fragments in the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some routines in a buffer:\line Get a routine from the routines.\line If the routine is nil, exit.\line 
List the routine in the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some routines under a string in a buffer:\line Append the string to the buffer.\line Advance the buffer (twice).\line 
If the routines are empty, exit.\line List the routines in the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a source file in a buffer:\line If the source file is nil, exit.\line Append "/source file" to the buffer (with separator).\line 
Append the source file's path to the buffer (with separator).\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some source files in a buffer:\line Get a source file from the source files.\line If the source file is nil, exit.\line 
List the source file in the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some source files under a string in a buffer:\line Append the string to the buffer.\line Advance the buffer (twice).\line 
If the source files are empty, exit.\line List the source files in the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a timer given a string in a buffer:\line Append "/timer" to the buffer (with separator).\line 
Append the string to the buffer (with separator).\line Append the timer's string to the buffer (with separator).\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list the timers under a string in a buffer:\line Append the string to the buffer.\line Advance the buffer (twice).\line 
List the loading timer given "loading" in the buffer.\line List the scanning timer given "scanning" in the buffer.\line List the resolving types timer given "resolving types" in the buffer.\line 
List the resolving globals timer given "resolving globals" in the buffer.\line List the compiling routine headers timer given "compiling routine headers" in the buffer.\line List the calculating timer given "calculating" in the buffer.\line 
List the adding built-in memory routines timer given "adding built-in memory routines" in the buffer.\line List the indexing utilities timer given "indexing utilities" in the buffer.\line List
 the compiling routine bodies timer given "compiling routine bodies" in the buffer.\line List the adding built-in startup routine timer given "adding built-in startup routine" in the buffer.\line List the offsetting timer given "offsetting" in the buffer.
\line List the addressing timer given "addressing" in the buffer.\line List the transmogrifying timer given "transmogrifying" in the buffer.\line List the linking timer given "linking" in the buffer.\line 
List the writing timer given "writing" in the buffer.\line List the compiler's timer given "total" in the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a type in a buffer:\line If the type is nil, exit.\line Append "/type" to the buffer (with separator).\line 
Append the type's name to the buffer (with separator).\line Append the type's plural name to the buffer (with separator).\line Append the type's length to the buffer (as hex with separator).\line Append the type's base name to the buffer (with separator).
\line Append the type's base type to the buffer (with separator).\line Append the type's target name to the buffer (with separator).\line Append the type's target type to the buffer (with separator).\line 
Append the type's scale to the buffer (with separator).\line Advance the buffer.\line List the type's fields in the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some types in a buffer:\line Get a type from the types.\line If the type is nil, exit.\line List the type in the buffer.\line 
Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some types under a string in a buffer:\line Append the string to the buffer.\line Advance the buffer (twice).\line 
If the types are empty, exit.\line List the types in the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list a variable in a buffer:\line If the variable is nil, exit.\line Append "/variable" to the buffer (with separator).\line 
Append the variable's kind to the buffer (with separator).\line Append the variable's compiled flag to the buffer (with separator).\line Append the variable's name to the buffer (with separator).\line 
Append the variable's nickname to the buffer (with separator).\line Append the variable's type name to the buffer (with separator).\line Append the variable's type to the buffer (with separator).\line Append the variable's addre
ss [or offset] to the buffer (as hex with separator).\line Append the variable's by-value flag to the buffer (with separator).\line Append the variable's count to the buffer (with separator).\line 
Append the variable's reference flag to the buffer (with separator).\line Append the variable's redefinition target name to the buffer (with separator).\line Append the variable's literal to the buffer (with separator).\line 
Convert the variable's data to a nibble string.\line Append the nibble string to the buffer (with separator).\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some variables in a buffer:\line Get a variable from the variables.\line If the variable is nil, exit.\line 
List the variable in the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list some variables under a string in a buffer:\line Append the string to the buffer.\line Advance the buffer (twice).\line 
If the variables are empty, exit.\line List the variables in the buffer.\line Advance the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 25. Another type and an associated\~global list (we treat literals like global variables):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A literal is a variable.
\par \~
\par The literals are some literals.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 26. A type for local variables:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par A local is a variable.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 There's no global list of local variables because they hang on separate lists inside each routine record.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 27. And here's a goodie:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A locus is a byte pointer.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A "locus" points to the very spot in th
e source code where an error is discovered. That, plus a fully qualified path, lets the Desktop find and position the programmer on the offending line of code when an error is discovered.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 28. Routines are internally known by their "monikers" which are ma
de up of monikettes, where each monikette can be a word, a bunch of words, a type, or a variable. So we need this stuff put back:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A moniker is a string.
\par \~
\par A monikette is a thing with\line a string,\line a type (reference),\line a variable (reference),\line \\ for bubbling\line a current type (reference),\line a current substring.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 29. Along with this type definition:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A nickname is a name.
\par \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
A "nickname" is the short name for a variable. "the left", for example, instead of "the left coordinate". It's typically the adjective that precedes the type name noun.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 30. Now one more kind of variable:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A parameter is a variable.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Again, there's no global list of parameters because they're kept on separate lists in each routine record.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 31. And that brings us to a couple of "function-style routines" (routines that return a value and that can thus be used as expressions):}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To put the compiler's exe path into a path:\line Extract a designator from the compiler's directory.\line Remove any trailing backslash from the designator.\line Put the compiler's directory then the designator then ".exe" into the path.
\par \~
\par To put the compiler's listing path into a path:\line Extract a designator from the compiler's directory.\line Remove any trailing backslash from the designator.\line Put the compiler's directory then the designator then ".lst" into the path.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
These routines let us say "the compiler's exe path" and "the compiler's listing path" as if those two things were fields in the compiler record. Kind of like "derived data" or a "calculated field" in a database.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 32. Now some routine stuff:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par A routine body is a substring.
\par \~
\par A routine header is a substring.
\par \~
\par The routine index is an index.
\par \~
\par A routine is a thing with\line A locus (reference),\line A callback flag,\line A decider flag,\line A function flag,\line A compiled flag,\line A nickname index,\line A moniker, some monikettes, some parameters, a parameter size,\line An employs moniker,
\line Some locals, a local size,\line A routine header, a header string,\line A routine body, a body string,\line Some fragments,\line An address.
\par \~
\par A routine reference is some monikettes.
\par \~
\par The routines are some routines.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 33. Almost there.\~Up to\~the "S"s. Let's not forget the source code! Put these back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A source file is a thing with a path and a buffer.
\par \~
\par The source files are some source files.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 34. We need our type stuff, too:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A type is a thing with\line A locus (reference),\line A name, a plural name,\line A partial moniker,\line A length,\line A base name, a base type (reference),\line A target name, a target type (reference) [pointers only],\line A scale ratio,\line 
Some fields [records only],\line A cooking flag,\line A optional info resolved flag.
\par \~
\par A type name is a name.
\par \~
\par The types are some types.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 35. And last but not least, our multi-purpose variable record:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A variable is a thing with\line A locus (reference),\line A kind [literal, global, local, parameter, scratch],\line A compiled flag,\line A name, a nickname, a type name,\line A type (reference), }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ actual type on literal, global, local; dereferenced type on parameters and scratches\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An address [globals and literals only] or \line An offset at the address [locals, parameters, and fields only],\line A count [fields only],\line A reference flag [fields only],\line 
A redefinition target name [fields only],\line A by-value flag [parameters only],\line An global body [globals only],\line An initializer string [globals only],\line A literal (reference) [globals only - constant with which to initalize the global],\line 
A hex string called data [literals only].
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that's }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 almost}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  it for this time around. Let's test. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 36. Run the CAL-4700's son. Assuming it worked, congratulations are in order. It's a boy! And the blue desktop will serve to remind us wh
ich generation we're in. ALT-TAB back and forth a couple of times.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
37. Now let's try to make a grand-baby. Working in the CAL-4700's son (blue desktop), find the CAL-4700's son directory and use the Duplicate command to make a copy. Call it "CAL-4700's son's daughter" too keep the family together in the Finder.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 38. Now, still in the blue,\~open up the daughter and delete the CAL-4700's son.exe.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 39. Still in the blue, open up the six source files in the daughter directory.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 40. Change the line in the daughter's desktop that says...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par Put the lightest sky color into the desktop color.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...to say...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the lightest red color into the desktop color.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 41. Now, still in the blue, try to compile or run or list the daughter. You should get this message:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf6\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 "I'm not old enough to make babies."}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Ta Da! End of Part 01.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \lang1033\langfe1041\langnp1033\insrsid12006458\charrsid12984221 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14897706 {\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f40\fs24\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Here are the rest of the parts. A graphic or two may have gotten inadvertently deleted when I combined them; let me know
 if it looks like something important is missing.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 So where were we? Ah, yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 42. Close up the Son of CAL (if you haven't already) and get back to the tasteful and non-distracting gray of the CAL-4700. Then find the 
CAL-4700's son directory and open up the son's six source files.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 43. Now find the "compile a directory" routine, move\~our temporary "abort" line down a notch, and uncomment the\~
"Compile a directory (start)" step, like so:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (load the source files).\line \\Compile the directory (scan the source files).\line \\Compile the directory (resolve the types).
\line \\Compile the directory (resolve the globals).\line \\Compile the directory (compile the headers of the routines).\line \\Compile the directory (calculate lengths and offsets of types).\line \\
Compile the directory (add the built-in memory routines).\line \\Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\
Compile the directory (add and compile the built-in startup routine).\line \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).
\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 44. And put these guys back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (start):\line Show status "Starting...".\line Finalize the compiler.\line Start the compiler's timer.\line Initia
lize the compiler given the directory.\line Add the built-in types.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A built-in type is a type.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par We "Finalize the compiler" to clean up anything that might be hanging around from a previous compile.
\par \~
\par 45. As you can see, we're going to need this routine, too:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize the compiler given a directory:\line Put the directory into the compiler's directory.\line 
Put 0 into the compiler's name count.\line Clear the compiler's abort flag.\line Clear the compiler's abort message.\line Clear the compiler's abort path.\line Put 0 into the compiler's abort row#.\line Void the current routine.\line 
Create the type index with 4027 [buckets].\line Create the global index with 4027 [buckets].\line Create the literal index with 4027 [buckets].\line Create the routine index with 7919 [buckets].\line Create the utility index with 4027 [buckets].}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 46. Now that we've got our indices created, we can uncomment those 5 blue lines in the List routine, as well:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To list:\line Clear the compiler's listing.\line List the compiler's abort message in the compiler's listing.\line 
List the types under "TYPES:" in the compiler's listing.\line List the globals under "GLOBALS:" in the compiler's listing.\line List the literals under "LITERALS:" in the compiler's listing.\line 
List the routines under "ROUTINES:" in the compiler's listing.\line List the type index under "TYPE INDEX:" in the compiler's listing.\line List the global index under "GLOBAL INDEX:" in the compiler's listing.\line 
List the literal index under "LITERAL INDEX:" in the compiler's listing.\line List the routine index under "ROUTINE INDEX:" in the compiler's listing.\line List the utility index under "UTILITY INDEX:" in the compiler's listing.\line 
List the imports under "IMPORTS:" in the compiler's listing.\line List the source files under "SOURCE FILES:" in the compiler's listing.\line List the timers under "TIMERS:" in the compiler's listing.\line Wr
ite the compiler's listing to the compiler's listing path.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 47. We're going to be needing this global variable:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The current routine is a routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 48. And these two routines as well:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add the built-in types:\line Add a built-in type given "byte" and "bytes" and 1.\line 
Add another built-in type given "record" and "records" and 0.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a built-in type given a name and a plural name and a length:\line 
Add the built-in type to the types given the name and the plural name and the name.\line Put the length into the built-in type's length.\line Put the built-in type into the built-in type's base type.\line Index the built-in type.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note that }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 byte}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  and\~}{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 record}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~are the only types defined in the compiler itself; all the other "built-in" types (like }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 number}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  and }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 string}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  and }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 ratio}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , etc)\~are in the Noodle.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
49. We add types in a number of places when we're compiling, and sometimes it's convenient to do it one way, sometimes another. So let's put back these\~3 "add a type" helper routines as well:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a type to some types given a locus:\line Create the type.\line Append the type to the types.\line 
Put the locus into the type's locus.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a type to some types given a name and a plural name and a base name:\line 
Add the type to the types given the name and the plural name and the base name and nil.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a type to some types given a name and a plural name and a base name and a locus:\line Create the type.\line 
Append the type to the types.\line Put the locus into the type's locus.\line Put the name into the type's name.\line Put the plural name into the type's plural name.\line Put the base name into the type's base name.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 50. We'll also need the routine below, that allocates and initializes a type record in the Heap:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To create a type:\line Allocate memory for the type.\line Put 0/1 into the type's scale.\line Put -1 into the type's length.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 51. And we'll need these two routines to index our types:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To index a type:\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line Index the type given the type's name.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To index a type given a name:\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line 
Find an existing type given the name and the type index.\line If the existing type is nil, index the type given the name and the type index; exit.\line Put the type's locus into a locus.\line If the locus is nil, put the existing type's loc
us into the locus. \\ point the error to a type in the source code, not a generated type\line Abort with "I think I've seen this '" then the name then "' type somewhere before; it must be a duplicate." and the locus.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 52. This is a little premature, but the abo
rt in the above routine calls another abort routine that needs a little help from the three guys below, so we need to put them back, too:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a path and a row# given a byte pointer:\line Clear the path.\line Put 0 into the row#.\line Find a source file given the by
te pointer.\line If the source file is nil, exit.\line Put the source file's path into the path.\line Find the row# given the source file and the byte pointer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a source file given a byte pointer:\line If the byte pointer is nil, void the source file; exit.\line Loop.\line 
Get the source file from the source files.\line If the source file is nil, exit.\line If the byte pointer is less than the source file's buffer's first, repeat.\line If the byte pointer is greater than the source file's buffer's last, repeat.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a row# given a source file and a byte pointer:\line If the byte pointer is nil, put 0 into the row#; exit.\line 
Slap a substring on the source file's buffer.\line Put 1 into the row#.\line Loop.\line If the substring is blank, exit.\line If the substring's first is the byte pointer, exit.\line If the substring's first's target is the return byte, add 1 to the row#.
\line Add 1 to the substring's first.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 53. And that's about it for this step. Let's run it as see what we've got. Press CTRL-R.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 54. Now we're in the blue. Find and open the daughter's six files, then execute\~
the List command (CTRL-L). The compile will still abort with our "}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf6\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 I'm not old enough to make babies}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 " message, but this time a listing file will be created.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 55. On the far right tab, open up the daughter's directory, find the file with the
 ".lst" extension, and double-click it. You should see something like this at the top...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 COMPILE ABORTED - LISTING INCOMPLETE}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 I'm not old enough to make babies.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TYPES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/byte/bytes/00000001/byte/byte///0/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/record/records/00000000/record/record///0/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 GLOBALS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 LITERALS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ROUTINES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TYPE INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /2 buckets/2 refers/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
...which shows that our two built-in types got created and hung on the list properly, and that our type index is working, with 2 buckets used to hold 2 refers (one for each type).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And after a bunch of other stuff that we don't have, at the bottom of the listing, you'll find our timers...}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/0/\line /timer/scanning/0/\line /timer/resolving types/0/\line /timer/resolving globals/0/\line /timer/
compiling routine headers/0/\line /timer/calculating/0/\line /timer/adding built-in memory routines/0/\line /timer/indexing utilities/0/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line /timer/offsetting/0/\line 
/timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line /timer/total/0/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...which tell us we don't have any performance bottlenecks yet. Sweet.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Next time, we'll find and load up the source files... Stay tuned.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Alrighty, then. Time to load up our source files.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
56. Close up the Son of CAL (if you haven't already) and get back to the CAL-4700. Then find the CAL-4700's son directory and open up the son's six source files (if they're not already open).}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 57. Now find the "compile a directory" routine, move\~our temporary "abort" line down another notch, and uncomment the\~
"Compile a directory (load the source files)" step, like so:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Abort with "I'm not old enough to make babies.".}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (scan the source files).\line \\Compile the directory (resolve the types).\line \\Compile the directory (resolve the globals).\line \\
Compile the directory (compile the headers of the routines).\line \\Compile the directory (calculate lengths and offsets of types).\line \\Compile the directory (add the built-in memory routines).\line \\
Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\Compile the directory (add and compile the built-in startup routine).\line \\
Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\Compile the directory (write the exe).\line \\
Compile the directory (stop).}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 58. Then put these 3 routines back in:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (load the source files):\line If the compiler's abort flag is set, exit.\line Show status "Loading...".\line 
Start the loading timer.\line Load the source files.\line Stop the loading timer.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To load a source file:\line If the source file is nil, exit.\line Load the source file's path into the source file's buffer.\line 
If the i/o error is not blank, abort with "Could not load the file named '" then the source file's path then "'."; exit.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To load some source files:\line Loop.\line If the compiler's abort flag is set, exit.\line Get an item from the compiler's directory.\line 
If the item is not found, break.\line If the item's kind is not "file", repeat.\line If the item's extension is not blank, repeat.\line If the item looks reamish, repeat.\line Add a source file to the source files given the item's path.\line 
Load the source file.\line Repeat.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
As you know, the CAL expects a program's source code to be stored as one or more text files in a single directory. One of those files is usually
 a copy of the Noodle. It doesn't matter what order the files are in, and it doesn't matter what their names are, except that he will only attempt to compile files with no extension.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A diligent Plain English programmer, however,\~will typically use the CA
L's Writer to author a user manual and other documentation for a program. Since it's convenient to keep such documentation in the same directory as the source code, and since such documentation files will not have an extension, we need the CAL to skip the
m when he's collecting source code to compile.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
59. Internally, documents created with the CAL's writer are called "reams" (as in a "ream of paper"). And that's why, in the above routine, files that look "reamish" are passed over. Uncomment the decider rou
tine shown below so the compiler will be able to recognize "reamish" files:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if an item looks reamish:\line Load the item's path into a buffer.\line If the buffer starts with "ream cal", say yes.\line 
Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par 60. We're also going to need these two routines:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a source file to some source files given a path:\line Create the source file.\line Append the source file to the source files.\line 
Put the path into the source file's path.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To create a source file:\line Allocate memory for the source file.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 61. And we're done wit
h this step. Let's see what we've got. Run the Son of CAL and when you've got the blue desktop up, find the son's daughter and open up her source files. Then create an updated listing file with CTRL-L.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 62. Still in the blue, find and open the daughter's 
listing on the far right tab. The top part of the listing will be the same as before, but at the bottom you'll see something like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 SOURCE FILES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /source file/c:\\cal-4700's son's daughter\\the compiler/\line /source file/c:\\cal-4700's son's daughter\\the desktop/\line /source file/c:
\\cal-4700's son's daughter\\the editor/\line /source file/c:\\cal-4700's son's daughter\\the finder/\line /source file/c:\\cal-4700's son's daughter\\the noodle/\line /source file/c:\\cal-4700's son's daughter\\the writer/}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/140/\line /timer/scanning/0/\line /timer/resolving types/0/\line /timer/resolving globals/0/\line 
/timer/compiling routine headers/0/\line /timer/calculating/0/\line /timer/adding built-in memory routines/0/\line /timer/indexing utilities/0/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line 
/timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line /timer/total/140/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
TA DA! Now we're (finally) ready to teach our boy how to read.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Now that we've got all our source files in memory, it's time to see what they have to say.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
63. Close up the Son of CAL (if you haven't already) and get back to the CAL-4700. Then find the CAL-4700's son directory and open up the son's six source files (if they're not already open).}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 64. Now find the "compile a directory" routine, move\~our temporary "abort" line down another notch, and uncomment the\~
"Compile a directory (scan the source files)" step, like so:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Abort with "I'm not old enough to make babies.".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line \\
Compile the directory (resolve the types).\line \\Compile the directory (resolve the globals).\line \\Compile the directory (compile the headers of the routines).\line \\Compile the directory (calculate lengths and offsets of types).\line \\
Compile the directory (add the built-in memory routines).\line \\Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\
Compile the directory (add and compile the built-in startup routine).\line \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).
\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 65. We'll be needing this guy to get us going:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (scan the source files):\line If the compiler's abort flag is set, exit.\line Show status "Scanning...".\line 
Start the scanning timer.\line Scan the source files.\line Stop the scanning timer.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And this little loop to make sure we scan all the source files in the project:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scan some source files:\line If the compiler's abort flag is set, exit.\line Get a source file from the source files.\line 
If the source file is nil, exit.\line Scan the source file.\line Repeat.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 66.\~A\~Plain English program\~is a\~
collection of TYPES, GLOBALS, and ROUTINES, in any order. This is the top-level scanner that goes looking for those things:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a source file:\line If the source file is nil, exit.\line If the compiler's abort flag is set, exit.\line Slap a rider on the source file's buffer.\line Move the rider (compiler rules).\line Loop.\line If the compiler's abort flag is set, exit.
\line If the rider's token is blank, exit.\line If the rider's token is the start of any type, scan a type given the rider; repeat.\line If the rider's token is the start of any global, scan a global given the rider; repeat.\line 
If the rider's token is the start of any routine, scan a routine given the rider; repeat.\line Abort with "I was hoping for a definition but all I found was '" then the rider's token then "'." and the rider.\line Repeat.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
67. The routine above needs a lot of help, first, to move that rider around, and secondly, to do some detailed scanning once he's found a type, a global, or a routine to scan. Here's one of the "move a rider" routines that he needs:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To move a rider (code rules - noise):\line Bump the rider.\line If the rider's source is blank, exit.\line If the rider's source's first's target is noise, repeat.
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 That guy simply skips any "noise" in the source file. When he's done, what's left of the\~
rider's source will start with the next non-noise byte in the file, and the noise that was sucked up will be spanned by the rider's token. Noise is defined in the Noodle (not the compiler)\~like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a byte is noise:\line If the byte is less than or equal to the space byte, say yes.\line 
If the byte is the delete byte, say yes.\line If the byte is the non-breaking-space byte, say yes.\line If the byte is 129, say yes.\line If the byte is 141, say\~ yes.\line If the byte is 143, say yes.\line If the byte is 144, say yes.\line 
If the byte is 157, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 68. Here's another "move a rider" routine we'll be needing:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider (code rules - comment):\line Bump the rider.\line If the rider's source is blank, exit.\line 
If the rider's source's first's target is not the return byte, repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
This guy assumes we're sitting on the start of a comment (the backslash character) and simply sucks up bytes until he hits a return byte (the end of a line)
. When he's done, what's left of the rider's source will start with that return byte, and the rider's token will span the whole comment, including the backslash.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 69. We need a similar "move a rider" routine for remarks:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider (code rules - remark):\line If the rider's source is blank, exit.\line 
If the rider's source's first's target is the return byte, break.\line If the rider's source's first's target is the left-bracket byte, add 1 to a count.\line If the rider's source's first's target is the right-bracket byte, subtract 1 from the count.
\line Bump the rider.\line If the count is 0, break.\line Repeat.\~ }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
This time we're starting on the start of a remark (a left-bracket "["), and we skip everything up to a return byte (the end of a line) or a closing right-bracket ("]"), al
lowing for the possibility that the programmer may have remarks inside his remarks. When this routine is done, what's left of the rider's source will start with either a return byte, or the first character after the closing right-bracket, and the rider's 
token will span the entire remark.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 70. We need a similar "move a rider" routine for qualifiers, which can also be "nested":}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider (code rules - qualifier):\line If the rider's source is blank, exit.\line If the rider's source's first's target is the ret
urn byte, break.\line If the rider's source's first's target is the left-paren byte, add 1 to a count.\line If the rider's source's first's target is the right-paren byte, subtract 1 from the count.\line Bump the rider.\line If the count is 0, break.
\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 71. And another for strings, that may\~include doubled-up double-quotes to indicate imbedded\~double-quote marks:}{\rtlch\fcs1 \af0\afs27 
\ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider (code rules - string):\line Bump the rider.\line If the rider's source is blank, exit.\line 
If the rider's source's first's target is the return byte, exit.\line If the rider is on any nested double-quote, bump the rider; repeat.\line If the rider's source's first's target is the double-quote byte, bump the rider; exit.\line Repeat.}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Handling nested double-quotes requires a little help from this guy, so you should put him back in, too:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a rider is on any nested double-quote:\line If the rider's source starts with """""", say yes.\line Say no.\line \line }{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 72. The "move a rider" routine that handles punctuation marks looks like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To move a rider (code rules - mark):\line Bump the rider.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
All this routine does is adjust the pointers in the rider so the rider's token spans the mark, and what's left of the rider's source starts just after the mark. All punctuation marks in Plain English are single characters.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
73. Symbols are non-letter and non-digit and non-punctuation mark characters that are not considered noise. This the the "move a rider" routine that we use to suck them up:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To move a rider (code rules - symbol):\line Bump the rider.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And this is the routine that decides if\~a byte is a symbol or not:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To decide if a byte is any symbol:\line If the byte is the caret byte, say yes.\line If the byte is the bar byte, say yes.\line If the byte is the asterisk byte, say yes.\line If the byte is the cross byte, say yes.\line If the byte is 
the dash byte, say yes.\line If the byte is the slash byte, say yes.\line If the byte is the left-alligator byte, say yes.\line If the byte is the right-alligator byte, say yes.\line If the byte is the left-brace byte, say yes.\line 
If the byte is the right-brace byte, say yes.\line If the byte is the equal-sign byte, say yes.\line If the byte is 128, say yes.\line If the byte is 130, say yes.\line If the byte is between 132 and 137, say yes.\line If the byte is 139, say yes.\line 
If the byte is between 145 and 153, say yes.\line If the byte is 155, say yes.\line If the byte is between 161 and 180, say yes.\line If the byte is between 183 and 191, say yes.\line If the byte is 215, say yes.\line If the byte is 247, say yes.\line 
Say no.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 74. Possessives come in two forms: with and without an "s" on the end. An example of the former is "Mary'
s house"; and example of the latter is "Jesus' Kingdom". This is the "move a rider" routine that deals with both of them:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To move a rider (code rules - possessive):\line Bump the rider.\line If the rider's source is blank, exit.\line If the rider's source starts with "s", bump the rider.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
When this routine gets control, we're sitting on a an apostrophe, so we suck it up. If there's no more source, we're done, but if the next character is an "s", we suck that up too.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Simple enough, but we need the 3 deciders below, as well, to peek ahead in the source so we know when to use the above routine:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a rider is on any possessive:\line If the rider's source is blank, say no.\line 
If the rider's source's first's target is not the single-quote byte, say no.\line If the rider is on any possessive (type 1 - single-quote, s, non-glom-byte), say yes.\line 
If the rider is on any possessive (type 2 - preceding s, single-quote, non-glom-byte), say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a rider is on any possessive (type 1 - single-quote, s, non-glom-byte):\line 
If the rider's source does not start with "'s", say no.\line Privatize the rider.\line Add 2 to the rider's source's first.\line If the rider's source is blank, say yes.\line If the rider's source's first's target is not any glom byte, say yes.\line 
Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a rider is on any possessive (type 2 - preceding s, single-quote, non-glom-byte):\line Privatize the rider.\line 
If the rider's source's first is the rider's original's first, say no.\line Subtract 1 from the rider's source's first.\line If the rider's source's first's target is not the little-s byte or the big-s byte, say no.\line 
Add 2 to the rider's source's first.\line If the rider's source is blank, say yes.\line If the rider's source's first's target is not any glom byte, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note the "Privatize the rider" statements in the 
latter two routines. Recall that all parameters in Plain English are passed by reference, not value, so if we change them, they're actually changed. The }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 privatize}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 command makes a copy of the specified parameter so we can screw with it without breaking anything above us. It cleverly gives the copy the same name as the original parameter (in this case, "the rider"),\~while changing\~
the original parameter's name to include the prefix "original" (as in, "the original rider").}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 75. Anything else in the source co
de, at this level of detail, is considered a "glom", a collection of characters that we're not quite sure how to handle at this level. This is the "move a rider" routine that sucks up gloms:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider (code rules - glom):\line Bump the rider.\line If the rider's source is blank, exit.\line 
If the rider is on any possessive, exit.\line If the rider's source's first's target is any glom byte, repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 It needs help from this decider:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a byte is any glom byte:\line If the byte is any letter, say yes.\line If the byte is any digit, say yes.\line 
If the byte is the tilde byte, say yes.\line If the byte is the at-sign byte, say yes.\line If the byte is the number-sign byte, say yes.\line If the byte is the percent-sign byte, say yes.\line If the byte is the ampersand byte, say yes.\line If
 the byte is the underscore byte, say yes.\line If the byte is the single-quote byte, say yes.\line If the byte is the dash byte, say yes.\line If the byte is the cross byte, say yes.\line If the byte is the slash byte, say yes.\line Say no.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that's it for the bottom-level "move a rider" routines.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 76. All of those guys are called by this guy...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider (code rules):\line Position the rider's token on the rider's source.\line If the rider's source is blank, exit.\line 
If the rider's source's first's target is noise, move the rider (code rules - noise); exit.\line If the rider's source's first's target is the backslash byte, move the rider (code rules - comment); exit.\line 
If the rider's source's first's target is the left-bracket byte, move the rider (code rules - remark); exit.\line If the rider's source's first's target is the double-quote byte, move the rider (code rules - string); exit.\line 
If the rider's source's first's target is the left-paren byte, move the rider (code rules - qualifier); exit.\line If the rider's source's first's target is any mark, move the rider (code rules - mark); exit.\line 
If the rider is on any possessive, move the rider (code rules - possessive); exit.\line Move the rider (code rules - glom).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...who is not called directly, but who is called by this fellow:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider returning an error string (code rules):\line Clear the error string.\line Move the rider (code rules).\line 
If the rider's token is blank, exit.\line If the rider's token's first's target is the left-bracket byte, move the rider returning the error string (code rules - validate remark); exit.\line 
If the rider's token's first's target is the double-quote byte, move the rider returning the error string (code rules - validate string); exit.\line If the rider's token's first's target is the left-paren byte, move the rider returning the error str
ing (code rules - validate qualifier); exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...and who, with a little help from these three...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider returning an error string (code rules - validate qualifier):\line 
If the rider's token's length is less than 2, put "Qualifiers need to end with ')'." into the error string; exit.\line If the rider's token's last's target is not the right-paren byte, put "Qualifiers need to end with ')'." into the error string; exit.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider returning an error string (code rules - validate remark):\line If the ride
r's token's length is less than 2, put "Remarks need to end with ']'." into the error string; exit.\line If the rider's token's last's target is not the right-bracket byte, put "Remarks need to end with ']'." into the error string; exit.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider returning an error string (code rules - validate string):\line 
If the rider's token's length is less than 2, put "Strings need to end with '""'." into the error string; exit.\line If the rider's token's last's target is not the double-quote byte, put "Strings need to end with '""'." into the error string; exit.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...is able to weed out mal-formed remarks, strings, and qualifiers right out of the gate.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 77. And that brings us to the last and top-level "move a rider" routine...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To move a rider (compiler rules):\line If the compiler's abort flag is set, clear the rider's token; exit.\line 
Move the rider returning an error string (code rules).\line If the error string is not blank, abort with the error string and the rider's token's first; exit.\line If the rider's token is blank, exit.\line If the
 rider's token's first's target is noise, repeat.\line If the rider's token's first's target is the backslash byte, repeat.\line If the rider's token's first's target is the left-bracket byte, repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...who is the guy used by our scanners. We've discussed these "
move a rider" routines from the bottom up, as it were, since they're mostly concerned with what impressive people call "lexical analysis" (making words out of letters). We'll be discussing our scanners from the top down since they're mostly concerned with
 what impressive people call "semantic analysis" (making sentences out of words).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
78. We've already put back in the top 2 scanners, the first ("to scan some source files") who just loops through the source files and passes them to the second ("to scan a source file")\~
who simply dispatches the rest of the scanning process to his underlings once he knows what's coming up in the source. These are the deciders he needs to make a good decision:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is the start of any type:\line If the string is "a", say yes.\line If the string is "an", say yes.\line 
If the string is "some", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is the start of any global:\line If the string is "the", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is the start of any routine:\line If the string is "to", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 79. Now the first scanning "underling" is this one:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scan a type given a rider:\line If the compiler's abort flag is set, exit.\line 
Add the type to the types given the rider's token's first.\line Move the rider (compiler rules).\line Scan the type's name given the rider.\line Put the type's name into the type's plural name.\line Pluralize the type's plural name.\line 
If the rider's token is "has" or "have", scan the type given the rider (has or have); exit.\line If the rider's token is not "is" or "are", abort with "I was expecting an 'is' or 'are', but I found '" then the rider's token then "'." and the rider; exit.
\line Move the rider (compiler rules).\line If the rider's token is any numeric literal, scan the type given the rider (unit of measure); exit.\line If the rider's
 token is not any indefinite article, abort with "I was expecting an indefinte article, but I found '" then the rider's token then "'." and the rider; exit. \line Move the rider (compiler rules).\line Scan the type's base name given the rider.\line 
Scan any optional info for the type given the rider.\line If the rider's token is not the period byte, abort with "Types need to end with a period, I found '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).
\line Index the type.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 80. The guy above b
egins by adding a type to our type list. Then he gets the new type's name, using this general-purpose name-scanning routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }\pard \ltrpar\ql \li0\ri0\sa240\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14897706 {\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
To scan a name given a rider:\line Clear the name.\line If the compiler's abort flag is set, exit.\line If the rider's token is any name starter, extend the name with the rider's token; move the rider (compiler rules).\line Loop.\line 
If the compiler's abort flag is set, exit.\line If the rider's token is any name ender, break.\line Extend the name with the rider's token.\line Move the rider (compiler rules).\line Repeat.\line If t
he name is blank, abort with "I was kind of hoping for a name around here, but I found '" then the rider's token then "'." and the rider; exit.
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14897706 {\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
81. Our name-scanning routine needs a little help from these\~2 deciders:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any name starter:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is any mark, say no.\line If the string is any symbol, say no.\line If the string is any article, say no.\line 
If the string is any conjunction, say yes.\line If the string is any possessive, say no.\line If the string is any verb, say yes.\line If the string is any operator, say yes.\line If the string is any preposition, say yes.\line 
If the string is any qualifier, say no.\line If the string is any literal, say no.\line If the string is "called", say yes.\line If the string is "equal", say yes.\line If the string is blank, say no.\line Say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any name ender:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is any mark, say yes.\line If the string is any symbol, say yes.\line If the string is any article, say yes.\line 
If the string is any conjunction, say yes.\line If the string is any possessive, say yes.\line If the string is any verb, say yes.\line If the string is any operator, say yes.\line If the string is any preposition, say yes.\line 
If the string is any qualifier, say yes.\line If the string is any literal, say yes.\line If the string is "called", say yes.\line If the string is "equal", say yes.\line If the string is blank, say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 82. And those 2 guys need some help from these 14 deciders:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To decide if a string is any mark:\line If the string's length is not 1, say no.\line If the string's first's target is any mark, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any symbol:\line If the string's length is not 1, say no.\line 
If the string's first's target is any symbol, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any article:\line If the string is any indefinite article, say yes.\line If the string is "the", say yes.\line 
Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any indefinite article:\line If the string is "a", say yes.\line If the string is "an", say yes.\line 
If the string is "another", say yes.\line If the string is "some", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any conjunction:\line If the string is "and", say yes.\line If the string is "both", say yes.\line 
If the string is "but", say yes.\line If the string is "either", say yes.\line If the string is "neither", say yes.\line If the string is "nor", say yes.\line If the string is "or", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any possessive:\line If the string is "'s", say yes.\line If the string is "'", say yes.\line Say no.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any verb:\line If the string is "are", say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ are not \\ aren't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "be", say yes. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "can", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ cannot \\ can't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "cannot", say yes. 
\line If the string is "could", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ could not \\ couldn't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "do", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ do not \\ don't\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "does", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ does not \\ doesn't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "is", say yes. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ is not \\ isn't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the string is "may", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ may not \\ mayn't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "should", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ should not \\ shouldn't
\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "was", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ was not \\ wasn't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "will", say yes. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ will not \\ won't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the string is "would", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ would not \\ wouldn't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "has", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ used in type definitions
\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "have", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ used in type definitions\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the string ends with "n't", say yes.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ trouble makers\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "begins", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ does not begin \\
 doesn't begin\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "ends", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ does not end \\ doesn't end\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the string is "looks", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ does not look \\ doesn't look\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "needs", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ does not need \\
 doesn't need\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "starts", say yes. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ does not start \\ doesn't start\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Say no.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any operator:\line If the string is "plus", say yes.\line If the string is "minus", say yes.\line 
If the string is "times", say yes.\line If the string is "divided", say yes.\line If the string is "then", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any preposition:\line If the string is "about", say yes.\line If the string is "above", say yes.\line 
If the string is "across", say yes.\line If the string is "after", say yes.\line If the string is "against", say yes.\line If the string is "all", say yes.\line If the string is "alone", say yes.\line If the string is "along", say yes.\line 
If the string is "among", say yes.\line If the string is "any", say yes.\line If the string is "anywhere", say yes.\line If the string is "around", say yes.\line If the string is "as", say yes.\line If the string is "at", say yes.\line 
If the string is "away", say yes.\line If the string is "back", say yes.\line If the string is "backward", say yes.\line If the string is "backwards", say yes.\line If the string is "before", say yes.\line If the string is "beginning", say yes.\line 
If the string is "behind", say yes.\line If the string is "below", say yes.\line If the string is "beneath", say yes.\line If the string is "beside", say yes.\line If the string is "between", say yes.\line If the string is "beyond", say yes.\line 
If the string is "bigger", say yes.\line If the string is "by", say yes.\line If the string is "close", say yes.\line If the string is "deep", say yes.\line If the string is "diagonally", say yes.\line If the string is "down", say yes.\line 
If the string is "downward", say yes.\line If the string is "ending", say yes.\line If the string is "everywhere", say yes.\line If the string is "except", say yes.\line If the string is "finishing", say yes.\line If the string is "facing", say yes.\line 
If the string is "for", say yes.\line If the string is "forward", say yes.\line If the string is "from", say yes.\line If the string is "given", say yes.\line If the string is "giving", say yes.\line If the string is "high", say yes.\line 
If the string is "in", say yes.\line If the string is "inside", say yes.\line If the string is "into", say yes.\line If the string is "larger", say yes.\line If the string is "leaning", say yes.\line If the string is "left", say yes.\line 
If the string is "leftward", say yes.\line If the string is "leftways", say yes.\line If the string is "like", say yes.\line If the string is "limiting", say yes.\line If the string is "long", say yes.\line If the string is "near", say yes.\line If the
 string is "of", say yes.\line If the string is "off", say yes.\line If the string is "on", say yes.\line If the string is "only", say yes.\line If the string is "onto", say yes.\line If the string is "out", say yes.\line 
If the string is "outside", say yes.\line If the string is "over", say yes.\line If the string is "past", say yes.\line If the string is "pointing", say yes.\line If the string is "returning", say yes.\line If the string is "right", say yes.\line 
If the string is "rightward", say yes.\line If the string is "rightways", say yes.\line If the string is "shorter", say yes.\line If the string is "sideway", say yes.\line If the string is "sideways", say yes.\line If the string is "similar", say yes.
\line If the string is "smaller", say yes.\line If the string is "somewhere", say yes.\line If the string is "slantwise", say yes.\line If the string is "slantway", say yes.\line If the string is "slantways", say yes.\line 
If the string is "starting", say yes.\line If the string is "tall", say yes.\line If the string is "taller", say yes.\line If the string is "thru", say yes.\line If the string is "through", say yes.\line If the string is "throughout", say yes.\line 
If the string is "to", say yes.\line If the string is "toward", say yes.\line If the string is "towards", say yes.\line If the string is "under", say yes.\line If the string is "underneath", say yes.\line If the string is "until", say yes.\line 
If the string is "unto", say yes.\line If the string is "up", say yes.\line If the string is "upward", say yes.\line If the string is "upon", say yes.\line If the string is "using", say yes.\line If the string is "via", say yes.\line 
If the string is "while", say yes.\line If the string is "wide", say yes.\line If the string is "with", say yes.\line If the string is "within", say yes.\line If the string is "without", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any qualifier:\line If the string is blank, say no.\line 
If the string's first's target is the left-paren byte, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any literal:\line If the string is any pointer literal, say yes.\line 
If the string is any numeric literal, say yes.\line If the string is any string literal, say yes.\line If the string is any flag literal, say yes.\line If the string is any hex literal, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any pointer literal:\line If the string is "nil", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any string literal:\line If the string is blank, say no.\line 
If the string's first's target is the double-quote byte, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any hex literal:\line If the string is blank, say no.\line 
If the string's first's target is the dollar-sign byte, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And now you know why primitive programming languages don't allow spaces in names.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
83. As we collect the words that make up a name, we're going to need the routine below, to put back the spaces that were lost in the tokenizing process:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To extend a string with another string:\line If the other string is blank, exit.\line If the string is not blank, append the space byte to the string.\line Append the other string to the string.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 84. We also need these 3 guys, who figure out the plural version of a name:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To pluralize a string: }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ nouns only\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "alumnus", put "alumni" into the string; exit.\line If the string is "auto", put "autos" into the string; exit.\line 
If the string is "cello", put "cellos" into the string; exit.\line If the string is "dwarf", put "dwarfs" into the string; exit.\line If the string is "foot", put "feet" into the string; exit.\line If the str
ing is "genus", put "genera" into the string; exit.\line If the string is "goose", put "geese" into the string; exit.\line If the string is "hippo", put "hippos" into the string; exit.\line If the string is "louse", put "lice" into the string; exit.\line 
If the string is "memo", put "memos" into the string; exit.\line If the string is "mouse", put "mice" into the string; exit.\line If the string is "ox", put "oxen" into the string; exit.\line 
If the string is "phenomenon", put "phenomena" into the string; exit.\line If the string is "photo", put "photos" into the string; exit.\line If the string is "phylum", put "phyla" into the string; exit.\line 
If the string is "piano", put "pianos" into the string; exit.\line If the string is "pimento", put "pimentos" into the string; exit.\line If the string is "pro", put "pros" into the string; exit.\line 
If the string is "proof", put "proofs" into the string; exit.\line If the string is "radius", put "radii" into the string; exit.\line If the string is "rhinoceros", put "rhinoceri" into the string; exit.\line If the string is "roof", put "roofs" i
nto the string; exit.\line If the string is "solo", put "solos" into the string; exit.\line If the string is "soprano", put "sopranos" into the string; exit.\line If the string is "staff", put "staffs" into the string; exit.\line 
If the string is "tooth", put "teeth" into the string; exit.\line If the string is "torus", put "tori" into the string; exit.\line If the string is "turf", put "turfs" into the string; exit.\line 
If the string is "virus", put "viruses" into the string; exit.\line If the string ends with "sh", append "es" to the string; exit.\line If the string ends with "ch", append "es" to the string; exit.\line 
If the string ends with "man", remove the last two bytes from the string; append "en" to the string; exit.\line If the string ends with "child", append "ren" to the string; exit.\line If the string 
ends with "ex", remove the last two bytes from the string; append "ices" to the string; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ or add ES\line }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string ends with "fe", remove the last two bytes from the string; append "ves" to the string; exit.\line If the string ends with "is", remove the la
st two bytes from the string; append "es" to the string; exit.\line If the string ends with "ix", remove the last two bytes from the string; append "ices" to the string; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ or add ES\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the string ends with "ma", append "ta" to the string; exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ or add S\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string ends with any consonant and "y", remove the last byte from the string; append "ies" to the string; exit.\line 
If the string ends with any vowel and "o", append "s" to the string; exit.\line If the string ends with any vowel and "y", append "s" to the string; exit.\line 
If the string ends with "f", remove the last byte from the string; append "ves" to the string; exit.\line If the string ends with "s", append "es" to the string; exit.\line If the string ends with "x", append "es" to the string; exit.\line If the string
 ends with "z", append "es" to the string; exit.\line Append "s" to the string.
\par \~
\par To decide if a string ends with any consonant and another string:\line Slap a substring on the string.\line Subtract the other string's length from the substring's last.\line If the substring is blank, say no.\line 
If the substring's last's target is not any consonant, say no.\line If the string does not end with the other string, say no.\line Say yes.
\par \~
\par To decide if a string ends with any vowel and another string:\line Slap a substring on the string.\line Subtract the other string's length from the substring's last.\line If the substring is blank, say no.\line 
If the substring's last's target is not any vowel, say no.\line If the string does not end with the other string, say no.\line Say yes.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 85. And now that we've got our names straight
, we can get back to scanning our types. Types come in different forms; simple types, like "An address is a number," are typically just subsets of other types. But types that have the word "has" or "have" after the type name, like "A\~
button has a box and a name,"\~are record types. To scan record types, we need this routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a type given a rider (has or have):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line Put "record" into the type's base name.\line Scan the type's fields given the rider.\line 
If the rider's token is not the period byte, abort with "Types need to end with a period, I found '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line Index the type.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 86. Records have fields so we need
 some field-processing routines, too (keep in mind that fields behave like, and are treated like variables, in many places:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan some fields given a rider:\line If the compiler's abort flag is set, exit.\line Add a field to the fields given "field" and the rider's token's first.\line Scan the field given the rider.\line If the rider's token is not any pause, exit.\line 
Scan any pauses given the rider.\line Repeat.
\par \~
\par To add a variable to some variables given a kind and a locus:\line Create the variable given the kind.\line Append the variable to the variables.\line Put the locus into the variable's locus.
\par \~
\par To scan a field given a rider:\line If the compiler's abort flag is set, exit.\line Scan the field given the rider (type part).\line Loop.\line If the compiler's abort flag is set, exit.\line If the rider's token is "ca
lled", scan the field given the rider (called part); repeat.\line If the rider's token is "at", scan the field given the rider (redefine part); repeat.\line If the rider's token is "(reference)", scan the field given the rider (reference part); repeat.

\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 87. As you 
can see from the routine above, each field in a record has a type of its own, and may have a variety of other special features. We handle those with these 6 scanners:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a field given a rider (type part):\line If the compiler's abort flag is set, exit.\line If the rider's token is any numeric literal, scan the field given the rider (type part - byte array); exit.\line 
Scan the field given the rider (type part - normal).
\par \~
\par To scan a field given a rider (type part - normal):\line If the compiler's abort flag is set, exit.\line 
If the rider's token is not any indefinite article, abort with "I was expecting an indefinite article, but found '" then the rider's token then "'." and the rider; exit.\line If the rider's token is "another", put "other" into the field's name.\line 
Move the rider (compiler rules).\line Scan a name given the rider.\line Extend the field's name with the name.
\par \~
\par To scan a field given a rider (called part):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line If the field's type name is blank, put the field's name into the field's type name. }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ byte array type name already filled in\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Scan the field's name given the rider.
\par \~
\par To scan a field given a rider (redefine part):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line 
If the rider's token is not "the", abort with "I was expecting the word 'the', but found '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line Scan the field's redefinition target name given the rider.
\par \~
\par To scan a field given a rider (reference part):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line Set the field's reference flag.
\par \line To scan a field given a rider (type part - byte array):\line If the compiler's abort flag is set, exit.\line Convert the rider's token to a ratio.\line Reduce the ratio.\line 
If the ratio's denominator is not 1, abort with "You have to specify a whole number of bytes for a byte array" and the rider; exit.\line Put the ratio's numerator into the field's count.\line Move the rider (compiler rules).\line 
If the rider's token is not "byte" or "bytes", abort with "Nothing but the word 'bytes' is appropriate after a counted field designator." and the rider; exit.\line Move the rider (compiler rules).\line Put "byte" into the field's type name.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 88. Since fields in a record can be separated by a variety of things (called }{\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 
\i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 pauses}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ), we need these 2 routines, too:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan any pauses given a rider:\line If the compiler's abort flag is set, exit.\line If the rider's token is not any pause, exit.\line Move the rider (compiler rules).\line Repeat.
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any pause:\line If the string is ",", say yes.\line If the string is ";", say yes.\line 
If the string is "and", say yes.\line If the string is "or", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 89. Some types, like "An inch is 1440 twips",\~
are "unit of measure" types. The CAL uses such types to automatically convert units of measure at compile time. These types are scanned by this guy:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a type given a rider (unit of measure):\line If the compiler's abort flag is set, exit.\line Convert the rider's token to the type's scale.\line If the type's scale is 0, abort with "Zero is an invalid scale." and the type's locus; exit.\line 
Move the rider (compiler rules).\line Scan the type's base name given the rider.\line If the rider's token is not the period byte, abort with "Types need to end with a period, I found '" then the rider's token then "'." and the rider; exit.\line 
Move the rider (compiler rules).\line Index the type.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 90. The 4 routines below are used to scan any optional information that might appear at the end of a ty
pe definition (like the target type of a pointer type, or fields that extend another record type):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To decide if a string is the start of any optional info:\line If the string is "to", say yes.\line If the string is "with", say yes.\line Say no.
\par \~
\par To scan any optional info for a type given a rider:\line If the compiler's abort flag is set, exit.\line If the rider's token is "to", scan any optional info for the type given the rider (pointer); exit.\line 
If the rider's token is "with", scan any optional info for the type given the rider (record); exit.
\par \~
\par To scan any optional info for a type given a rider (pointer):\line Move the rider (compiler rules).\line If the rider's token is not any indefinite article, abort with "The 'to' here needs to be followed by an indefinite article, not '" then the ri
der's token then "'." and the rider; exit. \line Move the rider (compiler rules).\line Scan the type's target name given the rider.
\par \~
\par To scan any optional info for a type given a rider (record):\line Move the rider (compiler rules).\line Scan the type's fields given the rider.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that's it for scanning types.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 91. Now we need some routines to scan our globals. This is the top-level guy and\~3 of his helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a global given a rider:\line If the compiler's abort flag is set, exit.\line Add the global to the globals given "global" and the rider's token's first.\line Move the rider (compiler rules).\line Scan the global's name given the rider.\line 
If the rider's token is "has" or "have", scan the global given the rider (has or have); exit.\line If the rider's token is not "is" or "are", abort w
ith "Geez. I need an 'is' or an 'are' hereabouts, but all I found was '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line 
If the rider's token is not any indefinite article, scan the global given the rider (literal term); exit.\line Move the rider (compiler rules).\line Scan the global's type name given the rider.\~ \line 
If the rider's token is the start of any optional info, scan the global given the rider (optional info); exit.\line If the rider's token is "equal", scan the global given the rider (data part); exit.\line 
If the rider's token is not the period byte, abort with "All global definitions must end with a period. Including this one." and the rider; exit. \line Move the rider (compiler rules).\line Index the global.
\par \~
\par To add a variable to some variables given a kind and a locus:\line Create the variable given the kind.\line Append the variable to the variables.\line Put the locus into the variable's locus.
\par \~
\par To create a variable given a kind:\line Allocate memory for the variable.\line Put the kind into the variable's kind.\line Put 1 into the variable's count.
\par \~
\par To index a global:\line If the compiler's abort flag is set, exit.\line If the global is nil, exit.\line If the global's name is in the global index, abort with "'" then the global's name then "' is a duplicate global variable." and
 the global's locus; exit.\line Index the global given the global's name and the global index.
\par 
\par 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
92. There's a bit of redundancy here because global variables can include implied, "inline" type defintions. So this guy should look somewhat familiar:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a global given a rider (has or have):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line Put "~inline " then the global's name then " type" into a name.\line Put the name then "s" into a plural name.\line 
Add a type to the types given the name and the plural name and "record" and the global's locus.\line Index the type.\line Put the type's name into the global's type name.\line Scan the type's fields given the rider.\line 
If the rider's token is not the period byte, abort with "Your punctuation is bad here." and the rider; exit. \line Move the rider (compiler rules).\line Index the global.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 93. And this guy should look familiar, too:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a global given a rider (optional info):\line If the compiler's abort flag is set, exit.\line Put "~inline " then the global's name then " type" into a name.\line Put the name then "s" into a plural name.\line 
Add a type to the types given the name and the plural name and the global's type name and the global's locus.\line Index the type.\line Put the type's name into the global's type name.\line Scan any optional info for the type given the rider.\line 
If the rider's token is not the period byte, abort with "All global definitions must end with a period. Including this one." and the rider; exit. \line Move the rider (compiler rules).\line Index the global.
\par 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 94.\~Some\~global variables have initial values, so we need this routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a global given a rider (data part):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line If the rider's token is not "to", abort with "I need the word 'to' after the word 'equal',
 not '" then the rider's token then "'." and the rider; exit. \line Move the rider (compiler rules).\line Scan the global's global body given the rider.\line 
If the rider's token is not the period byte, abort with "All global definitions must end with a period. Including this one." and the rider; exit. \line Move the rider (compiler rules).\line Index the global.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
We're not quite ready to deal with those initial values, so we just suck up the "body" of the global definition and keep it for later. This is the routine that does that:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To scan a global body given a rider:\line If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line Put the rider's token's first into the global body's first.\line Put -1 into the global body's last.\line Loop.\line 
If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line If the rider's token is the colon byte, exit.\line If the rider's token is the period byte, exit.\line Put the rider's token's last into the global body's last.
\line Move the rider (compiler rules).\line Repeat.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A similar thing occurs here:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par To scan a global given a rider (literal term):\line If the compiler's abort flag is set, exit.\line Scan the global's global body given the rider.\line If the rider's token is not the period byte, abort with "All global definitions must end
 with a period. Including this one." and the rider; exit. \line Move the rider (compiler rules).\line Index the global.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that's it for globals, for now.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 95. This is our top-level routine scanner, with a couple of his trivial helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scan a routine given a rider:\line If the compiler's abort flag is set, exit.\line 
Add the routine to the routines given the rider's token's first.\line Move the rider (compiler rules).\line Scan the routine's routine header given the rider.\line If the rider's token is the semi-colon byte, scan the 
routine given the rider (alternate wording); exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the rider's token is not the colon byte, abort with "This routine header is improperly formulated." and the routine's locus; exit.\line 
Move the rider (compiler rules).\line Scan the routine's routine body given the rider.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a routine to some routines given a locus:\line Create the routine.\line Append the routine to the routines.\line 
Put the locus into the routine's locus.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To create a routine:\line Allocate memory for the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 96. It's too soon to do much with routines, so we just collect each routine's header and body into a substring and save them for later:}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scan a routine header given a rider:\line If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line 
Put the rider's token's first into the routine header's first.\line Put -1 into the routine header's last.\line Loop.\line If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line 
If the rider's token is the semi-colon byte, exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the rider's token is the colon byte, exit.\line If the rider's token is the period byte, exit.\line 
Put the rider's token's last into the routine header's last.\line Move the rider (compiler rules).\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scan a routine body given a rider:\line If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line 
If the rider's token is the start of any definition, exit.\line Put the rider's token's first into the routine body's first.\line Loop.\line If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line 
Put the rider's token's last into the routine body's last.\line If the rider's token is the colon byte, abort with "You may have forgotten a period somewhere above this. You better check." and the rider; exit.\line 
If the rider's token is not the period byte, move the rider (compiler rules); repeat.\line Move the rider (compiler rules).\line If the rider's token is the start of any definition, exit.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 97. There's some special treatment required for routines with alternate headers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scan a routine given a rider (alternate wording):\~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Privatize the rider.\line Move the rider (compiler rules).\line 
If the rider's token is not "to", abort with "I think that there semi-colon is misplaced." and the original rider; exit.\line Put the original rider's token's first into the routine's routine body's first.\line Put the original rider's tok
en's last into the routine's routine body's last.\line Move the original rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
98. And we need this little guy so we can find the end of a routine body. Routine bodies end with the start of the next type, global or routine definition:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is the start of any definition:\line If the string is "to", say yes.\line If the string is "a", say yes.\line 
If the string is "an", say yes.\line If the string is "the", say yes.\line If the string is "some", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 99. And now we should be able 
to run. CTRL-R. Do it. When you're in the blue, find the "CAL-4700's son's daughter" directory, open it, open the source files, and do a list (CTRL-L).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 100. Still in the blue, on a free tab, open the daughter's ".lst" file. Now we've got something to loo
k at -- almost 12,000 lines, in fact. Let's examine just\~a few.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 You'll notice that almost all the types, except for "byte" and "record", have -1 (hex FFFFFFFF) in their length field, like this one:}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/abort message/abort messages/FFFFFFFF/string////0/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 That's because we haven't yet calculated those lengths.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 You'll also notice that "implied" types have a tilde on the front of their names, like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/~inline compiler type/~inline compiler types/FFFFFFFF/record////0/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Thirdly, you'll notice that record types have their fields listed as variables, like so:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/entry/entries/FFFFFFFF/thing////0/\line /variable/field/no/name address////00000000/no/1/no////\line 
/variable/field/no/thunk address////00000000/no/1/no////\line /variable/field/no/name////00000000/no/1/no////\line /variable/field/no/address////00000000/no/1/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If you skip down to the next section of the listing (just find "GLOBALS:" with no quotes and a colon on the end),\~
you'll see lots of globals, with their types filled in, but with zeros in their addresses, like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /variable/global/no/adding built-in memory routines timer//timer//00000000/no/1/no////\line 
/variable/global/no/adding built-in startup routine timer//timer//00000000/no/1/no////\line /variable/global/no/addressing timer//timer//00000000/no/1/no////\line /variable/global/no/break tag//tag//00000000/no/1/no////\line 
/variable/global/no/calculating timer//timer//00000000/no/1/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 In the "LITERALS:" section, you'll find nothing at all, because we haven't done anything with literals 
yet (except save them in global and routine body substrings).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
In the "ROUTINES:" section, you'll see we've got a lot of routines hanging on the list, but that we know almost nothing about them at this point. That's because all we did was squirrel away their headers and bodies in substrings for later.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Further down you can see that our "TYPE INDEX:" is now getting some use, with some entries sharing buckets:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TYPE INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /367 buckets/405 refers/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Our "GLOBAL INDEX:" is also getting some use:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 GLOBAL INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /558 buckets/729 refers/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Our other indexes are empty:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 LITERAL INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ROUTINE INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 UTILITY INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Our "IMPORTS:" section is also empty, since we haven't compiled any references to DLLs yet:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 IMPORTS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Finally, at the very bottom, you'll see that we've got all six source files properly loaded (as before)...}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 SOURCE FILES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /source file/c:\\cal-4700's son's daughter\\the compiler/\line /source file/c:\\cal-4700's son's daughter\\the desktop/\line /source file/c:
\\cal-4700's son's daughter\\the editor/\line /source file/c:\\cal-4700's son's daughter\\the finder/\line /source file/c:\\cal-4700's son's daughter\\the noodle/\line /source file/c:\\cal-4700's son's daughter\\the writer/}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...and that scanning now accounts for the bulk of our compile time:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/0/\line /timer/scanning/437/\line /timer/resolving types/0/\line /timer/resolving globals/0/\line 
/timer/compiling routine headers/0/\line /timer/calculating/0/\line /timer/adding built-in memory routines/0/\line /timer/indexing utilities/0/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line 
/timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line /timer/total/562/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 So far, so good. Next up, resolution of our types.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Okay, you know the drill.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 101. In the gray, open the Son of CAL's compiler, move our temporary abort line down a notch, and uncomment the "resolve the types" step:}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line 
Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (resolve the globals).\line \\
Compile the directory (compile the headers of the routines).\line \\Compile the directory (calculate lengths and offsets of types).\line \\Compile the directory (add the built-in memory routines).\line \\
Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\Compile the directory (add and compile the built-in startup routine).\line \\
Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\Compile the directory (write the exe).\line \\Compile the dire
ctory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 102. In this step we're going to whip through all of our types four times, looking for different things on each pass:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a directory (resolve the types):\line If the compiler's abort flag is set, exit.\line Show status "Resolving...".\line Start the resolving types timer.\line Resolve the types (expand things).\line Resolve the types (index plurals).\line 
Resolve the types (base types).\line Resolve the types (optional info).\line Stop the resolving types timer.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 103: First Pass: (a) make a new record type with previous
 and next pointers on the front for every type defined as a "thing"; make the original type look like a pointer to the new record type; and add the implied types needed for easy list making as well:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To resolve some types (expand things):\line If the compiler's abort flag is set, exit.\line Get a type from the types.\line If the type is nil, exit.\line Resolve the type (expand thing).\line Repeat.
\par \~
\par To resolve a type (expand thing):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ type's base type is not resolved yet\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the compiler's abort flag is set, exit.\line If the type is nil, exit.\line If the type's base type is not nil, exit.\line If the type's name is "thing", exit.\line 
If the type cannot be reduced to "thing" using the base name, exit.\line Find a base type given the type's base name and the type index.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\\~ add thing record\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the type's n
ame then " record" into a name.\line Put the type's name then " records" into a plural name.\line Put the base type's name then " record" into a base name.\line Add a record type to the types given the name and the plural name and the base name.\line 
Add a field to the record type's fields given "next " then the type's name and "next" and the type's name and yes.\line Add another field to the record type's fields given "previous " then the type's name and "previous" and the type's name and yes.\line 
If the type's fields are not empty, append the type's fields to the record type's fields.\line Index the record type.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\
 fix up original type to look like a pointer\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the record type's name into the type's target name.\line }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ add chain type\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Add a chain type to the types given the type's plural name and "" and the base type's plural name.\line Add a third field to the chain type's fields given "first " then the type's name and "first" and the type's name and yes.\line 
Add a fourth field to the chain type's fields given "last " then the type's name and "last" and the type's name and yes.\line Index the chain type.
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 104. We're going to need this decider to do all that:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a type can be reduced to a string using the base name:\line If the type is nil, say no.\line 
If the type's name is the string, say yes.\line If the type's cooking flag is set, say no.\line Set the type's cooking flag.\line Find a base type given the type's base name and the type index.\line 
If the base type is nil, clear the type's cooking flag; say no.\line If the base type can be reduced to the string using the base name, clear the type's cooking flag; say yes.\line Clear the type's cooking flag.\line Say no.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 105. And we're going to need this little helper as well:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a field to some fields given a name and a nickname and a type name and a reference flag:\line Add the f
ield to the fields given "field" and nil.\line Put the name into the field's name.\line Put the nickname into the field's nickname.\line Put the type name into the field's type name.\line Put the reference flag into the field's reference flag.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 106: Second Pass: Make sure all the as-yet unindexed plural names make it into the type index:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve some types (index plurals):\line If the compiler's abort flag is set, exit.\line Get a type from the types.\line 
If the type is nil, exit.\line Resolve the type (index plural).\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a type (index plural):\line If the compiler's abort flag is set, exit.\line If the type is nil, exit.\line 
If the type's plural name is blank, exit.\line If the type can be reduced to "thing" using the base name, exit.\line Index the type given the type's plural name.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par 107: Third Pass: Make sure the base types for all higher-level types are solid:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve some types (base types):\line If the compiler's abort flag is set, exit.\line Get a type from the types.\line 
If the type is nil, exit.\line Resolve the type (base type).\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a type (base type):\line If the compiler's abort flag is set, exit.\line If the type is nil, exit.\line 
If the type's base type is not nil, exit.\line Find the type's base type given the type's base name and the type index.\line If the type's base type is nil, abort with "Invalid base type '" then the type's base name then "'." and the type's locus; exit.
\line Set the type's cooking flag.\line If the type's base type's cooking flag is set, abort with "Recursive definition with '" then the type's base name then "'." and the type's locus; exit.\line Resolve the type's base type (base type).\line 
Clear the type's cooking flag.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 We use the "cooking flag" to make sure we don't run into ourselves when we're chasing down types. It's okay, for example, to have a }{
\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 nickname}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  be a }{
\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 name}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  and a }{
\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 name}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  be a }{\rtlch\fcs1 
\ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 string}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , but you can't have a }{
\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 nickname}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  be a }{
\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 name}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  and a }{
\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 name}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  be a }{\rtlch\fcs1 
\ai\af0\afs24 \ltrch\fcs0 \i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 nickname}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 .}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 108. Fourth Pass: See what we can do with all the optional information our types might have tacked on to them:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve some types (optional info):\line If the compiler's abort flag is set, exit.\line Get a type from the types.\line 
If the type is nil, exit.\line Resolve the type (optional info).\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a type (optional info):\line If the compiler's abort flag is set, exit.\line If the type is nil, exit.\line 
If the type's optional info resolved flag is set, exit.\line If the type's base type is the type, exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ for built in types\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Check for invalid optional info on the type.\line Set the type's cooking flag.\line Resolve the type's base type (optional info).\line 
If the type can be reduced to "pointer", resolve the type (optional info - pointer).\line If the type can be reduced to "record", resolve the type (optional info - record).\line 
If the type can be reduced to "number", resolve the type (optional info - scale).\line Clear the type's cooking flag.\line Set the type's optional info resolved flag.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 109. At this point, we need lots of helpers; these, for starters:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To check for invalid optional info on a type:\line If the compiler's abort flag is set, exit.\line If the type is nil, exit.\line 
If the type's target name is not blank, check for invalid optional info on the type (target).\line If the type's fields are not empty, check for invalid optional info on the type (fields).\line 
If the type's scale is not 0, check for invalid optional info on the type (scale).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To check for invalid optional info on a type (fields):\line If the compiler's abort flag is set, exit.\line 
If the type cannot be reduced to "record", abort with "Optional 'with' info is only allowed on record types." and the type's locus; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To check for invalid optional info on a type (scale):\line If the compiler's abort flag is set, exit.\line 
If the type cannot be reduced to "number", abort with "Scales are only allowed on number types." and the type's locus; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To check for invalid optional info on a type (target):\line If the compiler's abort flag is set, exit.\line 
If the type cannot be reduced to "pointer", abort with "Optional 'to' info is only allowed on pointer types." and the type's locus; exit.\line \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 110: These helpers are needed too:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a type (optional info - pointer):\line If the compiler's abort flag is set, exit.\line 
If the type's target type is not nil, exit.\line If the type's target name is blank, put the type's base type's target type into the type's target type; exit.\line Find the type's target type given the type's target name and the type index.\line 
If the type's target type is nil, abort with "I can't quite see what you're pointing at. Please clarify." and the type's locus; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a type (optional info - record):\line If the compiler's abort flag is set, exit.\line If
 the type's fields are empty, copy the type's base type's fields into the type's fields; exit.\line Loop.\line If the compiler's abort flag is set, exit.\line Get a field from the type's fields (backwards).\line If the field is nil, break.\line 
If the field is duplicated in the type's fields, abort with "The '" then the field's name then "' field is defined more than once." and the field's locus; exit.\line Resolve the field.\line If the compiler's abort flag is set, exit.\line 
If the field's type's cooking flag is set, abort with "Recursive definition with '" then the field's type's name then "'." and the field's locus; exit.\line Resolve the field's type (optional info).\line If the field's reference flag is not set, repeat.
\line If the field's type cannot be reduced to "pointer", abort with "Exactly what do you mean by '(reference)' here on this '" then the field's name then "'?" and the field's locus; exit.\line Repeat.\line 
Eliminate duplicate nicknames from the type's fields.\line If the type cannot be reduced to "thing record", exit.\line If the type's fields' count is greater than 2, exit.\line Copy the type's base type's fields into the type's fields (data fields only).}
{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a type (optional info - scale):\line If the compiler's abort flag is set, exit.\line Put the type's base type into a base type.
\line If the type's scale is 0, put the type's base type's scale into the type's scale; exit.\line If the base type's scale is 0, exit.\line Multiply the type's scale by the base type's scale.\line Put the base type's base type into the type's base type.}
{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 111. And these two deciders should be put back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a type can be reduced to a type name:\line If the type is nil, say no.\line Privatize the type.\line Loop.\line 
If the type is nil, say no.\line If the type's name is the type name, say yes.\line If the type's base type is the type, say no.\line Put the type's base type into the type.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a variable is duplicated in some variables:\line Get another variable from the variables.\line 
If the other variable is nil, say no.\line If the other variable's name is blank, repeat.\line If the other variable is the variable, repeat.\line If the other variable's name is the variable's name, say yes.\line Repeat.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 That last decider is used to eliminate duplicate fields in records (recall that fields are considered variables).}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 112. When a record type is extended, we need to duplicate fields, so we're going to need these guys, too:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To copy a field into another field:\line If the field is nil, void the other field; exit.\line Allocate memory for the other field.\line 
Put the field's locus into the other field's locus.\line Put the field's name into the other field's name.\line Put the field's nickname into the other field's nickname.\line Put the field's type name into the other field's type name.\line 
Put the field's type into the other field's type.\line Put the field's count into the other field's count.\line Put the field's redefinition target name into the other field's redefinition target name.\line 
Put the field's reference flag into the other field's reference flag.\line Put the field's offset into the other field's offset.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To copy some fields into some other fields:\line Get a field from the fields.\line If the field is nil, exit.\line 
Copy the field into another field.\line Append the other field to the other fields.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To copy some fields into some other fields (data fields only):\line If the fields' first is nil, exit.\line 
If the fields' first's next is nil, exit.\line Put the fields' first's next's next into a field.\line Loop.\line If the field is nil, exit.\line Copy the field into another field.\line Append the other field to the other fields.\line 
Get the field from the fields.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 113. We resolve our }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 
global}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  variables later, but we resolve our "field variables" on this pass through the types:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a field:\line If the compiler's abort flag is set, exit.\line If the field is nil, exit.\line Resolve the field as a variable.
\line If the field's nickname is not any valid field name, clear the field's nickname.\line If the field's name is not any valid field name, abort with "'" then the field's name then "' is not a valid field name." and the field's locus; exit.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a variable:\line If the compiler's abort flag is set, exit.\line If the variable is nil, exit.\line 
If the variable's type is not nil, exit.\line If the variable's type name is not blank, resolve the variable (explicit type name); exit.\line Find the variable's type and the variable's nickname given the variable's name.\line If the variable
's type is not nil, put the variable's type's name into the variable's type name; exit.\line Abort with "I can't find the '" then the variable's name then "' type." and the variable's locus.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a variable (explicit type name):\line Find the variable's type given the variable's type name and the type index.\line 
If the variable's type is nil, abort with "I can't find the '" then the variable's type name then "' type." and the variable's locus; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 114. Perhaps you noticed various calls to "find" routines in the stuff above. These are the ones we should put back now:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a type and a nickname given a name:\line Void the type.\line Clear the nickname.\line Slap a substring on the name.\line Loop.\line 
If the substring is blank, exit.\line Find the type given the substring and the type index.\line If the type is not nil, break.\line Skip to the next word in the substring.\line Repeat.\line Put the name's first into another substring's first.\line 
Put the substring's first minus 2 into the other substring's last.\line If the other substring is not blank, put the other substring into the nickname.\line If the other substring is blank, put the substring into the nickname.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a variable given a name:\line If the current routine is nil, void the variable; exit.\line Find the variable 
given the name and the current routine's locals.\line If the variable is not nil, exit.\line Find the variable given the name and the current routine's parameters.\line If the variable is not nil, exit.\line 
Find the variable given the name and the global index.\line If the variable is not nil, exit.\line Find the variable given the name and the literal index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a variable given a name and some variables:\line Void the variable.\line Loop.\line Get the variable from the variables.\line 
If the variable is nil, exit.\line If the variable's name is the name, exit.\line If the variable's nickname is the name, exit.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 115.\~
We're going to need this little guy to help us with nickname processing:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To skip to the next word in a substring:\line If the substring is blank, exit.\line If the substring's first's target is noise, break.\line 
Add 1 to the substring's first.\line Repeat.\line Skip any leading noise in the substring.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 116. Plus this guy, to make sure the programmer doesn't misuse our three reserved field names:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a name is any valid field name:\line If the name is "magnitude", say no.\line If the name is "target", say no.\line 
If the name is "whereabouts", say no.\line Say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 117. And these 3 guys to help us eliminate duplicate nicknames:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To eliminate duplicate nicknames from some variables:\line Create an index given 101.\line Eliminate
 duplicate nicknames from the variables given the index.\line Destroy the index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To eliminate duplicate nicknames from some variables given an index:\line If the index is nil, exit.\line Loop.\line 
Get a variable from the variables.\line If the variable is nil, exit.\line Eliminate duplicate nicknames given the variable and the index.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To eliminate duplicate nicknames given a variable and an index:\line If the variable is nil, exit.\line If the index is nil, exit.\line 
Find another variable given the variable's nickname and the index.\line If the other variable is nil, find the other variable given the variable's name and the index.\line 
If the other variable is nil, index the variable given the variable's nickname and the index; exit.\line Clear the other variable's nickname.\line Clear the variable's nickname.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
118. And that's it; types resolved. You know the drill. Run it; when you're in the blue, open the daughter and list it. Our types won't be complete yet, but will be a bit more robust and error-free.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Here's a notable example. In the Noodle, a wyrd is defined as a record like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A wyrd has a low byte and a high byte.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And a number is defined as\~a record like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A number has\line a\~first byte,\line a\~second byte,\line a\~third byte,\line a\~fourth byte,\line a\~low wyrd at the first byte,\line a\~
high wyrd at the third byte.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 We define wyrds and numbers in this way so we can easily get to their pieces.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 You probably remember that in the compiler we have this type:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A tag is a number.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And now that our types have been resolved, you can see in the listing that all the fi
elds in the number type have been copied into the tag type (remember that fields are treated like variables):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/tag/tags/FFFFFFFF/number/number///0/\line /variable//no/first byte/first/byte/byte/00000000/no/1/no////\line 
/variable//no/second byte/second/byte/byte/00000000/no/1/no////\line /variable//no/third byte/third/byte/byte/00000000/no/1/no////\line /variable//no/fourth byte/fourth/byte/byte/00000000/no/1/no////\line 
/variable//no/low wyrd/low/wyrd/wyrd/00000000/no/1/no/first byte///\line /variable//no/high wyrd/high/wyrd/wyrd/00000000/no/1/no/third byte///}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And here's another notable example. In the compiler we define a "source file" like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A source file is a thing with a path and a buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 But now that our types have been resolved, that definition has been modified 
and expanded to include (a) a "source file" type that is nothing but a pointer to a "source file record"; (b) a "source file record" that has "next source file" and "previous source file" pointers on the front for easy chaining; and (c) a compiler-generat
ed type, "source files" (plural) with "first source file" and "last source file" fields that can be used as the anchor for a list. Here they are in the listing:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
type/source file/source files/FFFFFFFF/thing/thing/source file record/source file record/0/\line /variable//no///byte/byte/00000000/no/4/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/source file record/source file records/FFFFFFFF/thing record/thing record///0/\line 
/variable/field/no/next source file/next/source file/source file/00000000/no/1/yes////\line /variable/field/no/previous source file/previous/source file/source file/00000000/no/1/yes////\line /variable/field/no/path/path/path/path/00000000/no/1/no////
\line /variable/field/no/buffer/buffer/buffer/buffer/00000000/no/1/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/source files//FFFFFFFF/things/things///0/\line 
/variable/field/no/first source file/first/source file/source file/00000000/no/1/yes////\line /variable/field/no/last source file/last/source file/source file/00000000/no/1/yes////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A third notable example is the "foot" unit-of-measure type, which was defined like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A foot is 12 inches.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Which refers to this definition of an inch:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An inch is 1440 twips.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Which refers to this definition of a twip:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A twip is a number.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Now that our types have been resolved, we find that the "foot" type looks like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/foot/feet/FFFFFFFF/inches/twip///17280/\line /variable//no/first byte/first/byte/byte/00000000/no/1/no////\line 
/variable//no/second byte/second/byte/byte/00000000/no/1/no////\line /variable//no/third byte/third/byte/byte/00000000/no/1/no////\line /variable//no/fourth byte/fourth/byte/byte/00000000/no/1/no////\line 
/variable//no/low wyrd/low/wyrd/wyrd/00000000/no/1/no/first byte///\line /variable//no/high wyrd/high/wyrd/wyrd/00000000/no/1/no/third byte///}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note that the "foot" type not only has an appropriat
e plural form ("feet"), but that it also has all the fields that any other number has, and that the "scale factor" (last item on the first line above) is 17280, which is 12 times 1440, or the number of twips in an foot. The "scale factor" is used, at comp
ile time, to convert literals in routine calls that have a specified unit of measure to units expected by the called routine. When, for example, in the Cal Monet we said:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Resize the picture to 5-1/2 inches by 5-1/2 inches.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The CAL automatically passed 7920 to the resize routine (who was expecting twips, not inches). And had we made the picture just\~
a little bigger by saying...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Resize the picture to 1/2 foot by 1/2 foot.
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The CAL would have passed 8640 to the resize routine (8640 is the number of twips in 6 inches, or 1/2 foot).}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Looking further in our listing, we ca see that our type index is a little busier:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TYPE INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /840 buckets/1001 refers/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that all that resolving of types took almost no time at all:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/62/\line /timer/scanning/453/\line /timer/resolving types/47/\line /timer/resolving globals/0/\line 
/timer/compiling routine headers/0/\line /timer/calculating/0/\line /timer/adding built-in memory routines/0/\line /timer/indexing utilities/0/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line 
/timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line /timer/total/719/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Next up: Resolving global variables.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par ---
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 119. Moving on. Back in the gray, adjust the "compile a directory" routine to look like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (compile the headers of the routines).\line \\Compile the directory (calculate lengths and offsets of types).\line \\
Compile the directory (add the built-in memory routines).\line \\Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\
Compile the directory (add and compile the built-in startup routine).\line \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).
\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 120. Here are the top-level routines for this step:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (resolve the globals):\line If the compiler's abort flag is set, exit.\line Show status "Resolving...".\line 
Start the resolving globals timer.\line Resolve the globals.\line Stop the resolving globals timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve some globals:\line If the compiler's abort flag is set, exit.\line Get a global from the globals.\line 
If the global is nil, exit.\line Resolve the global.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 121. And here's the gist\~of it:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a global:\line If the global is nil, exit.\line If the compiler's abort flag is set, exit.\line 
If the global's global body is not blank, resolve the global (compile body).\line If the global's type name is blank, abort with "Invalid global '" then the global's name then "'." and the global's locus; exit.\line Resolve the global as a variable.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To resolve a global (compile body):\line If the global is nil, exit.\line If the compiler's abort flag is set, exit.\line 
Slap a rider on the global's global body.\line Move the rider (compiler rules).\line If the rider's token is not any literal, abort with "I need a literal here, but I found '" then the rider's token then "'." and the rider; exit.\line 
Compile a literal given the rider.\line If the compiler's abort flag is set, exit.\line If the rider's token is not blank, abort with "Is a period missing around here?" and the rider; exit.\line If the global's typ
e name is blank, put the literal's type's name into the global's type name.\line Put the literal into the global's literal.\line Index the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 122. We use the word "compile" here (instead of just "scan" or "resolve") since we're actually getting to the place 
where we are formatting some of\~the information in the source code\~exactly as it will appear in the executable file. Specifically, literals used to initialize global variables:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider:\line If the compiler's abort flag is set, exit.\line 
Add the literal to the literals given the rider's token's first.\line If the rider's token is any flag literal, compile the literal given the rider (flag); exit.\line 
If the rider's token is any hex literal, compile the literal given the rider (hex); exit.\line If the rider's token is any numeric literal, compile the literal given the rider (numeric); exit.\line 
If the rider's token is any pointer literal, compile the literal given the rider (pointer); exit.\line If the rider's token is any string literal, compile the literal given the rider (string); exit.\line 
Abort with "Internal error - compile a term given a rider (literal)" and the rider.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 123. Literals don't have names, but we give them names anyway to make them easier to use and to spot (not to mention, chase around) in the li
sting file. Since the names are generated by the compiler, we put a tilde as the first character:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To generate a name given a string:\line Put the string into the name.\line Add 1 to the compiler's name count.\line 
Convert the compiler's name count to another string.\line Append the other string to the name.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a literal to some variables given a locus:\line Add the literal as a variable to the variables given "literal" and the locus.\line 
Generate the literal's name given "~L".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 124. Several types of literals have to be converted to "executable ready" format:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (flag):\line If the compiler's abort flag is set, exit.\line Convert the rider's token to a flag.\line 
Convert the flag to the literal's data.\line Move the rider (compiler rules).\line Put "flag" into the literal's type name.\line Resolve the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (hex):\line If the compiler's abort flag is set, exit.\line 
Put the rider's token into a nibble substring.\line Add 1 to the nibble substring's first.\line Convert the nibble substring to the literal's data.\line Move the rider (compiler rules).\line Put "hex string" into the literal's type name.\line 
Resolve the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (numeric - integer):\line If the compiler's abort flag is set, exit.\line 
Convert the rider's token to a number.\line Convert the number to the literal's data.\line Move the rider (compiler rules).\line Put "number" into the literal's type name.\line Resolve the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (numeric - ratio):\line If the compiler's abort flag is set, exit.\line Convert the rider's token to 
a ratio.\line Convert the ratio to the literal's data.\line Move the rider (compiler rules).\line Put "ratio" into the literal's type name.\line Resolve the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (numeric):\line If the compiler's abort flag is set, exit.\line If the rider is fol
lowed by any unit of measure, compile the literal given the rider (numeric - with unit of measure); exit.\line If the rider's token is any integer literal, compile the literal given the rider (numeric - integer); exit.\line 
If the rider's token is any ratio literal, compile the literal given the rider (numeric - ratio); exit.\line If the rider's token is any mixed literal, compile the literal given the rider (numeric - ratio); exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (numeric - with unit of measure):\line If the compiler's abort flag is set, exit.\line 
Convert the rider's token to a ratio.\line Move the rider (compiler rules).\line Scan a name given the rider.\line Find a type given the name and the type index.\line If the type is nil, abort with "'" then the name then "' is an invalid unit of measur
e." and the literal's locus; exit.\line If the type cannot be reduced to "number", abort with "'" then the name then "' is an invalid unit of measure." and the literal's locus; exit.\line Put the type's scale into a final ratio.\line 
If the type's scale is 0, put 1/1 into the final ratio.\line Multiply the final ratio by the ratio.\line Reduce the final ratio.\line 
If the final ratio's denominator is 0, abort with "We seem to have an invalid unit of measure here." and the literal's locus.\line Put the final ratio's numerator divided by the final ratio's denominator into a number.\line 
Put the type's name into the literal's type name.\line Convert the number to the literal's data.\line Resolve the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (pointer):\line If the compiler's abort flag is set, exit.\line Convert nil to the literal's data.\line 
Move the rider (compiler rules).\line Put "pointer" into the literal's type name.\line Resolve the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a literal given a rider (string):\line If the compiler's abort flag is set, exit.\line 
Put the rider's token into the literal's data.\line Unquote the literal's data.\line Move the rider (compiler rules).\line Put "string" into the literal's type name.\line Resolve the literal.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 125. We'll be needing this decider to peek ahead a little so we can spot units-of-
measure that follow numeric literals (like the "inches" part of "3 inches":}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a rider is followed by any unit of measure:\line Privatize the rider.\line Move the rider (compiler rules).\line 
If the rider's token is not any name starter, say no.\line Scan a name given the rider.\line Find a type given the name and the type index.\line If the type is nil, say no.\line If the name is not "times", say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ special because times is an infix operator and a unit of measure\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the rider's token is the start of any expression, say no.\line Say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 126. The decider above is also used when we're parsing expressions (later on), so we need this guy to go with him:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is the start of any expression:\line If the string is any sign, say yes.\line If the string is any indefinite articl
e, say yes.\line If the string is "the", say yes.\line If the string is any literal, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 127. We index our literals so we can find them, quickly, later when they're needed:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To index a literal:\line If the compiler's abort flag is set, exit.\line If the literal is nil, exit.\line 
If the literal's name is in the literal index, abort with "Internal error - index a literal" and the literal's locus; exit.\line Index the literal given the literal's name and the literal index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 128. The various literal conversion routines are
 generally useful, so we keep them in the Noodle. In one case, however, we need an "alternate wording" for the conversion routine, just to make sure calls get dispatched to the right place:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To convert a nibble substring to a string: employ convert a nibble string to a hex string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
129. And that's it for resolving globals! Time to see what all that does to the listing. Run it. In the blue, open up the daughter's source files and list. The open up the updated listing file. Jump to the "GLOBALS:" Section an
d you'll see that initialized globals are now associated with named literals, like so:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 GLOBALS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /variable/global/no/adding built-in memory routines timer//timer/timer/00000000/no/1/no////\line 
/variable/global/no/adding built-in startup routine timer//timer/timer/00000000/no/1/no////\line /variable/global/no/addressing timer//timer/timer/00000000/no/1/no////\line /variable/global/no/break tag//tag/tag/00000000/no/1/no//~L1//\line 
/variable/global/no/calculating timer//timer/timer/00000000/no/1/no////\line /variable/global/no/call external tag//tag/tag/00000000/no/1/no//~L2//\line /variable/global/no/call indirect tag//tag/tag/00000000/no/1/no//~L3//\line 
/variable/global/no/call internal tag//tag/tag/00000000/no/1/no//~L4//}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note the "~L1" and "~L2" and similar literal 
names near the end of the tag globals above. Now jump to the "LITERALS:" Section and you'll see those very literals with their values, backways, ready for inclusion in our executable file:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 LITERALS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /variable/literal/no/~L1//number/number/00000000/no/1/no///01000000/\line 
/variable/literal/no/~L2//number/number/00000000/no/1/no///02000000/\line /variable/literal/no/~L3//number/number/00000000/no/1/no///03000000/\line /variable/literal/no/~L4//number/number/00000000/no/1/no///04000000/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If you look for "~L113" you'll find a very long line in the listing that starts like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /variable/literal/no/~L113//hex string/hex string/00000000/no/1/no///524946463A020...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The source for that literal is in the Noodle as part of the definition of our "cluck" sound global variable:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The cluck sound is a wave equal to $524946463A020...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Later we'll see how the compiler generates code to copy literal values like these into the corresponding global variables just before he calls the programmer's "run" routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 More literals, and the code to copy them into the right places, will be added later as we stumble on literals in routine bodies.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Let's check our timers and call it a day:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/94/\line /timer/scanning/437/\line /timer/resolving types/31/\line /timer/resolving globals/94/\line 
/timer/compiling routine headers/0/\line /timer/calculating/0/\line /timer/adding built-in memory routines/0/\line /timer/indexing utilities/0/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line 
/timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line /timer/total/937/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Looks like manipulating all those huge hex literals in the Noodle cost us a few milliseconds. The cluck sound is only one of them; the Osmosian font is another, and it's almost 72,000 nibbles long. I thnk we can live with 94 milliseconds in any case.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 130. Onward. In the gray, move our temporary abort line down, and uncomment the next step.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line 
Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (calculate lengths and offsets of types).\line \\Compile the directory (add the built-in memory routines).\line \\
Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\Compile the directory (add and compile the built-in startup routine).\line \\
Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\Compile the directory (write the exe).\line \\
Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 131. Our goal in this step is to gather enough information so we can formulate a convenient\~
"moniker" for each routine. Let's begin by putting back the definition of a moniker (and a partial moniker, while we're at it):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A moniker is a string.
\par A partial moniker is a moniker.
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Then let's consider an example from the Cal Monet. The moniker for this routine...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To create a work given a URL:
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ... looks like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par create [work] from/given/with/using [url]
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
It consists of 4 "monikettes": the string "create", the parameter type "[work]", the string "from/given/with/using", and the parameter type "[url]".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 132. We should uncomment the monikette thing\~now...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par A monikette is a thing with\line a string,\line a type (reference),\line a variable (reference),\line \\ for bubbling\line a current type (reference),\line a current substring.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A monikette's }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 string}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  is used to hold string-type monikettes (like "create" or "from/given/with/using"), while a monikette's }{\rtlch\fcs1 \ai\af0\afs27 
\ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 type}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 points to the type definition of a parameter. A monikette's }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 variable}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  isn't used until later, when we parse expressions.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A routine record has a list of monikettes and a list of parameters in it. As we compile a routine header, we hang the\~routine's\~
parameters on the parameter list, and the monikettes (both string and parameter types) on the monikette list.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 133. We should put back these 3 helpers at this time:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To create a monikette:\line Allocate memory for the monikette.
\par \~
\par To add a monikette to some monikettes given a string:\line Create the monikette.\line Append the monikette to the monikettes.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\
 from/given/with/using\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "from", put "from/given/with/using" into the monikette's string; exit.\line 
If the string is "given", put "from/given/with/using" into the monikette's string; exit.\line If the string is "with", put "from/given/with/using" into the monikette's string; exit.\line 
If the string is "using", put "from/given/with/using" into the monikette's string; exit.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ in/into/to\line }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the string is "in", put "in/into/to" into the monikette's string; exit.\line If the string is "into", put "in/into/to" into the monikette's string; exit.\line 
If the string is "to", put "in/into/to" into the monikette's string; exit.\line \\ is/are\line If the string is "are", put "is/are" into the monikette's string; exit.\line If the string is "is", put "is/are" into the monikette's string; exit.\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ aren't/isn't\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the string is "isn't", put "is/aren't" into the monikette's string; exit.\line If the string is "aren't", put "is/aren't" into the monikette's string; exit.\line \\ backward/backwards/counterclockwise/counter-clockwise/anticlockwise/anti-clockwise
\line If the string is "backward", put "backward" into the monikette's string; exit.\line If the string is "backwards", put "backward" into the monikette's string; exit.\line 
If the string is "counterclockwise", put "backward" into the monikette's string; exit.\line If the string is "counter-clockwise", put "backward" into the monikette's string; exit.\line 
If the string is "anticlockwise", put "backward" into the monikette's string; exit.\line If the string is "anti-clockwise", put "backward" into the monikette's string; exit.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ at/on\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the string is "at", put "at/on" into the monikette's string; exit.\line If the string is "on", put "at/on" into the monikette's string; exit.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ other\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the string into the monikette's string.

\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a monikette to some monikettes given a type:\line Create the monikette.\line Append the monikette to the monikettes. \line 
Put the type into the monikette's type.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 134. We convert them into a moniker, using the routines below. The conversion routine is in two parts in\~
case we don't want to convert the whole monikette list at one time.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To convert some monikettes to a moniker:\line Convert the monikettes to the moniker given the monikettes' last.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To convert some monikettes to a moniker given a monikette:\line Clear the moniker.\line Loop.\line 
Get a current monikette from the monikettes.\line If the current monikette is nil, exit.\line Append the current monikette to the moniker.\line If the current monikette is the monikette, exit.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a monikette to a moniker:\line If the monikette is nil, exit.\line 
If the moniker is not blank, append the space byte to the moniker.\line If the monikette's type is not nil, append "[" and the monikette's type's name and "]" to the moniker (fast); exit.\line 
If the monikette's string is not blank, append the monikette's string to the moniker; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 135. Now that we've got all that out of the way, let's compile some headers. These are the top-level routines:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (compile the headers of the routines):\line If the compiler's abort flag is set, exit.\line 
Show status "Compiling...".\line Start the compiling routine headers timer.\line Compile the headers of the routines.\line Stop the compiling routine headers\~ timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the headers of some routines:\line If the compiler's abort flag is set, exit.\line Get a routine from the routines.\line 
If the routine is nil, exit.\line Compile the header of the routine.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the header of a routine:\line If the routine is nil, exit.\line If the compiler's abort flag is set, exit.\line 
Slap a rider on the routine's routine header.\line Move the rider (compiler rules).\line If the rider's token is "decide", compile the header of the routine given the rider (decider); exit.\line 
If the rider is the start of any function, compile the header of the routine given the rider (function); exit.\line If the rider's token is "compatibly", compile the header of the routine given the rider (callback); exit.\line 
Compile the header of the routine given the rider (procedure).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 136. And these are the helpers, for each kind of routine (decider, function (the tricky one), callback, and procedure):}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a rider is the start of any function:\line If the compiler's abort flag is set, say no.\line 
If the rider's token is not "put", say no.\line Privatize the rider.\line Move the rider (compiler rules).\line If the rider's token is not any article, say no.\line Move the rider (compiler rules).\line Scan a name given the rider.\line 
If the rider's token is any possessive, say yes.\~ }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile some monikettes given a rider: \line If the compiler's abort flag is set, exit.\line 
If the rider's token is any monikette string, add a monikette to the monikettes given the rider's token; move the rider (compiler rules); repeat.\line If the rider's token is not the start of any expression, exit.\line 
Compile an expression given the rider.\line If the compiler's abort flag is set, exit.\line Add another monikette to the monikettes given the expression.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the header of a routine given a rider (decider):\line If the compiler's abort flag is set, exit.\line 
Move the rider (compiler rules).\line If the rider's token is not "if", abort with "It's 'Decide IF.' We always say, 'Decide IF'. Got it?" and the rider; exit.\line Move the rider (compiler rules).\line Set the routine's decider flag.\line 
Compile the routine's monikettes and the routine's parameters given the rider.\line If any of the routine's monikettes are negative words, abort with "It's a bad idea to use negatives in decider names." and the rider; exit.\line 
Convert the routine's monikettes to the routine's moniker.\line If the routine's moniker is in the routine index, abort with "I already know how to '" then the routine's moniker then "'." and the routine's locus; exit.\line 
Index the routine given the routine's monikettes and the routine index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the header of a routine given a rider (function):\line If the compiler's abort flag is set, exit.\line 
Set the routine's function flag.\line Add a monikette to the routine's monikettes given "put".\line Move the rider (compiler rules).\line If the rider's token is any indefinite article, set a flag.\line If 
the flag is set, compile the routine's monikettes and the routine's parameters given the rider (indefinite article).\line If the flag is not set, compile the routine's monikettes and the routine's parameters given the rider (definite article).\line 
If the rider's token is not any possessive, abort with "An 's is missing or misplaced here." and the rider; exit.\line Move the rider (compiler rules).\line Scan a name given the rider.\line 
Add another monikette to the routine's monikettes given "'s " then the name.\line If the rider's token is not "into", abort with "I was expecting the word 'into', but found '" then the rider's token then "'." and the rider; exit.\line 
Add a third monikette to the routine's monikettes given "into".\line Convert the routine's monikettes to a moniker.\line If the moniker is in the routine index, abort with "I already know how to '" then the moniker then "'." and the routine's locus; exit.
\line Index the routine given the routine's monikettes and the routine index.\line Move the rider (compiler rules).\line If the rider's token is not any i
ndefinite article, abort with "I was expecting an indefinite article, but found '" then the rider's token then "'." and the rider; exit.\line Compile the routine's monikettes and the routine's parameters given the rider (indefinite article).\line 
If the rider's token is not blank, abort with "There's extra stuff on the end of this function." and the rider; exit.\line Convert the routine's monikettes to the routine's moniker.\line 
Index the routine given the routine's monikettes and the routine index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ for employs}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the header of a routine given a rider (callback):\line If the compiler's abort flag is set, exit.\line 
Move the rider (compiler rules).\line Set the routine's callback flag.\line Compile the routine's monikettes and the routine's parameters given the rider.\line Convert the routine's monikettes to the routine's moniker.\line 
If the routine's moniker is in the routine index, abort with "I already know how to '" then the routine's moniker then "'." and the routine's locus; exit.\line Index the routine given the routine's monikettes and the routine index.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the header of a routine given a rider (procedure):\line If the compiler's abort flag is set, exit.\line 
Compile the routine's monikettes and the routine's parameters given the rider.\line Convert the routine's monikettes to the routine's moniker.\line 
If the routine's moniker is in the routine index, abort with "I already know how to '" then the routine's moniker then "'." and the routine's locus; exit.\line Index the routine given the routine's monikettes and the routine index.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 137. And these are the guys that separate the parameters from the rest of the "blah, blah, blah" in a routine header:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any monikette string:\line If the string is blank, say no.\line If the string is "the", say no.\line 
If the string is any indefinite article, say no.\line If the string is any possessive, say no.\line If the string is any literal, say no.\line If the string is any mark, say no.\line If the string is any symbol, say no.\line Say yes.
\par \~
\par To compile some monikettes and some parameters given a rider:\line If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line 
If the rider's token is "the", compile the monikettes and the parameters given the rider (definite article); repeat.\line If the rider's token is any indefinite article, compile the
 monikettes and the parameters given the rider (indefinite article); repeat.\line If the rider's token is any monikette string, compile the monikettes and the parameters given the rider (monikette string); repeat.\line 
Abort with "'" then the rider's token then "' is not valid in a routine header." and the rider.
\par To compile some monikettes and some parameters given a rider (definite article):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line Scan a name given the rider.\line If the compiler's abort flag is set, exit.\line 
Prepend "the " to the name.\line Add a monikette to the monikettes given the name.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile some monikettes and some parameters given a rider (indefinite article):\line If the compiler's abort flag is set, exit.\line 
Add a parameter to the parameters given "parameter" and the rider's token's first.\line If the rider's token is "another", put "other" into the parameter's name.\line Move the rider (compiler rules).\line Scan a name given the rider.\line 
Extend the parameter's name with the name.\line If the rider's token is "called", compile the call'd part given the rider and the parameter.\line Resolve the parameter.\line 
If the parameter is duplicated in the parameters, abort with "Dude, you already have a parameter called '" then the parameter's name then "'." and the parameter's locus; exit.\line Add a monikette to the monikettes given the parameter's type.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile some monikettes and some parameters given a rider (monikette string):\line If the compiler's abort flag is set, exit.\line 
Add a monikette to the monikettes given the rider's token.\line Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 138. This special guy handles "renamed parameters" in a routine header (like "a number called x"):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the call'd part given a rider and a variable:\line If the compiler's abort flag is set, exit.\line If the variable is nil, exit.
\line Put the variable's name into the variable's type name.\line Move the rider (compiler rules).\line Scan the variable's name given the rider.\line \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 139. And these three little\~guys are\~used to spot "negative words" in decider headers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if any of some monikettes are negative words:\line Get a monikette from the monikettes.\line If the monikette is nil, say no.
\line If the monikette's string is any negative word, say yes.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any monikette string:\line If the string is blank, say no.\line If the string is "the", say no.\line 
If the string is any indefinite article, say no.\line If the string is any possessive, say no.\line If the string is any literal, say no.\line If the string is any mark, say no.\line If the string is any symbol, say no.\line Say yes.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is any negative word:\line If the string is "not", say yes.\line If the string is "cannot", say yes.\line 
If the string is "nothing", say yes.\line If the string ends with "n't", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 When a decider is written with a "positive" header, the CAL will understand 
both the positive and negative forms. For example, "To decide if a string is blank" will automatically serve as "to decide if a string is }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 not}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  blank".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 140. Since there's a lot of string concatenation required in monikette-to-moniker conversions, and since
 we do those a lot, we added in this helper to make those concatenations faster than usual:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To append a string and another string and a third string to a fourth string (fast):\line Put the fourth string's length into a length.\line Add the string's length to the length.\line Add the other string's length to the length.\line 
Add the third string's length to the length.\line Reassign a pointer given the length.\line Put the pointer into a byte pointer.\line Copy bytes from the fourth string's first to the byte pointer for the fourth string's length.\line 
Add the fourth string's length to the byte pointer.\line Copy bytes from the string's first to the byte pointer for the string's length.\line Add the string's length to the byte pointer.\line 
Copy bytes from the other string's first to the byte pointer for the other string's length.\line Add the other string's length to the byte pointer.\line Copy bytes from the third string's first to the byte pointer for the third string's length.\line 
Unassign the fourth string's first.\line Put the pointer into the fourth string's first.\line Put the pointer plus the length minus 1 into the fourth string's last.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 141. And these are the routines we use to index routines:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To index a routine given some monikettes and an index:\line If the routine is nil, exit.\line Clear a partial moniker.\line Loop.\line Get a monikette from the monikettes.\line If the monikette is nil, exit.\line 
Append the monikette to the partial moniker.\line If the monikette is the monikettes' last, break.\line Index the partial moniker given the index (special).\line Repeat.\line Index the routine given the partial moniker as a
 moniker and the index (special).
\par \~
\par To index a routine given a moniker and an index (special):\line Find a refer given the moniker and the index.\line If the refer is not nil, put the routine into the refer's pointer; exit.\line Index the routine given the moniker and the index.
\par \~
\par To index a partial moniker given an index (special):\line Find a refer given the partial moniker and the index.\line If the refer is not nil, exit.\line Index the partial moniker in the index.
\par \~
\par To decide if a moniker is in an index: \line Find a refer given the moniker and the index.\line If the refer is nil, say no.\line If the refer's pointer is nil, say no.\line Say yes.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 142. Ready to run. Do it. In the blue, open up and list the daughter. Then open up the listing. Nice work! Now we've got monikers a
nd parameter lists for each and every routine; here's a sampling:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par ROUTINES:
\par \~
\par /routine/abort from/given/with/using [string]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/string/string/string/string/00000000/no/1/no////
\par \~
\par /routine/abort from/given/with/using [string] and [byte pointer]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/string/string/string/string/00000000/no/1/no////\line 
/variable/parameter/no/byte pointer/byte pointer/byte pointer/byte pointer/00000000/no/1/no////
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /routine/abort from/given/with/using [string] and [rider]/no/no/no/no//0/0/00000000/\line 
/variable/parameter/no/string/string/string/string/00000000/no/1/no////\line /variable/parameter/no/rider/rider/rider/rider/00000000/no/1/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And you can see our "ROUTINE INDEX:" is getting a workout, too:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par ROUTINE INDEX:
\par \~
\par /4881 buckets/7862 refers/
\par \~
\par /bucket/
\par /refer/make [ratio pair] from/given/with/using.../
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that it was somewhat expensive, time-wise, to\~do all that:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par TIMERS:
\par \~
\par /timer/loading/78/\line /timer/scanning/422/\line /timer/resolving types/32/\line /timer/resolving globals/109/\line /timer/compiling routine headers/266/\line /timer/calculating/0/\line /timer/adding built-in memory routines/0/\line 
/timer/indexing utilities/0/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line /timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line 
/timer/total/1328/
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Time to move on.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 143. Time for an easy step. In the gray, move our temporary abort line down another notch and uncomment the line above it:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line 
Compile the directory (calculate lengths and offsets of types).\line Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\
Compile the directory (add the built-in memory routines).\line \\Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\
Compile the directory (add and compile the built-in startup routine).\line \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).
\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 144. Here's the top-level routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (calculate lengths and offsets of types):\line If the compiler's abort flag is set, exit.\line 
Show status "Calculating...".\line Start the calculating timer.\line Calculate the lengths of the types.\line Calculate the offsets in the types.\line Calculate the redefinition offsets in the types.\line Stop the calculating timer.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 145. And here are the first couple helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To calculate the lengths of some types:\line If the compiler's abort flag is set, exit.\line Get a type from the types.\line 
If the type is nil, exit.\line Calculate the length of the type.\line Repeat.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To calculate the length of a type:\line If the type is nil, exit.\line If the type's length is not -1, exit.\line 
Calculate the length of the type's base type.\line If the type's fields are empty, put the type's base type's length into the type's length; exit.\line Put 0 into the type's length.\line Loop.\line If the compiler's abort flag is set, exit.\line 
Get a field from the type's fields.\line If the field is nil, exit.\line If the field's redefinition target name is not blank, repeat.\line Calculate the length of the field's type.\line Add the field's type's 
length times the field's count to the type's length.\line Repeat.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 146. And here are some more helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To calculate the offsets in a type:\line If the type is nil, exit.\line Put 0 into an offset.\line Loop.\line If the compiler's abort flag is set, exit.\line Get a field from the type's fields.\line If the field is nil, exit.\line 
If the field's redefinition target name is not blank, repeat.\line Put the offset into the field's offset.\line Add the field's type's length times the field's count to the offset.\line Repeat.
\par \~
\par To calculate the offsets in some types:\line If the compiler's abort flag is set, exit.\line Get a type from the types.\line If the type is nil, exit.\line Calculate the offsets in the type.\line Repeat.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 147. And here are even more helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To calculate the redefinition offsets in a type:\line If the type is nil, exit.\line Loop.\line If the compiler's abort flag is set, exit.\line Get a field from the type's fields.\line If the field is nil, exit.\line 
If the field's redefinition target name is blank, repeat.\line Find another field given the field's redefinition target name and the type's fields.\line 
If the other field is nil, abort with "Invalid redefine. I can't find the '" then the field's redefinition target name then "' field." and the field's locus; exit.\line Put the other field's offset into the field's offset.\line Repeat.
\par \~
\par To calculate the redefinition offsets in some types:\line If the compiler's abort flag is set, exit.\line Get a type from the types.\line If the type is nil, exit.\line Calculate the redefinition offsets in the type.\line Repeat.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 148. Done! Run it. In the blue, open up and list the daughter. Then open the updated\~listing and consider\~the first few types.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 You can see that bytes are still 1 byte long:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /type/byte/bytes/00000001/byte/byte///0/
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that our prototype record is still 0 bytes long.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /type/record/records/00000000/record/record///0/
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 But our abort message, which is a string, is now 8 bytes long, with a first byte pointer at offset 0, and a last byte pointer at offset 4:}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/abort message/abort messages/00000008/string/string///0/\line 
/variable//no/first byte pointer/first/byte pointer/byte pointer/00000000/no/1/no////\line /variable//no/last byte pointer/last/byte pointer/byte pointer/00000004/no/1/no////
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 You can also see that our "address" type\~has some redefinitions in it:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /type/address/addresses/00000004/number/number///0/\line /variable//no/first byte/first/byte/byte/00000000/no/1/no////\line /variable//no/second byte/second/byte/byte/00000001/no/1/no////\line /variable//no/third byte/third/byte/byte/00000002/no/1/no////
\line /variable//no/fourth byte/fourth/byte/byte/00000003/no/1/no////\line /variable//no/low wyrd/low/wyrd/wyrd/00000000/no/1/no/first byte///\line /variable//no/high wyrd/high/wyrd/wyrd/00000002/no/1/no/third byte///}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An address is a number, 4 bytes in length overall. The low wyrd redefines the first two\~bytes and\~
is thus at the same offset as the first byte; the high wyrd redefines the last two bytes, and is thus\~at the same offset as the third byte.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Finally, a\~glance at our timers shows that this step, important as it is,\~took almost no time at all:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par TIMERS:
\par \~
\par /timer/loading/109/\line /timer/scanning/453/\line /timer/resolving types/16/\line /timer/resolving globals/109/\line /timer/compiling routine headers/266/\line /timer/calculating/15/\line /timer/adding built-in memory routines/0/\line 
/timer/indexing utilities/0/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line /timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line 
/timer/total/1390/
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Sweet!}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 149. Onward. In the gray, set things up to "add the built-in memory routines":}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line 
Compile the directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (index the routines for utility use).\line \\Compile the directory (compile the bodies of the routines).\line \\
Compile the directory (add and compile the built-in startup routine).\line \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).
\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 We saw earlier (in the "resolve the types" step) that when a programmer defines a dynamic 
record type using the "is a thing" syntax, the CAL does a little behind-the-scenes type-creation and type-manipulation to keep "things" simple at the programmer's level. Case in point. This type definition...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A source file is a thing with a path and a buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
...is modified and expanded to include (a) a "source file" type that is nothing but a pointer to a "source file record"; (b) a "source file record" that has the same fields as the programmer specified plus\~"next source file" and "previous source fi
le" pointers on the front for easy chaining; and (c) a compiler-generated type, "source files" (plural) with "first source file" and "last source file" fields that can be used as the anchor for a list. Here they are in the listing:}{\rtlch\fcs1 
\af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 type/source file/sou
rce files/FFFFFFFF/thing/thing/source file record/source file record/0/\line /variable//no///byte/byte/00000000/no/4/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/source file record/source file records/FFFFFFFF/thing record/thing record///0/\line /variable/field/no/next source file/next/source fi
le/source file/00000000/no/1/yes////\line /variable/field/no/previous source file/previous/source file/source file/00000000/no/1/yes////\line /variable/field/no/path/path/path/path/00000000/no/1/no////\line 
/variable/field/no/buffer/buffer/buffer/buffer/00000000/no/1/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /type/source files//FFFFFFFF/things/things///0/\line 
/variable/field/no/first source file/first/source file/source file/00000000/no/1/yes////\line /variable/field/no/last source file/last/source file/source file/00000000/no/1/yes////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Now we also want the programmer to be able to program }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 as if}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  he took the time to write routines with these headers:}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To allocate memory for a source file:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To destroy\~a source file:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To destroy some source files:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 So we have the compiler add those routines}{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221  as if}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  they were in t
he programmer's source code, in this step.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 150. These are the upper-level routines that make that happen:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (add the built-in memory routines):\line If the compiler's abort flag is set, exit.\line Show status "Adding...".
\line Start the adding built-in memory routines timer.\line Add the allocate and deallocate and finalize and destroy routines.\line Stop the adding built-in memory routines timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add the allocate and deallocate and finalize and destroy routines:\line If the compiler's abort flag is set, exit.\line 
Get a type from the types.\line If the type is nil, exit.\line Add the finalize routine for the type.\line Add the allocate routine for the type.\line Add the deallocate routine for the type.\line Add the destroy routine for the type.\line Repeat.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 151. We begin 
with the "finalize" routines, that the programmer never sees. These are used to clean up any string memory that may have been automatically allocated on the Heap. And these are the routines that add those routines to the routine list (as if we had found t
hem in the source code):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add the finalize routine for a type:\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line 
If the type should not be finalized, exit.\line If the type's name is "string", add the finalize routine for the type (string); exit.\line If the type can be reduced to "string", exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ prevents generation of finalizer for derived string types\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Add the finalize routine for the type (record).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add the finalize routine for a type (string):\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line 
Add a routine to the routines given nil.\line Append "~finalize a " then the type's name to the routine's header string.\line Append "intel $50. " to the routine's body string. \\ push eax\line Append "unassign the string's first. " to the routin
e's body string.\line Append "intel $58." to the routine's body string. \\ pop eax\line Slap the routine's routine header on the routine's header string.\line Slap the routine's routine body on the routine's body string.\line 
Compile the header of the routine.
\par \~
\par To add the finalize routine for a type (record):\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line Add a routine to the routines given nil.\line Append "~finalize a " then the type's name to the routine's header string.
\line Append "intel $50. " to the routine's body string. \\ push eax\line Loop.\line Get a field from the type's fields.\line If the field is nil, break.\line If the field's type should not be finalized, repeat.\line 
Append "~finalize the " then the type's name then "'s " then the field's name then ". " to the routine's body string.\line Repeat.\line Append "intel $58." to the routine's body string. \\ pop eax\line 
Slap the routine's routine header on the routine's header string.\line Slap the routine's routine body on the routine's body string.\line Compile the header of the routine.
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note the tildes ("~") in the routine names; we don't expect the programmer will ever call these routines directly.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 152. And these are the deciders we need to help us do that:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a type should be finalized:\line If the type is nil, say no.\line If the type can be reduced to "substring", say no.\line 
If the type can be reduced to "string", say yes.\line If the type's fields should be finalized, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if some fields should be finalized:\line Get a field from the fields.\line If the field is nil, say no.\line If the fiel
d's type should be finalized, say yes.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 153. This is how we similarly add the allocate routine for a type:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add the allocate routine for a type:\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line 
If the type cannot be reduced to "pointer", exit.\line If the type's target type is nil, exit.\line Add a routine to the routines given nil.\line Append "allocate memory for a " then the type's name to the routine's header string.\line 
Append "assign the " then the type's name then " given " to the routine's body string.\line Append the type's target type's length then "." to the routine's body string.\line Slap the routine's routine header on the routine's header string.\line 
Slap the routine's routine body on the routine's body string.\line Compile the header of the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note that there is no tilde in the routine name; we }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 do}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  expect the programmer to call these routines directly.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 154. This is the routine that adds deallocate routines for dynamic types:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add the deallocate routine for a type:\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line 
If the type cannot be reduced to "pointer", exit.\line If the type's target type is nil, exit.\line Add a routine to the routines given nil.\line Append "deallocate a " then the type's name to the routine's header string.\line 
Append "if the " then the type's name then " is nil, exit. " to the routine's body string.\line If the type's target type should be finalized, append "~finalize the " then the type's name then "'s target. " to the routine's body string.\line Appe
nd "unassign the " then the type's name then "." to the routine's body string.\line Slap the routine's routine header on the routine's header string.\line Slap the routine's routine body on the routine's body string.\line 
Compile the header of the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Again, no tilde in the routine name since a programmer may want to call these routines directly.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 155. And these are the routines that add the destroy routines for each dynamic type:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To add the destroy routine for a type:\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line If the type should not be forgotten, exit.\line 
If the type can be reduced to "things", add the destroy routine for the type (things); exit.\line If the type can be reduced to "pointer", add the destroy routine for the type (pointer); exit.
\par \~
\par To add the destroy routine for a type (things):\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line If the type's fields' first is nil, abort with "Internal error - add the forget routine for a type (things)"; exit.\line 
If the type's fields' first's type is nil, abort with "Internal error 2 - add the forget routine for a type (things)"; exit.\line Put "destroy [" then the type's name then "]" into a moniker.\line If the moniker is in the routine index, exit.\line 
Add a routine to the routines given nil.\line Append "destroy a " then the type's name to the routine's header string.\line Append "if the " then the type's name then "'s first is nil, exit. " to the routine's body string.\line 
Put the type's fields' first's type's name into a name.\line Append "put the " then the type's name then "'s first into a " then the name then ". " to the routine's body string.\line 
Append "remove the " then the name then " from the " then the type's name then ". " to the routine's body string.\line Append "destroy the " then the name then ". " to the routine's body string.\line Append "repeat. " to the routine's body string.\line 
Slap the routine's routine header on the routine's header string.\line Slap the routine's routine body on the routine's body string.\line Compile the header of the routine.
\par \~
\par To add the destroy routine for a type (pointer):\line If the type is nil, exit.\line If the compiler's abort flag is set, exit.\line Put "destroy [" then the type's name then "]" into a moniker.\line If the moniker is in the routine index, exit.\line 
Add a routine to the routines given nil.\line Append "destroy a " then the type's name to the routine's header string.\line Append "if the " then the type's name then " is nil, exit. " to the routine's body string.\line 
If the type's target type can be reduced to "pointer", append "destroy the " then the type's name then "'s target. " to the routine's body string.\line 
If the type's target type can be reduced to "things", append "destroy the " then the type's name then "'s target. " to the routine's body string.\line Loop.\line Get a field from the type's target type's fields.\line If the field is nil, break.\line 
If the field's reference flag is set, repeat.\line If the field's type should not be forgotten, repeat.\line Append "destroy the " then the type's name then "'s " then the field's name then ". " to the routine's body string.\line Repeat.\line 
Append "deallocate the " then the type's name then ". " to the routine's body string.\line Slap the routine's routine header on the routine's header string.\line Slap the routine's routine body on the routine's body string.\line 
Compile the header of the routine.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note that we expect the programmer to call these routines directly.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Note also that they "go deep" -- if anything attached to a record that is being destroyed needs to be destroyed, these routines let the programmer simply "forget" about those attached things. This spares the programmer a lot of repetative coding.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 156. Finally, we need this routine to decide if a type can be forgotten by the programmer:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To decide if a type should be forgotten:\line If the type is nil, say no.\line If the type's name is "thing", say no.\line If the type's name is "things", say no.\line If the type can be reduced to "things", say yes.\line 
If the type can not be reduced to "pointer", say no.\line If the type's target type is nil, say no.\line If the type's target type cannot be reduced to "pointer", say yes.\line If the type's target type should not be forgotten, say no.\line Say yes.

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
157. And that's it for this step. Let's run it. Then, in the blue, load up the daughter and list her. Then look in the listing. The first "~finalize" routine in the list is this one...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /routine/~finalize [~inline compiler type]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/~inline compiler type/~inline compiler type/~inline compiler type/~inline compiler type/00000000/no/1/no////
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...which is needed because the "~inline compiler type" has lots of s
trings in it, as you can see from the type definition (earlier in the listing):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /type/~inline compiler type/~inline compiler types/00000040/record/record///0/\line /variable/field/no/directory/directory/directory/directory/00000000/no/1/no////\line /variable/field/no/timer/timer/timer/timer/00000008/no/1/no////\line 
/variable/field/no/abort flag//flag/flag/00000014/no/1/no////\line /variable/field/no/abort message/abort message/abort message/abort message/00000018/no/1/no////\line /variable/field/no/abort path//path/path/00000020/no/1/no////\line 
/variable/field/no/abort row#//row#/row#/00000028/no/1/no////\line /variable/field/no/name count/name/count/count/0000002C/no/1/no////\line /variable/field/no/exe buffer/exe/buffer/buffer/00000030/no/1/no////\line 
/variable/field/no/listing buffer/listing/buffer/buffer/00000038/no/1/no////
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Recall that a directory is a path and a path is a string, and that buffer is also a string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And the first generated "allocate" routine in the listing is this one...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /routine/allocate memory for [entry]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/entry/entry/entry/entry/00000000/no/1/no////
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Followed by the associated "deallocate" and "destroy" routines:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /routine/deallocate [entry]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/entry/entry/entry/entry/00000000/no/1/no////
\par /routine/destroy [entry]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/entry/entry/entry/entry/00000000/no/1/no////\line \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
158. Extra credit exercise: You probably noticed that the generated 
routines above have no meat in them. That's because we don't list routine bodies until later when they've been compiled. But let's take a peek. In the gray, get into the son's compiler, find the "list a routine" routine, and add this line (including the c
omment at the end)...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par If the routine's moniker starts with "~", append the routine's body string to the buffer; advance the buffer. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\*** testing only}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...just before the "Advance the buffer" line at the end of that routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Now run the son, open and li
st the daughter, and examine the listing. The finalize routine for our "~inline compiler type" now looks like this (without the word-wrap):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par /routine/~finalize [~inline compiler type]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/~inline compiler type/~inline compiler type/~inline compiler type/~inline compiler type/00000000/no/1/no////\line 
intel $50. ~finalize the ~inline compiler type's directory. ~finalize the ~inline compiler type's abort message. ~finalize the ~inline compiler type's abort path. ~fina
lize the ~inline compiler type's exe buffer. ~finalize the ~inline compiler type's listing buffer. intel $58.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Those sentences will get compiled later with the rest of the programmer's (and our generated) code. Since directories, abort messages, abort paths, and buffers are all just strings, each of those sentences will eventually resolve into\~
a call to this finalizer...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /routine/~finalize [string]/no/no/no/no//0/0/00000000/\line /variable/parameter/no/string/string/string/string/00000000/no/1/no////\line intel $50. unassign the string's first. intel $58.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...who gives the string's memory back to Windows by calling this Noodle routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To unassign a pointer:\line If the pointer is nil, exit.\line Call "kernel32.dll" "HeapFree" with the heap pointer and 0 [no options] and the pointer returning a number.\line If the number is 0, exit.\line Void the pointer.\line 
Subtract 1 from the heap count.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
And that's the way we manage string memory for the programmer, and help him conveniently deal with the rest of his dynamically-allocated data.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 159. Now delete that temporary "\\*** testing only" line in the son's compiler.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par ---
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Matching a statement (in the body of a routine) with the routine (that should be called to do the work) is mostly a matter of (a) breaking down 
the statement into a series of monikettes, and then (b) finding a routine header with the same monikettes. We do this in the next step after this one. In this step, we increase our chances of success by re-indexing some of our routine headers\~
using "reduced type" monikettes. For example, this routine...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To divide a number by a number giving a quotient and a remainder:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...which at this point is indexed as...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 divide [number] by [number] giving [quotient] and [remainder]}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...will be re-indexed as...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 divide [number] by [number] giving [number] and [number]}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par ...since both "quotient" and "remainder" are elsewhere defined as numbers.
\par \~
\par So let's get to work.
\par \~
\par 160. In the gray, open up the CAL's son and adjust the "compile a directory" routine to look like this:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line 
Compile the directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line Compile the directory (index the routines for utility use).\line Abort with "I'm not old enough to make babies.".\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (compile the bodies of the routines).\line \\Compile the directory (add and compile the built-in startup routine).
\line \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\Compile the directory (write the exe).\line \\
Compile the directory (stop).}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par 161. Then add these three guys back in:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (index the routines for utility use):\line If the compiler's abort flag is set, exit.\line 
Show status "Utilitizing...".\line Start the indexing utilities timer.\line Index the routines for utility use.\line Scrub the utility index.\line Reindex the utility index.\line Stop the indexing utilities timer.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To index some routines for utility use:\line If the compiler's abort flag is set, exit.\line Get a routine from the routines.\line 
If the routine is nil, exit.\line Index the routine for utility use.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To index a routine for utility use:\line If the compiler's abort flag is set, exit.\line If the routine is nil, exit.\line 
If the routine's function flag is set, exit.\line If the routine's parameters' count is 0, exit.\line Copy the routine's monikettes into some monikettes.\line Reduce the monikettes for utility use.\line Convert the monikettes to a moniker.\line Destroy
 the monikettes.\line If the moniker is in the routine index, exit.\line Find a refer given the moniker and the utility index.\line If the refer is not nil, put nil into the refer's pointer; exit.\line 
Index the routine given the moniker and the utility index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note that if the reduced moniker is the same as an existing routine's moniker, we don't put it in the Utility Index.
\par \~
\par Note also that if\~two or more\~routines reduce to the same moniker, we mark the first one as invalid by putting nil into the first routine's refer's poi
nter (in the Utility Index), so we'll know to remove it later. We don't want to remove it now, because then we wouldn't catch\~any other routines that ambiguously reduce to the same moniker.
\par \~
\par 162. So far, so good. Now we need the helper routines, starting with these two:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To copy some monikettes into some other monikettes:\line Destroy the other monikettes.\line Loop.\line Get a monikette from the monikettes.
\line If the monikette is nil, exit.\line Copy the monikette into another monikette.\line Append the other monikette to the other monikettes.\line Repeat.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To copy a monikette into another monikette: \line If the monikette is nil, void the other monikette; exit.\line 
Allocate memory for the other monikette.\line Put the monikette's string into the other monikette's string.\line Put the monikette's type into the other monikette's type.\line Put the monikette's variable into the other monikette's variable.\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ don't copy substring\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the monikette's current type into the other monikette's current type.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par 163. And this little looper...
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To reduce some monikettes for utility use:\line Get a monikette from the monikettes.\line If the monikette is nil, exit.\line 
If the monikette's type is nil, repeat.\line Reduce the monikette's type to a type for utility use.\line If the type is not nil, put the type into the monikette's type.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 164. ...who calls the routine below, who keeps reducing the type's type until he hits a fundamental type (or can't go any further):}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To reduce a type to another type for utility use:\line Put the type into the other type.\line Loop.\line If the other type is nil, exit.
\line If the other type's name is "hex string", exit.\line If the other type's name is "string", exit.\line If the other type's name is "number", exit.\line If the other type's name is "pointer", exit.\line 
If the other type's name is "thing", void the other type; exit.\line If the other type's base type is the other type, void the other type; exit.\line Put the other type's base type into the other type.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 165. These are the routines we use to get those ambiguous monikers out of the Utility Index:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scrub an index:\line Get a bucket given the index.\line If the bucket is nil, exit.\line If the bucket's refers are empty, repeat.\line 
Scrub the bucket's refers.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To scrub some refers:\line Swap the refers with some other refers.\line Loop.\line Put the other refers' first into a refer.\line 
If the refer is nil, exit.\line Remove the refer from the other refers.\line If the refer's pointer is nil, destroy the refer; repeat.\line Append the refer to the refers.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 166. And these are the routines we use to add an additional Routine Index entry for each routine that unambiguous
ly reduced to something more fundamental:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To reindex the utility index:\line If the compiler's abort flag is set, exit.\line Get a bucket given the utility index.\line 
If the bucket is nil, exit.\line If the bucket's refers are empty, repeat.\line Reindex the utility index given the bucket's refers.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To reindex the utility index given some refers:\line Get a refer from the refers.\line If the refer is nil, exit.\line 
Put the refer's pointer into a routine.\line If the routine is nil, abort with "Internal error - index the untility routines given some refers"; exit.\line Copy the routine's monikettes into some monikettes.\line Reduce the monikettes for utility use.
\line Index the routine given the monikettes and the routine index.\line Destroy the monikettes.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The Utility Index is not used again, since the Routine Index now includes both the original and the reduced header (if any)\~
for each routine. We keep the Utility Index around, however,\~as a debugging aid.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par 167. Run it. In the blue, open up the son's daughter and list her. The open up her listing file and find "utility index:" (with the colon, but without\~the quotes). At the top of that section you should see something like this:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 UTILITY INDEX:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /658 buckets/717 refers/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /bucket/\line /refer/divide [number] by [number] giving [number] and [number]/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par 168. And at the bottom we can see that all this reducing and scrubbing and reindexing doesn't take much time at all:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/125/\line /timer/scanning/469/\line /timer/resolving types/31/\line /timer/resolving globals/110/\line 
/timer/compiling routine headers/281/\line /timer/calculating/0/\line /timer/adding built-in memory routines/62/\line /timer/indexing utilities/78/\line /timer/compiling routine bodies/0/\line /timer/adding built-in startup routine/0/\line 
/timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line /timer/total/1641/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par See you next time!
\par \~
\par ---
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 This is the big one. Let's take a moment to review.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 At this point, the compiler has cataloged the }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 vocabulary}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  and }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 grammar}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  that the programmer wants to use (as defined by the }{
\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 types}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , the }{
\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 global variables}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , the }{
\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 literals}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , and the }{
\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 routine headers}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 that the Compiler found in his source). For quick and easy access, the Type Index has\~an entry\~pointing to each }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 type}{\rtlch\fcs1 
\af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  definition, the Global Index has an entry pointing to each }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 global variable}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 definition, and the Literal Index has an entry pointing to the definition of each }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 literal}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 . The Routine Index is a little more robust, and has multiple entries for each }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 routine header, }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 one monikette at a time, from left-to-rig
ht. For example, this routine...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a number to another number:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...is cataloged in the Routine Index like so:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 add...}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 add [number]...}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 add [number] in/into/to....}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 add [number] in/into/to [number]}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par This arrangement makes it easier to match each sentence in the body of each routine with a corresponding routine. Once we know who to call, all we have to do is make a list of the logical machine-code }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 fragments}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  that will be needed\~to push the correct param
eters and actually make the call. Each routine we call\~will have a body of it's own, of course, and may, in turn,\~
call other routines, etc, etc. At the very bottom, however, we will find routines that have bodies containing only machine code, like this one...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To bump a rider:\line Intel $8B9D08000000. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov ebx,[ebp+8] \\ the rider\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Intel $FF8314000000. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ inc [ebx+20] \\ the rider's token's last\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Intel $FF8308000000. \\}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  inc [ebx+8] \\
 the rider's source's first}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...or a call to a Windows function, like this one:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To buzz: \line Call "kernel32.dll" "Beep" with 220 and 200.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Simple enough. Unfortunately, the whole affair is complicated by sentences that require additional processing and/or more than one call to properly execute. This sentence, for example...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the box's height divided by 2 into a center offset.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...requires fragments for on-the-fly allocation of a }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 scratch}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 variable (to calculate and hold the address of the "height" field in the box record), with more fragments for on-the-fly allocation of an }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 intermediate}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 variable (to hold the result we get when we secretly call the Noodle's\~"divide a number by another number" routine to divide the box's height by 2), with even more fragments for on-the-fly allocation of the }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 local}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  "center offset" target variable\~
that will be passed to the Noodle's bottom-level "put a number into another number" routine to fill in.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 So\~let's get to it.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 169. In the gray, move our abort line down and uncomment the next step:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line Compile th
e directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line Compile the directory (index the routines for utility use).\line Compile the directory (compile the bodies of the routines).\line 
Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (add and compile the built-in startup routine).\line \\
Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\Compile the directory (write the exe).\line \\
Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 170. Then add in these three guys:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (compile the bodies of the routines):\line If the compiler's abort flag is set, exit.\line 
Show status "Compiling...".\line Start the compiling routine bodies timer.\line Compile the bodies of the routines.\line Stop the compiling routine bodies timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the bodies of the routines:\line Compile the body of the routine called "initialize before run".\line 
Compile the body of the routine called "run".\line Compile the body of the routine called "finalize after run".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the body of the routine called a string:\line If the compiler's abort flag is set, exit.\line 
Find a routine given the string and the routine index.\line If the routine is nil, abort with "I need a routine to '" then the string then "'."; exit.\line Compile the body of the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Note that we're not just looping thorough the routines in the order we found them; rather, we're starting with the Noodle's "initialize before run" routine (an
d anyone he calls), then we move on to the programmer's "run" routine (and whomever he calls), and lastly we compile the Noodle's "finalize after run" routine (and his helpers, if any). This is how we avoid compiling the bodies of routines that never get 
called.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 171. This is the top-level routine-body compiler:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the body of a routine:\line If the routine is nil, exit.\line If the compiler's abort flag is set, exit.\line 
If the routine's compiled flag is set, exit.\line Set the routine's compiled flag.\line Slap a rider on the routine's routine body.\line Move the rider (compiler rules).\line 
If the rider's token is the semi-colon byte, compile the body of the routine given the rider (alternate wording); exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the rider's token is "employ", compile the body of the routine given the rider (employ); exit.\line 
Put the current routine into a saved routine.\line Put the routine into the current routine.\line Create the routine's nickname index given 101.\line Eliminate duplicate nicknames from the routine's parameters given the routine's nickname index.\line 
Compile the body of the routine (prolog).\line Loop.\line If the compiler's abort flag is set, exit.\line If the rider's token is blank, break.\line Compile the next statement given the rider.\line Repeat.\line Compile the body of the routine (epilog).
\line Put the saved routine into the current routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
After dealing with possible special cases ("alternate wordings" and "employs"), this guy creates a nickname index for the routine's parameters, and then compiles the routine's }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 prolog}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 body proper}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , and }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 epilog}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 .}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 172. This is the guy we need to handle "alternate wordings" (implicit replacement routines):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the body of a routine given a rider (alternate wording):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the routine's next into a target routine.\line 
If the target routine is nil, abort with "You've defined an alternate wording here, but I'm not sure what you're rewording." and the rider; exit.\line Put the target routine's moniker into the routine's employs moniker.\line 
Compile the body of the target routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 173. And this is the helper we need to handle "employs" (explicit replacement routines):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the body of a routine given a rider (employ):\line If the compiler's abort flag is set, exit.\line 
Move the rider (compiler rules).\line Compile a routine reference given the rider.\line Convert the routine reference to the routine's employs moniker.\line Destroy the routine reference.\line 
If the rider's token is not ".", abort with "Employ statments should end with a period not '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line 
If the rider's token is not blank, abort with "Once an employ, only an employ" and the rider; exit.\line Find another routine given the routine's employs moniker and the routine index.\line If the other routine is nil, abort wit
h "I can't find the '" then the routine's employs moniker then "' routine you're trying to employ." and the routine's locus; exit.\line Compile the body of the other routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 174. We're going to need some additional types, mostly\~to deal with mathematical expressions, from\~here on.\~
May as well put them all in now:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A phrase is a string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line A term has a variable and a phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A field term has\line a\~dereference flag,\line a\~field (reference),\line a\~function routine (reference),\line a\~push flag.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An expression is a term.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An intermediate is a local.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A scratch is a local.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A nibble substring is a substring.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A prototype string has a first byte pointer and a last byte pointer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 term}{\rtlch\fcs1 
\af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  is either a }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 literal}{\rtlch\fcs1 
\af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , a\~}{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 new local variable}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , or a reference to a }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 
previously defined variable}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
. A numeric term may have a minus or plus sign in front of it. We call these "negated" and "posigated" terms, respectively. A record term may be followed by any number of possessives indicating fields within the record (like "box's left" or "rider's tok
en's first").}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 An }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 expression}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  is two or more terms separated by the infix operators }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 plus}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 minus}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 times}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 divided by}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  and }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 then}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
. We say that "an expression is a term" because the result of an expression (after execution)\~is really just another term.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 175. This is the top-level expression compiler:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile an expression given a rider:\line If the compiler's abort flag is set, exit.\line Compile a term given the rider.\line 
Put the term into the expression.\line Loop.\line If the compiler's abort flag is set, exit.\line If the rider's token is not any operator, exit.\line If the rider's token is "divided", compile the expression given the rider (divided); repeat.\line 
If the rider's token is "minus", compile the expression given the rider (minus); repeat.\line If the rider's token is "plus", compile the expression given the rider (plus); repeat.\line 
If the rider's token is "then", compile the expression given the rider (then); repeat.\line If the rider's token is "times", compile the expression given the rider (times); repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 176. This is the top-level term compiler, together with one of his trivial helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
To compile a term given a rider:\line Clear the term.\line If the compiler's abort flag is set, exit.\line Compile the term given the rider (common part).\line If the rider is on any simile, exit. }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the rider's token is "AS", compile the term given the rider (as part).\line 
If the rider's token is "/", compile the term given the rider (runtime ratio).}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To clear a term:\line Void the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 177. And this is the guy who compiles the part that all terms have:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a term given a rider (common part):\line If the compiler's abort flag is set, exit.\line If the rider's token is the dash byte, compile the term given the rider (negated term); exit.\line 
If the rider's token is the cross byte, compile the term given the rider (posigated term); exit.\line If the rider's token is the start of any variable, compile the term given the rider (variable); exit.\line 
If the rider's token is the start of any new local, compile the term given the rider (new local); exit.\line If the rider's token is any literal, compile the term given the rider (literal); exit.\line 
Abort with "I expected a term hereabouts but all I found was '" then the rider's token then "'." and the rider.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 178. This guy deals with terms that have a minus sign in front of them:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (negated term):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line 
Compile another term given the rider.\line If the compiler's abort flag is set, exit.\line If the other term's variable is nil, abort with "Invalid negate, I don't understand the variable '" then the other term's phrase then "'." and the rider; exit.
\line Add an intermediate given the other term's type name and the rider's token's first.\line Add several fragments given "put" and the other term's variable and "into" and the intermediate and the other term's locus.\line 
Add two fragments given "negate" and the intermediate and the rider's token's first.\line Put the intermediate into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 179. These three routines are general-purpose helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add an intermediate given a type name and a locus:\line If the current routine is nil, void the intermediate; exit.\line 
Add the intermediate to the current routine's locals given "local" and the locus.\line Generate the intermediate's name given "~I".\line Put the type name into the intermediate's type name.\line Resolve the intermediate.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add several fragments given a string and a variable and another string and another variable and a locus:\line 
Add a fragment given the push address tag and the other variable.\line Add another fragment given the push address tag and the variable.\line Add a monikette to some monikettes given the string.\line 
Add another monikette to the monikettes given the variable's type.\line Add a third monikette to the monikettes given the other string.\line Add a fourth monikette to the monikettes given the other variable's type.\line 
Find a routine given the monikettes.\line If the routine is nil, convert the monikettes to a moniker.\line Destroy the monikettes.\line If the routine is nil, abort with "I don't know how to '" then the moniker then "'." and the locus; exit.\line 
Add a third fragment given the call internal tag and the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a fragment given a tag and a variable:\line If the current routine is nil, void the fragment; exit.\line 
Create the fragment given the tag.\line Append the fragment to the current routine's fragments.\line Put the variable into the fragment's variable.\line Set the compiled flag in the variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 180. And this is\~a special helper:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To set the compiled flag in a variable:\line If the variable is nil, exit.\line If the variable's compiled flag is set, exit.\line 
Set the variable's compiled flag.\line If the variable's kind is not "global", exit.\line If the variable's literal is nil, exit.\line Find a routine given "put" and the variable's literal's type and "into" and the variable's type.\line 
If the routine is nil, find the routine given "convert" and the variable's literal's type and "to" and the variable's type; set a flag.\line If the routine is nil, abort with "The type of this global 
and the type of its literal are not compatible." and the variable's locus; exit.\line Compile the body of the routine.\line 
If the flag is set, put "convert the " then the variable's literal's name then " to the " then the variable's name then ". " into the variable's initializer string.\line 
If the flag is not set, put "put the " then the variable's literal's name then " into the " then the variable's name then ". " into the variable's initializer string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the variable is a global, and the programmer wants us to init
ialize it with a literal value, we're going to need a "put" or "convert" routine to actually fill it in at run time, so we make sure we've got such a routine now. If we find one, we take a moment to compile its body, and then we fill in the variable's "in
itializer string" with\~the Plain English sentence that will do the initializing. "Global initializer" sentences are compiled in the next step.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 181. Here are the seven helpers we need to find the right routines to call:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par To find a routine given a string and a type and another string and another type:\line Add a monikette to some monikettes given the string.\line Add another monikette to the monikettes given the type.\line 
Add a third monikette to the monikettes given the other string.\line Add a fourth monikette to the monikettes given the other type.\line Find the routine given the monikettes.\line Destroy the monikettes.
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a routine given some monikettes:\line Void the routine.\line 
Find the routine given a moniker and the monikettes' first and the routine index.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a routine given a moniker and a monikette and an index:\line If the monikette is nil, exit.\line Void the routine.\line 
Privatize the moniker.\line Put the monikette's type into the monikette's current type.\line Slap the monikette's current substring on the monikette's string.\line Loop.\line Append the monikette to the moniker (while bubbling).\line 
Find a refer given the moniker and the index.\line If the refer is not nil, put the refer's pointer into the routine.\line If the refer is not nil, find the routine given the moniker and the monikette's next and the index.\line 
If the routine is not nil, break.\line Bubble the monikette.\line If the monikette is bubbled out, break.\line Put the original moniker into the moniker.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To append a monikette to a moniker (while bubbling):\line If the monikette is nil, exit.\line 
If the moniker is not blank, append the space byte to the moniker.\line If the monikette's current substring is not blank, append the monikette's current substring to the moniker; exit.\line 
If the monikette's current type is not nil, append "[" and the monikette's current type's name and "]" to the moniker (fast); exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To bubble a monikette:\line If the monikette is nil, exit.\line 
If the monikette's current substring is not blank, clear the monikette's current substring; exit.\line If the monikette's current type is nil, exit.\line 
If the monikette's current type is any built-in type, put nil into the monikette's current type; exit.\line Put the monikette's current type's base type into the monikette's current type.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a type is any built-in type:\line If the type is nil, say no.\line If the type is the type's base type, say yes.\line Say no.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a monikette is bubbled out:\line If the monikette is nil, say yes.\line If the monikette's current type is not nil, say no.
\line If the monikette's current substring is not blank, say no.\line Say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 182. And here are two more routines we need to help us manage our fragments:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To create a fragment given a tag:\line Allocate memory for the fragment.\line Put the tag into the fragment's tag.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a fragment given a tag and a routine:\line If the current routine is nil, void the fragment; exit.\line 
Create the fragment given the tag.\line Append the fragment to the current routine's fragments.\line Put the routine into the fragment's routine.\line Compile the body of the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add two fragments given a string and a variable and a locus:\line Add a fragment given the push address tag and the variable.\line 
Add a monikette to some monikettes given the string.\line Add another monikette to the monikettes given the variable's type.\line Find a routine given the monikettes.\line If the routine is nil, convert the monikettes to a moniker.\line 
Destroy the monikettes.\line If the routine is nil, abort with "I don't know how to '" then the moniker then "'." and the locus; exit.\line Add another fragment given the call internal tag and the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 183. And now we're ready to compile "posigated" terms:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (posigated term):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).
\line Compile the term given the rider.\line If the term's variable is nil, abort with "Invalid posigate, I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 184. And "variable" terms, including those followed by possessives:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To decide if a string is the start of any variable:\line If the string is "the", say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (variable):\line If the compiler's abort flag is set, exit.\line 
If the current routine is nil, abort with "I don't know what you're trying to pull here." and the rider; exit.\line Move the rider (compiler rules).\line Scan a name given the rider.\line Find a variable given the name.\line 
Put the variable into the term's variable.\line Put "the " into the term's phrase.\line Append the name to the term's phrase.\line Compile the term given the rider (possessives).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (possessives):\line If the compiler's abort flag is set, exit.\line 
If the rider's token is not any possessive, exit.\line Compile the term given the rider (possessive).\line Repeat.\~ }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (possessive):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line 
Scan a name given the rider.\line If the compiler's abort flag is set, exit.\line If the name is "magnitude", compile the term given the rider (possessive - magnitude); exit.\line If the name is 
"target", compile the term given the rider (possessive - target); exit.\line If the name is "whereabouts", compile the term given the rider (possessive - whereabouts); exit.\line Compile the term given the rider and the name (possessive - field).}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 185. Some possessives reference compiler-defined metadata. A term's }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 magnitude}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 , for example,\~is it's length in bytes; a term's }{
\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 target}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 is the type of data a pointer points to; and a term's }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 whereabouts}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  is its address in memory.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (possessive - magnitude):\line If the compiler's abort flag is set, exit.\line 
If the term's variable is nil, abort with "Invalid use of magnitude, I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line Add a literal to the literals given the rider's token's first.\line 
Convert the term's type's length to the literal's data.\line Put "number" into the literal's type name.\line Resolve the literal.\line Put the literal into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (possessive - target):\line If the compiler's abort flag is set, exit.\line 
If the term's variable is nil, abort with "Invalid use of target, I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line If the term's type cannot be reduced to "pointer",
 abort with "You can only get the target of pointer types." and the rider; exit.\line Compile the term given the rider (dereference).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (possessive - whereabouts):\line If the compiler's abort flag is set, exit.\line If the term's variable
 is nil, abort with "Invalid use of whereabouts, I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line Add an intermediate given "pointer" and the rider's token's first. \line 
Add a fragment given the load address tag and the term's variable and the intermediate.\line Put the intermediate into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
186. Some terms need to be "dereferenced" to be used. If, for example, we're passed the address of the address of something, we need to get past that first address to get to the thing we're actually interested in.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (dereference):\line If the compiler's abort flag is set, exit.\line 
If the term's variable is nil, abort with "Invalid dereference, I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
If the term's type's target type is nil, abort with "I'm unable to determine the type of this target." and the rider; exit.\line If the term's kind is "scratch", compile the term given the rider (dereference - in place); exit.\line 
Add a scratch given the term's type's target type's name and the rider's token's first.\line Add a fragment given the load address tag and the term's variable and the scratch.\line Add another fragment given the dereference tag and the scratch.\line 
Put the scratch into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (dereference - in place):\line 
If the term's variable is nil, abort with "Internal error - compile a term given a rider (dereference - in place)" and the rider; exit.\line Put the term's type's target type's name into the term's type name.\line 
Put the term's type's target type into the term's type.\line Add a fragment given the dereference tag and the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 187.\~Here\~are a couple more general-purpose helpers we need:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a scratch given a type name and a locus:\line If the current routine is nil, void the scratch; exit.\line 
Add the scratch to the current routine's locals given "scratch" and the locus.\line Generate the scratch's name given "~S".\line Put the type name into the scratch's type name.\line Resolve the scratch.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a fragment given a tag and a variable and another variable:\line If the current routine is nil, void the fragment; exit.\line 
Create the fragment given the tag.\line Append the fragment to the current routine's fragments.\line Put the variable into the fragment's variable.\line Put the other variable into the fragment's other variable.\line Set the compiled flag in the variable.
\line Set the compiled flag in the other variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 188.\~And these are the four guys we need to handle references to fields in records:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider and a name (possessive - field):\line If the compiler's abort flag is set, exit.\line 
If the term's variable is not nil, put the term's type into a type.\line Find a field term given the term's phrase and the type and the name.\line If the field term is not empty, compile the term given the rider and the field term; exit.\line 
If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line If the type can be reduced to "pointer", put the type's target type into the type.\line 
If the type is nil, abort with "There's no '" then the name then "' field in a '" then the term's type's name then "'." and the rider; exit.\line Loop.\line If the compiler's abort flag is set, exit.\line Get a field from the type's fields.\line 
If the field is nil, abort with "There's no '" then the name then "' field in a '" then the term's type's name then "'." and the rider; exit.\line Find a deep field term given "" and the field's type and the name.\line 
If the deep field term is empty, repeat.\line Put the field into a first field term's field.\line If the term's type can be reduced to "pointer", set the first field term's dereference flag.\line Compile the term given the rider and the first field term.
\line Compile the term given the rider and the deep field term.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a field term given a phrase and a type and a name:\line Clear the field term.\line Find the field term given the type and the name.
\line If the field term's field is not nil, exit.\line If the phrase is not blank, find a routine given "put" and the phrase and "'s " then the name and "into".\line If the routine is not nil, put the routine into the field term's function; exit.\line 
If the type is nil, exit.\line Find the routine given "put" and the type and "'s " then the name and "into".\line If the routine is not nil, set the field term's push flag; put the routine into the field term's function; exit.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Make sure you leave the last three double-commented lines of the above routine (not shown here) out.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a field term given a type and a name:\line If the type is nil, exit.\line Find a field given the name and the type's fields.\line 
If the field is not nil, put the field into the field term's field; exit.\line If the type's target type is not nil, find the field given the name and the type's target type's fields.\line 
If the field is not nil, set the field term's dereference flag; put the field into the field term's field; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To clear a field term:\line Fill bytes with the null byte starting at the field term's whereabouts for the field term's magnitude.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 189. These\~are just another three general-purpose helpers we need:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a routine given a string and another string and a third string and a fourth string:\line 
Add a monikette to some monikettes given the string.\line Add another monikette to the monikettes given the other string.\line Add a third monikette to the monikettes given the third string.\line 
Add a fourth monikette to the monikettes given the fourth string.\line Find the routine given the monikettes.\line Destroy the monikettes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a routine given a string and a type and another string and a third string:\line Add a monikette to some monikettes given the string.
\line Add another monikette to the monikettes given the type.\line Add a third monikette to the monikettes given the other string.\line Add a fourth monikette to the monikettes given the third string.\line Find the routine given the monikettes.\line 
Destroy the monikettes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a routine given a string and a type and another string and a third string and a fourth string and a fifth string:\line Add a moni
kette to some monikettes given the string.\line Add another monikette to the monikettes given the type.\line Add a third monikette to the monikettes given the other string.\line Add a fourth monikette to the monikettes given the third string.\line 
Add a fifth monikette to the monikettes given the fourth string.\line Add a sixth monikette to the monikettes given the fifth string.\line Find the routine given the monikettes.\line Destroy the monikettes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 190. And these are six additional helpers we need to compile fields within records:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a field term is empty:\line If the field term's field is not nil, say no.\line If the field term's function is not nil, say no.
\line Say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider and a field term:\line If the compiler's abort flag is set, exit.\line If the field term's deref
erence flag is set, compile the term given the rider (dereference).\~ \line If the field term's function is not nil, compile the term given the rider and the field term (function); exit.\line 
If the term's kind is "scratch", compile the term given the rider and the field term (in place); exit.\line Put the field term's field into a field.\line Add a scratch given the field's type's name and the rider's token's first.\line 
Add a fragment given the load address tag and the term's variable and the scratch.\line If the field's offset is not 0, add a third fragment given the increment tag and the scratch and the field's offset.\line Put the scratch into the term's variable.
\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider and a field term (function):\line If the compiler's abort flag is set, exit.\line 
Put the field term's function into a routine.\line Put the routine's parameters' last into a parameter.\line If the parameter is nil, abort with "Internal error - compile a term given a rider and an field term (function)." and the rider; exit.\line 
If the parameter's type is nil, abort with "Internal error 2 - compile a term given a rider and an field term (function)." and the rider; exit.\line Add an intermediate given the parameter's type's name and the rider's token's first.\line 
Add a fragment given the push address tag and the intermediate.\line If the field term's push flag is set, add another fragment given the push address tag and the term's variable.\line Add a third fragment given the call internal tag and the routine.
\line Put the intermediate into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider and a field term (in place):\line If the compiler's abort flag is set, exit.\line 
Put the field term's field into a field.\line Put the field's type's name into the term's type name.\line Put the field's type into the term's type.\line 
If the field's offset is not 0, add a third fragment given the increment tag and the term's variable and the field's offset.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a fragment given a tag and a variable and a number:\line If the current routine is nil, void the fragment; exit.\line 
Create the fragment given the tag.\line Append the fragment to the current routine's fragments.\line Put the variable into the fragment's variable.\line Put the number into the fragment's number.\line Set the compiled flag in the variable.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is the start of any new local:\line If the string is any indefinite article, say yes.\line Say no.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 191. This is the guy who deals with new local variables:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (new local):\line If the compiler's abort flag is set, exit.\line 
If the current routine is nil, abort with "I don't know what you're trying to pull here." and the rider; exit.\line Add a local to the current routine's locals given "local" and the rider's token's first.\line 
If the rider's token is "another", put "other" into the local's name.\line Move the rider (compiler rules).\line Scan a name given the rider.\line Extend the local's name with the name.\line 
If the rider's token is "called", compile the call'd part given the rider and the local.\line Resolve the local.\line If the local is duplicated in the
 current routine's parameters, abort with "'" then the local's name then "' is already in use as a parameter." and the local's locus; exit.\line 
If the local is duplicated in the current routine's locals,abort with "'" then the local's name then "' is already in use as a local variable." and the local's locus; exit.\line 
Eliminate duplicate nicknames given the local and the current routine's nickname index.\line Put the local into the term's variable.\line Clear the term's phrase.\line Compile the term given the rider (possessives).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 192. And this is the guy who deals with literal terms:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (literal):\line If the compiler's abort flag is set, exit.\line Compile a literal given the rider.\line 
Put the literal into the term's variable.\line Clear the term's phrase.\line Compile the term given the rider (possessives).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note that literals can have possessives; for example...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 "abcde"'s magnitude.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...which is 5 (the length of the string).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 193. This is a little guy who helps us deal with similes:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a rider is on any simile: }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Privatize the rider.\line If the rider's token is "LIKE", say yes.\line If the rider's token is not "AS", say no.\line 
Move the rider (compiler rules).\line If the rider's token is any indefinite article, say no.\line Say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 194. And this is the guy who deals
 with "type overrides" (as in "put 0 as a pointer into the other pointer", which coerces the number zero to a pointer type literal):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (as part):\line If the compiler's abort flag is set, exit.\line If the term's variable is nil, abor
t with "Invalid 'as', I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line Move the rider (compiler rules).\line 
If the rider's token is not any indefinite article, abort with "I was hoping for an indefinite article after AS, but I found '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line 
Scan a type name given the rider.\line Find a type given the type name and the type index.\line If the type is nil, abort with "I can't find the '" then the type name then "' type." and the rider; exit.\line 
Add a scratch given the type's name and the rider's token's first.\line Add a fragment given the load address tag and the term's variable and the scratch.\line Put the scratch into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
195. Most ratios in Plain English programs are defined as literals at compile-time (like "1/2" or "1/3"). But sometimes a programmer might define a ratio at run-time, using other variables (like "Put the\~percent / 100 into a fraction.") Keep in mind tha
t our Compiler agrees with the great mathematician Leopold Kronecker that\~ "The dear God created the whole numbers; all else is menschenwerk." So when somebody says something like 0.333333333..., we think, "What he's really trying to say is simply\~
1/3, 1\~part out of 3." In any case, this is the guy who compiles "run-time ratios":}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a term given a rider (runtime ratio):\line If the compiler's abort flag is set, exit.\line 
If the term's variable is nil, abort with "Invalid use of /, I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line Move the rider (compiler rules).\line Compile another term given the rider.\line 
If the compiler's abort flag is set, exit.\line If the other term's variable is nil, abort with "Invalid use of /, I don't understand the variable '" then the other term's phrase then "'." and the rider; exit.\line 
Add an intermediate given "ratio" and the rider's token's first.\line Add several fragments given "put" and the term's variable and "and" and the other term's variable and "into" and the intermediate and the rider's token's first.\line 
Put the intermediate into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 196.\~And this is another handy-dandy helper we need:\~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add several fragments given a string and a variable and another strin
g and another variable and a third string and a third variable and a byte pointer:\line Add a fragment given the push address tag and the third variable.\line Add another fragment given the push address tag and the other variable.\line 
Add a third fragment given the push address tag and the variable.\line Add a monikette to some monikettes given the string.\line Add another monikette to the monikettes given the variable's type.\line 
Add a third monikette to the monikettes given the other string.\line Add a fourth monikette to the monikettes given the other variable's type.\line Add a fifth monikette to the monikettes given the third string.\line 
Add a sixth monikette to the monikettes given the third variable's type.\line Find a routine given the monikettes.\line If the routine is nil, convert the monikettes to a moniker.\line Destroy the monikettes.\line 
If the routine is nil, abort with "I don't know how to '" then the moniker then "'." and the byte pointer; exit.\line Add a fourth fragment given the call internal tag and the routine.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To put a term into another term:\line Put the term's variable into the other term's variable.\line 
Put the term's phrase into the other term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 197.\~And these are the six guys who handle infix expressions (subordinate clauses) in Plain English sentences:\~}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile an expression given a rider (divided):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).
\line If the rider's token is not "by", abort with "I really prefer the phrase 'divided BY'." and the rider; exit.\line If the expression's v
ariable is nil, abort with "Invalid 'divided by', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line Move the rider (compiler rules).\line Compile a term given the rider.\line 
If the compiler's abort flag is set, exit.\line If the term's variable is nil, abort with "Invalid 'divided by', I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
Add an intermediate given the expression's type name and the rider's token's first.\line Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.\line 
Add several fragments given "divide" and the intermediate and "by" and the term's variable and the rider's token's first.\line Put the intermediate into the expression's variable.\line Clear the expression's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile an expression given a rider (minus):\line If the compiler's abort flag is set, exit.\line 
If the expression's variable is nil, abort with "Invalid 'minus', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line Move the rider (compiler rules).\line Compile a term given the rider.\line 
If the compiler's abort flag is set, exit.\line If the term's variable is nil, abort with "Invalid 'minus', I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
Add an intermediate given the expression's type name and the rider's token's first.\line Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.\line 
Add several fragments given "subtract" and the term's variable and "from" and the intermediate and the rider's token's first.\line Put the intermediate into the expression's variable.\line Clear the expression's phrase.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile an expression given a rider (plus):\line If the compiler's abort flag is set, exit.\line 
If the expression's variable is nil, abort with "Invalid 'plus', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line Move the rider (compiler rules).\line Compile a term given the rider.\line 
If the compiler's abort flag is set, exit.\line If the term's variable is nil, abort with "Invalid 'plus', I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line Add an intermediate given the expression
's type name and the rider's token's first.\line Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.\line 
Add several fragments given "add" and the term's variable and "to" and the intermediate and the rider's token's first.\line Put the intermediate into the expression's variable.\line Clear the expression's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile an expression given a rider (then):\line If the compiler's abort flag is set, exit.\line 
If the expression's variable is nil, abort with "Invalid 'then', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line Move the rider (compiler rules).\line Compile a term given the rider.\line 
If the compiler's abort flag is set, exit.\line If the term's variable is nil, abort with "Invalid 'then', I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
Add an intermediate given "string" and the rider's token's first.\line Add the put or convert fragments given the expression's variable and the intermediate and the rider's token's first.\line Convert the term for concatenation given the rider.\line 
Add several fragments given "append" and the term's variable and "to" and the intermediate and the rider's token's first.\line Put the intermediate into the expression's variable.\line Clear the expression's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile an expression given a rider (times):\line If the compiler's abort flag is set, exit.\line 
If the expression's variable is nil, abort with "Invalid 'times', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line Move the rider (compiler rules).\line Compile a term given the rider.\line 
If the compiler's abort flag is set, exit.\line If the term's variable is nil, abort with "Invalid 'times', I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
Add an intermediate given the expression's type name and the rider's token's first.\line Add several fragments given "put" and the expression's variable and "into" and the intermediate and the rider's token's first.\line Add
 several fragments given "multiply" and the intermediate and "by" and the term's variable and the rider's token's first.\line Put the intermediate into the expression's variable.\line Clear the expression's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add the put or convert fragments given a variable and another variable and a locus:\line 
Add a fragment given the push address tag and the other variable.\line Add another fragment given the push address tag and the variable.\line Find a routine given "put" and the variable's type and "into" and the other variable's type.\line 
If the routine is nil, find the routine given "convert" and the variable's type and "to" and the other variable's type.\line If the routine is not nil, add a third fragment given the call internal tag and the routine; exit.\line }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ error message\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Add a monikett
e to some monikettes given "put/convert".\line Add another monikette to the monikettes given the variable's type.\line Add a third monikette to the monikettes given "into/to".\line Add a fourth monikette to the monikettes given the other variable's type.
\line Convert the monikettes to a moniker.\line Destroy the monikettes.\line Abort with "I don't know how to '" then the moniker then "'." and the locus.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 198.\~We need this guy for help with expressions involving "then":}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To convert a term for concatenation given a rider: }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ used for right-side THEN operand\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line If the term's type can be reduced to "string", exit.\line Add an intermediate given "string" and the rider'
s token's first.\line Add the put or convert fragments given the term's variable and the intermediate and the rider's token's first.\line Put the intermediate into the term's variable.\line Clear the term's phrase.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 199.\~And this is just another general-purpose helper:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a monikette to some monikettes given an expression:\line Create the monikette.\line Append the monikette to the monikettes.\line 
Put the expression's phrase into the monikette's string.\line Put the expression's variable into the monikette's variable.\line If the expression's variable is not nil, put the expression's type into the monikette's type.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 200.\~This is the guy who adds a prolog fragment to every routine, together with his little helper:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf1\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the body of a routine (prolog):\line If the routine is nil, exit.\line If the compiler's abort flag is set, exit.\line 
Add a fragment given the prolog tag.\line Add another fragment given the loop tag.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a fragment given a tag:\line If the current routine is nil, void the fragment; exit.\line Create the fragment given the tag.\line 
Append the fragment to the current routine's fragments.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~ 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 201.\~Some sentences start with a Plain English keyword (like "if" or "loop"); others don't:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider:\line If the compiler's abort flag is set, exit.\line If the rider'
s token is "if", compile the next statement given the rider (if); exit.\line If the rider's token is "loop", compile the next statement given the rider (loop); exit.\line 
If the rider's token is "privatize", compile the next statement given the rider (privatize); exit.\line 
If the rider's token is not the start of any statement, abort with "I was expecting a statement here, but I found '" then the rider's token then "'." and the rider; exit.\line Compile the next statement given the rider (other).\line 
If the rider's token is not the period byte, abort with "You seem to have forgotten a period around here." and the rider; exit.\line Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 202.\~This is the guy who compiles IF statements, together with his two helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (if):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).
\line Compile some monikettes given the rider.\line Remove any negatives from the monikettes returning a flag.\line Find a routine given the monikettes.\line If the routine is not nil, add push fragments given the monikettes.\line 
If the routine is nil, convert the monikettes to a moniker.\line Destroy the monikettes.\line If the routine is nil, abort with "I need a decider with the words '" then the moniker then "'." and the rider; exit.\line If the routine's de
cider flag is not set, abort with "Yeah, I'm going to need a decider here, ok?" and the rider; exit.\line 
If the rider's token is not the comma byte, abort with "I expected a comma around here, but I found '" then the rider's token then "'." and the rider; exit.\line Add a fragment given the call internal tag and the routine.\line 
If the flag is set, add another fragment given the not tag.\line Add a third fragment given the jump false tag.\line Move the rider (compiler rules).\line Loop.\line Compile the next statement given the rider (other).\line 
If the compiler's abort flag is set, exit.\line If the rider's token is the semi-colon byte, move the rider (compiler rules); repeat.\line 
If the rider's token is not the period byte, abort with "I'm thinking period, but you've got '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line Add a fourth fragment given the end if tag.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To remove any negatives from some monikettes returning a flag:\line Clear the flag.\line Swap the monikettes with some other monikettes.
\line Loop.\line Put the other monikettes' first into a monikette.\line If the monikette is nil, exit.\line Remove the monikette from the other monikettes.\line If the monikette's string is "not", reverse the flag; destroy the monikette; repeat.\line 
Append the monikette to the monikettes.\line If the monikette's string is "can't", reverse the flag; put "can" into the monikette's string; repeat.\line 
If the monikette's string is "cannot", reverse the flag; put "can" into the monikette's string; repeat.\line If the monikette's string is "nothing", reverse the flag; put "something" into the monikette's string; repeat.\line 
If the monikette's string is "won't", reverse the flag; put "will" into the monikette's string; repeat.\line If the monikette's string ends with "n't", reverse the flag; remove trailing bytes from the monikette's string given 3; repeat.\line Repeat.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add push fragments given some monikettes:\line If the current routine is nil, exit.\line Loop.\line 
Get a monikette from the monikettes (backwards).\line If the monikette is nil, exit.\line If the monikette's variable is nil, repeat.\line If the monikette's current substring is not blank, repeat.\line If the monikette's current type is nil, repeat.
\line Add a fragment given the push address tag and the monikette's variable.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 203.\~This is the guy who compiles other (ie, normal, programmer-created sentences):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (other):\line If the compiler's abort flag is set, exit.\line 
If the rider's token is blank, exit.\line If the rider's token is "exit", compile the next statement given the rider (exit); exit.\line If the rider's token is "repeat", compile the next statement given the rider (repeat); exit.\line 
If the rider's token is "break", compile the next statement given the rider (break); exit.\line If the rider's token is "say", compile the next statement given the rider (say); exit.\line If the rider's 
token is "intel", compile the next statement given the rider (intel); exit.\line If the rider's token is "push", compile the next statement given the rider (push); exit.\line 
If the rider's token is "call", compile the next statement given the rider (call); exit.\line If the rider's token is "point", compile the next statement given the rider (point); exit.\line 
If the rider's token is "if", abort with "Nested 'if' statements are a sure sign of unclear thinking. Think again." and the rider; exit.\line If the rider's token is "priva
tize", abort with "The 'privatize' statement cannot be used here." and the rider; exit.\line If the rider's token is "loop", abort with "Looping inside an 'if' statement is a good way to lose your lunch." and the rider; exit.\line 
If the rider's token is "employ", abort with "'Employ' must be the first and only imperative in a routine." and the rider; exit.\line Compile the next statement given the rider (call - internal).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 204.\~These are the four guys who compile EXIT and BREAK and SAY statements:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (exit):\line 
If the current routine's decider flag is set, abort with "What does 'exit' mean here? Yes? No? Maybe?" and the rider; exit.\line Add a fragment given the exit tag.\line Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (repeat):\line Add a fragment given the repeat tag.\line Move the rider (compiler rules).}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (break):\line Add a fragment given the break tag.\line Move the rider (compiler rules).}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (say):\line 
If the current routine's decider flag is not set, compile the next statement given the rider (call - internal); exit.\line Move the rider (compiler rules).\line Compile an expression given the rider.\line If the compiler's abort flag is set, exit.\line 
If the expression's variable is nil, abort with "Invalid 'say', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line If the expression's type cannot be reduced to "flag", abort with "I n
eed a definite 'yes' or 'no' here." and the rider; exit.\line Add a fragment given the load eax tag and the expression's variable.\line Add another fragment given the exit tag.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 205.\~This is the guy who handles normal calls (that is, calls from one Plain English routine to another):}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (call - internal):\line Compile some monikettes given the rider.\line 
Find a routine given the monikettes.\line If the routine is not nil, add push fragments given the monikettes.\line If the routine is not nil, destroy the monikettes; add a fragment given the call internal tag and the routine; exit.\line 
Convert the monikettes to a moniker.\line Destroy the monikettes.\line Abort with "I don't know how to '" then the moniker then "'." and the rider.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 206.\~This is the guy who handles inline machine code:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (intel):\line Move the rider (compiler rules).\line 
If the rider's token is not any hex literal, abort with "I need some machine code here, I found '" then the rider's token then "'." and the rider; exit.\line Add a fragment given the intel tag.\line Put the rider's token into a nibble substring.\line 
Add 1 to the nibble substring's first.\line Convert the nibble substring to the fragment's code.\line Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 207.\~These two guys handle the PUSH statement, which is rarely used (except when you're writing a Plain English compiler from scratch):}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (push):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).
\line Compile an expression given the rider.\line If the compiler's abort flag is set, exit.\line 
If the expression's variable is nil, abort with "Invalid 'push', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line If the ex
pression's type is not value pushable, abort with "Values of type '" then the expression's type's name then "' can't be pushed." and the rider; exit.\line Add a fragment given the push value tag and the expression's variable.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a type is value pushable:\line If the type is nil, say no.\line If the type is nil, say no.\line 
If the type's length is 4, say yes.\line If the type's length is 2, say yes.\line If the type's length is 1, say yes.\line Say no.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 208.\~These two guys handle abnormal calls (that is, calls to Windows functions):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (call):\line If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).
\line If the rider's token is any string literal, compile the next statement given the rider (call - external); exit.\line Compile the next statement given the rider (call - indirect).\~ }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (call - external):\line Put the rider's token into a string.\line Unquote the string.\line 
Move the rider (compiler rules).\line If the rider's token is not any string literal, abort with "Gee, I was expecting a quoted entry name, but I found '" then the rider's token then "'." and the rider; exit.\line 
Put the rider's token into another string.\line Unquote the other string.\line Move the rider (compiler rules).\line Add an entry to the imports given the string and the other string.\line 
If the rider's token is "with", compile the next statement given the rider (call - with clause).\line If the rider's token is "returning", compile the next statement given the rider returning a term (call - returning part).\line 
Add a fragment given the call external tag and the entry.\line If the term is empty, exit.\line If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
Add another fragment given the save eax tag and the term's variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 209.\~
A Dynamic Link Library (DLL) is a chunk of executable code that can be linked up with a program at run-time. All the Windows functions we use live in DLLs. Each DLL has to be "imported" at run-time. We have to kee
p track of all the DLLs (imports), and all the functions in those DLLs (entries), that a program calls. For example, this sentence...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Call "kernel32.dll" "Beep" with 220 and 200.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...refers to the "Beep" entry point in the "kernel32.dll". These five routines help us keep track of things like that:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add an entry to some imports given an import name and an entry name:\line Find an import given the import name.\line 
If the import is nil, add the import to the imports given the import name.\line Find the entry given the entry name and the import's entries.\line If the entry is not nil, exit.\line Create the entry.\line Append the entry to the import's entries.\line 
Put the entry name into the entry's name.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find an import given a string:\line Void the import.\line Loop.\line Get the import from the imports.\line If the import is nil, exit.
\line If the import's name is the string, exit.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add an import to some imports given an import name:\line Create the import.\line Append the import to the imports.\line 
Put the import name into the import's name.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To create an import:\line Allocate memory for the import.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find an entry given a string and some entries:\line Void the entry.\line Loop.\line Get the entry from the entries.\line 
If the entry is nil, exit.\line If the entry's name is the string, exit.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To create an entry:\line Allocate memory for the entry.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 210.\~
For compatibility with Windows, we had to allow for certain ugly clauses in CALL statements. The WITH clause, for example, indicates parameters that are to be passed as values instead of addresses; and the RE
TURNING clause indicates where Windows should but the value he wants to return to us. These two routines deal with those clauses:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (call - with clause): }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ this guy is recursive so parameters get passed right to left\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the compiler's abort flag is set, exit.\line Move the rider (compiler rules).\line Compile an expression given the rider.\line If the compiler's abort flag is set, exit.
\line If the expression's variable is nil, abort with "I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line 
If the expression's type is not value pushable, abort with "'" then the expression's type's name then "' can't be passed properly." and the rider; exit.\line If the rider's token is "and", compile the next statement given the rider (call - with clause).
\line Add a fragment given the push value tag and the expression's variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider returning a term (call - returning part):\line Move the rider (compiler rules).\line 
Compile the term given the rider.\line If the compiler's abort flag is set, exit.\line If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
If the term's type is not value pushable, abort with "A simple 1, 2, or 4-byte variable is required in the 'returning' clause." and the rider.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 211.\~And these are just two more helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To add a fragment given a tag and an entry:\line If the current routine is nil, void the fragment; exit.\line 
Create the fragment given the tag.\line Append the fragment to the current routine's fragments.\line Put the entry into the fragment's entry.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a term is empty:\line If the term's variable is not nil, say no.\line If the term's phrase is not blank, say no.\line Say yes.}
{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 212.\~Sometimes Windows forc
es us to call a routine that is dynamically linked in a non-standard way, the address of the address of the routine being available to us only at run-time. This is the guy who handles that situation:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (call - indirect):\line Compile an expression given the rider.\line 
If the compiler's abort flag is set, exit.\line If the expression's variable is nil, abort with "I don't understand the variable '" then the expression's phrase then "'." and the rider; exit.\line If the expression's t
ype cannot be reduced to "pointer", abort with "I really need a pointer type in this CALL statement." and the rider; exit.\line If the rider's token is "with", compile the next statement given the rider (call - with clause).\line 
If the rider's token is "returning", compile the next statement given the rider returning a term (call - returning part).\line Add a fragment given the call indirect tag and the expression's variable.\line If the term is empty, exit.\line 
If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line Add another fragment given the save eax tag and the term's variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 213.\~Sometimes Windows\~wants a pointer to one of our 
routines so he can call us in a non-standard and annoying way. For that, we need a special POINT command and this guy to compile it:\~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (point):\line Move the rider (compiler rules).\line Compile a term given the rider.\line If
 the compiler's abort flag is set, exit.\line If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line 
If the term's kind is "literal", abort with "You've got the wrong kind of variable here." and the rider.\line If the term's type's length is not 4, abort with "You've got the wrong kind of variable here." and the rider.\line 
If the rider's token is not "to", abort with "I was expecting the word 'to', but found '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line 
If the rider's token is not "routine", abort with "I was expecting the word 'routine' but found '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).\line Compile a routine reference given the rider.\line 
Convert the routine reference to a moniker.\line Destroy the routine reference.\line Find a routine given the moniker and the routine index.\line If the routine is nil, abort with "I can't find the '" then the moniker then "' routine to which 
you are trying to point." and the rider; exit.\line Add a fragment given the routine address tag and the routine.\line Put the term's variable into the fragment's variable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 214.\~This is the guy who compiles LOOP statements:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (loop):\line If the compiler's abort flag is set, exit.\line Add a fragment given the loop tag.
\line Move the rider (compiler rules).\line If the rider's token is not the period byte, abort with "You seem to have forgotten a period around here." and the rider; exit.\line Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 215.\~And this is the guy who compiles PRIVATIZE statements:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the next statement given a rider (privatize):\line If the compiler's abort flag is set, exit.\line 
Move the rider (compiler rules).\line Compile a term given the rider.\line If the compiler's abort flag is set, exit.\line 
If the term's variable is nil, abort with "Invalid 'privatize', I don't understand the variable '" then the term's phrase then "'." and the rider; exit.\line If the term's kind is not "parameter", abort with "You ca
n only privatize parameters." and the rider; exit.\line Add a local to the current routine's locals given "local" and the rider's token's first.\line Put the term's name into the local's name.\line Put the term's nickname into the local's nickname.\line 
Put the term's type name into the local's type name.\line Resolve the local.\line Prepend "original " to the term's name.\line If the term's nickname is not blank, prepend "original " to the term's nickname.\line 
Add several fragments given "put" and the term's variable and "into" and the local and the rider's token's first.\line If the rider's token is not the period byte, abort with "You seem to have forgotten a period around here." and the rider; exit.\line 
Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 216.\~This is just another general-purpose helper:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To decide if a string is the start of any statement:\line If the string is the start of any definition, say no.\line 
If the string is any literal, say no.\line If the string is any mark, say no.\line If the string is blank, say no.\line Say yes.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 217.\~And these are\~the two guys we need to pu
t an EPILOG into every routine (to clean up the stack, restore registers, and dump any Heap memory that is no longer needed):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile the body of a routine (epilog):\line If the routine is nil, exit.\line If the compiler's abort flag is set, exit.\line 
Add a fragment given the finalize tag.\line Loop.\line Get a variable from the routine's locals.\line If the variable is nil, break.\line If the variable's kind is "scratch", repeat.\line If the variable's type should not be finalized, repeat.\line 
Add another fragment given the push address tag and the variable.\line Find another routine given "~finalize" and the variable's type.\line If the other routine is nil, abort with "Internal error - compile the body of a routine (epilog)"; exit.\line 
Add a third fragment given the call internal tag and the other routine.\line Repeat.\line Add a fourth fragment given the epilog tag.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a routine given a string and a type:\line Add a monikette to some monikettes given the string.\line 
Add another monikette to the monikettes given the type.\line Find the routine given the monikettes.\line Destroy the monikettes.\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 218.\~EMPLOY and POINT statements\~
explicitly refer to other routines, and some terms implicitly refer to other routines (like "a box's center" which is an implicit reference to the function-routine "To put a box's center into a spot.") A }{\rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 
\i\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 routine reference}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  is\~
a list of monikettes that refers to such a routine, and these are the routines we use to compile them:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a routine reference given a rider:\line If the rider's token is "to", move the rider (compiler rules).\line 
If the rider is the start of any function, compile the routine reference given the rider (function); exit.\line If the rider's token is "decide", compile the routine reference given the rider (decide).\line Loop.\line 
If the compiler's abort flag is set, exit.\line If the rider's token is blank, exit.\line If the rider's token is ".", exit.\line If the rider's token is "the", compile the routine reference given the rider (definite article); repeat.\line 
If the rider's token is any indefinite article, compile the routine reference given the rider (indefinite article); repeat.\line If the rider's token is any monikette string, compile the routine reference given the rider (monikette string); repeat.\line 
Abort with "'" then the rider's token then "' is not valid in an employ statement." and the rider.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a routine reference given a rider (decide):\line Move the rider (compiler rules).\line 
If the rider's token is not "if", abort with "We always say DECIDE IF, not DECIDE and then '" then the rider's token then "'." and the rider; exit.\line Move the rider (compiler rules).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a routine reference given a rider (definite article):\line If the compiler's abort flag is set, exit.\line 
Move the rider (compiler rules).\line Scan a name given the rider.\line Prepend "the " to the name.\line Add a monikette to the routine reference given the name.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a routine reference given a rider (function):\line If the compiler's abort flag is set, exit.\line 
Add a monikette to the routine reference given "put".\line Move the rider (compiler rules).\line If the rider's token is any indefinite article, set a flag.\line If the flag is set, compile the routine reference given the rider (indefinite article).\line 
If the flag is not set, compile the routine reference given the rider (definite article).\line If the rider's token is not any possessive, abort with "I was expecting an 's, but found '" then the rider's token then "'." and the rider; exit.\line 
Move the rider (compiler rules).\line Scan a name given the rider.\line Add another monikette to the routine reference given "'s " then the name.\line If the rider's token is not "into", abort wit
h "I was expecting the word 'into', but found '" then the rider's token then "'." and the rider; exit.\line Add a third monikette to the routine reference given "into".\line Move the rider (compiler rules).\line 
If the rider's token is not any indefinite article, abort with "I was expecting an indefinite article, but found '" then the rider's token then "'." and the rider; exit.\line Compile the routine reference given the rider (indefinite article).}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a routine reference given a rider (indefinite article):\line If the compiler's abort flag is set, exit.\line 
Move the rider (compiler rules).\line Scan a name given the rider.\line Find a type and a nickname given the name.\line If the type is nil, abort with "Invalid employ statement, I don't understand '" then the name then "'." and the rider; exit.\line 
Add a monikette to the routine reference given the type.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a routine reference given a rider (monikette string):\line If the compiler's abort flag is set, exit.\line 
Add a monikette to the routine reference given the rider's token.\line Move the rider (compiler rules).\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 219. Whew! Made it. Run it, open the daughter in the blue, and List her. Then open the listing, find "ROUTINES:" (no quotes)\~
and you'll see a lot of scratches, intermediates, and fragments hanging on our routines. I've inserted some source lines in the listing below, in blue,\~
to make the fragments easier to understand (the fragments generated by each statement appear below the source):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ROUTINES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To abort with a string:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /routine/abort from/given/with/using [string]/yes/no/no/no//0/0/00000000/\line 
/variable/parameter/yes/string/string/string/string/00000000/no/1/no////\line /variable/scratch/yes/~S7063//flag/flag/00000000/no/1/no////\line /variable/scratch/yes/~S7064//flag/flag/00000000/no/1/no////\line /variable/scratch/yes/~S7065//abort message/
abort message/00000000/no/1/no////\line /fragment/prolog/////00000000/00000000//\line /fragment/loop/////00000000/00000000//}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the compiler's abort flag is set, exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
/fragment/load address/compiler/~S7063///00000000/00000000//\line /fragment/increment/~S7063////00000014/00000000//\line /fragment/push address/~S7063////00000000/00000000//\line /fragment/call internal///[flag] is/are set//00000000/00000000//\line 
/fragment/jump false/////00000000/00000000//\line /fragment/exit/////00000000/00000000//\line /fragment/end if/////00000000/00000000//}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Set the compiler's abort flag.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
/fragment/load address/compiler/~S7064///00000000/00000000//\line /fragment/increment/~S7064////00000014/00000000//\line /fragment/push address/~S7064////00000000/00000000//\line /fragment/call internal///set [flag]//00000000/00000000//}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the string into the compiler's abort message.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
/fragment/load address/compiler/~S7065///00000000/00000000//\line /fragment/increment/~S7065////00000018/00000000//\line /fragment/push address/~S7065////00000000/00000000//\line /fragment/push address/string////00000000/00000000//\line 
/fragment/call internal///put [string] in/into/to [string]//00000000/00000000//\line /fragment/finalize/////00000000/00000000//\line /fragment/epilog/////00000000/00000000//}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 At the bottom of the listing you'll see that this is the part of compiling that really eats up the time:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/0/\line /timer/scanning/515/\line /timer/resolving types/32/\line /timer/resolving globals/109/\line 
/timer/compiling routine headers/281/\line /timer/calculating/16/\line /timer/adding built-in memory routines/47/\line /timer/indexing utilities/94/\line /timer/compiling routine bodies/1468/\line /timer/adding built-in startup routine/0/\line 
/timer/offsetting/0/\line /timer/addressing/0/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/\line /timer/total/5187/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Almost home now. The rest may be tedious, but it's easy stuff.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Now that we know everything in the source checks out, it's time to add one more routine of our own.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 220. Move our abort line down a notch and activate the next step:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line 
Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line Compile the directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line 
Compile the directory (index the routines for utility use).\line Compile the directory (compile the bodies of the routines).\line Compile the directory (add and compile the built-in startup routine).\line Abort with "I'm not old enough to make babies.".
\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (offset parameters and variables).\line \\Compile the directory (address).\line \\
Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 221. Then add this guy back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a directory (add and compile the built-in startup routine):\line If the compiler's abort flag is set, exit.\line Show status "Adding...".\line Start the adding built-in startup routine timer.\line 
Add and compile the initialize before run and run and finalize after run routine.\line Stop the adding built-in startup routine timer.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 222. And this guy, who creates the routine that will be the first routine to get control when the programmer's program is run:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To add and compile the initialize before run and run and finalize after run routine:\line If the compiler's abort flag is set, exit.\line Add a routine to the routines given nil.\line Append "~initialize before run an
d run and finalize after run" to the routine's header string.\line Append "initialize before run. " to the routine's body string.\line Append the global initializers to the routine's body string.\line Append "run. " to the routine's body string.\line 
Append the global finalizers to the routine's body string.\line Append "finalize after run. " to the routine's body string.\line Append "call ""kernel32.dll"" ""ExitProcess"" with 0. " to the routine's body string.\line 
Slap the routine's routine header on the routine's header string.\line Slap the routine's routine body on the routine's body string.\line Compile the header of the routine.\line Compile the body of the routine.
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 223. Then uncomment these two guys, who add initializer and finalizer code for global variables to our start-up routine:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To append the global initializers to a string:\line Get a global from the globals.\line If the global is nil, exit.\line If the global's literal is nil, repeat.\line If the global's compiled flag is not set, repeat.\line Clear a flag.\line 
Append the global's initializer string to the string.\line Repeat.
\par \~
\par To append the global finalizers to a string:\line Get a global from the globals.\line If the global is nil, exit.\line If the global's compiled flag is not set, repeat.\line If the global's type should not be finalized, repeat.\line 
Append "~finalize the " then the global's name then ". " to the string.\line Repeat.
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
224. And that's it for this step. Run it. In the blue, open the daughter and list her. Then open the listing and look for "run and run" (without the quotes); that will take you to the routine we just added, which sh
ould look like this (it's a biggie, so I've added some comments in blue and cut out a lot of repetitive lines):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par /routine/~initialize before run and run and finalize after run/yes/no/no/no//0/0/00000000/\line /fragment/prolog/////00000000/00000000//\line /fragment/loop/////00000000/00000000//
\par /fragment/call internal///initialize before run//00000000/00000000//\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ global initializers start here\line }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /fragment/push address/break tag////00000000/00000000//\line /fragment/push address/~L1////00000000/00000000//\line /fragment/call inte
rnal///put [number] in/into/to [number]//00000000/00000000//\line /fragment/push address/call external tag////00000000/00000000//\line /fragment/push address/~L2////00000000/00000000//\line 
/fragment/call internal///put [number] in/into/to [number]//00000000/00000000//\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ blah, blah, blah}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par /fragment/push address/document version////00000000/00000000//\line /fragment/push address/~L397////00000000/00000000//\line /fragment/call internal///put [string] in/into/to [string]//00000000/00000000//\line /fragment/push address/edge height////00000
000/00000000//
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ global initializers end here}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line /fragment/call internal///run//00000000/00000000//
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ global finalizers start here}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line /fragment/push address/compiler////00000000/00000000//\line /fragment/call internal///~finalize [~inline compiler type]//00000000/00000000//\line 
/fragment/push address/answer////00000000/00000000//\line /fragment/call internal///~finalize [string]//00000000/00000000//
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ blah, blah, blah}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line 
/fragment/push address/temp path////00000000/00000000//\line /fragment/call internal///~finalize [string]//00000000/00000000//\line /fragment/push address/document version////00000000/00000000//\line 
/fragment/call internal///~finalize [string]//00000000/00000000//
\par /fragment/push address/remembered picture path////00000000/00000000//\line /fragment/call internal///~finalize [string]//00000000/00000000//\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ global finalizers end here}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \line 
/fragment/call internal///finalize after run//00000000/00000000//\line /fragment/push value/~L12694////00000000/00000000//\line /fragment/call external////ExitProcess/00000000/00000000//\line /fragment/finalize/////00000000/00000000//\line 
/fragment/epilog/////00000000/00000000//
\par 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Next time, we'll calculate the offsets for our parameters and local variables.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 225. Time to calculate some offsets. Let's get right to it. Move our abort line down and reinstate the next step:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line 
Compile the directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line Compile the directory (index the routines for utility use).\line Compile the d
irectory (compile the bodies of the routines).\line Compile the directory (add and compile the built-in startup routine).\line Compile the directory (offset parameters and variables).\line Abort with "I'm not old enough to make babies.".\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (address).\line \\Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\
Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 226. Then put this guy back:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (offset parameters and variables):\line If the compiler's abort flag is set, exit.\line Show status "Offsetting...".
\line Start the offsetting timer.\line Offset the parameters in the routines.\line Offset the locals in the routines.\line Stop the offsetting timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 227. Now these two guys go back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To offset the parameters in some routines:\line If the compiler's abort flag is set, exit.\line Get a routine from the routines.\line 
If the routine is nil, exit.\line Offset the parameters in the routine.\line Repeat.
\par \~
\par \~
\par To offset the parameters in a routine:\line If the routine is nil, exit.\line If the routine's compiled flag is not set, exit.\line Clear the routine's parameter size.\line Loop.\line If the compiler's abort flag is set, exit.\line 
Get a parameter from the routine's parameters.\line If the parameter is nil, exit.\line If the routine's callback flag is set, set the parameter's by-value flag.\line If the parameter's previous is nil, put 8 into the parameter's offset.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  \\ skip the return address and saved ebp\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the parameter's previous is not nil, put the parameter's previous' offset plus 4 into the parameter's offset. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ all parameters are 4 bytes long}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par Add 4 to the routine's parameter size.\line Repeat.
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 228. And finally these two guys:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To offset the locals in some routines:\line If the compiler's abort flag is set, exit.\line Get a routine from the routines.\line 
If the routine is nil, exit.\line Offset the locals in the routine.\line Repeat.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To offset the locals in a routine:\line If the routine is nil, exit.\line If the routine's compiled flag is not set, exit.\line 
Clear the routine's local size.\line Loop.\line If the compiler's abort flag is set, exit.\line Get a local from the routine's locals.\line If the local is nil, exit.\line 
If the local's previous is not nil, put the local's previous' offset into the local's offset.\line Put the local's type's length into a length.\line If the local's kind is "scratch", put a pointer's magnitude into the length.\line 
Round the length up to the nearest multiple of 4.\line Subtract the length from the local's offset.\line Add the length to the routine's local size.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 229. Now run it. In the blue, open up the daughter and list her. Then get into the listing and look
 for "routines:" (with the colon, no quotes). You should\~see something that starts like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ROUTINES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /routine/abort from/given/with/using [string]/yes/no/no/no//4/12/00000000/\line 
/variable/parameter/yes/string/string/string/string/00000008/no/1/no////\line /variable/scratch/yes/~S7063//flag/flag/FFFFFFFC/no/1/no////\line /variable/scratch/yes/~S7064//flag/flag/FFFFFFF8/no/1/no////\line 
/variable/scratch/yes/~S7065//abort message/abort message/FFFFFFF4/no/1/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /fragment/prolog/////00000000/00000000//}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Now recall that the stack, in general,\~is arranged like this:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\field\fldedit{\*\fldinst {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid2709864 \hich\af31506\dbch\af31505\loch\f31506  \hich\af31506\dbch\af31505\loch\f31506 INCLUDEPICTURE \hich\af31506\dbch\af31505\loch\f31506 "cid:1761e2cc66f66ecc37b1" \\* MERGEFORMAT
\hich\af31506\dbch\af31505\loch\f31506  }}{\fldrslt {\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1024\langfe1024\noproof\insrsid2709864\charrsid2709864 {\*\shppict{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}
{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pibFlags}{\sv 2}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fHidden}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw15522\pich5209\picwgoal8800\pichgoal2953\jpegblip\bliptag307354926{\*\blipuid 1251dd2e2b7256d2edfc447e3bcc56ef}ffd8ffe000104a46494600010101006000600000ffe110f24578696600004d4d002a000000080004013b00020000000d0000084a876900040000000100000858
9c9d00010000001a000010d0ea1c00070000080c0000003e000000001cea00000008000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000476572727920527a65707061000000059003000200000014
000010a69004000200000014000010ba929100020000000336310000929200020000000336310000ea1c00070000080c0000089a000000001cea000000080000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000323031373a30363a30312031393a31383a343400323031373a30363a30312031393a31383a343400000047006500720072007900200052007a006500
7000700061000000ffe10b1f687474703a2f2f6e732e61646f62652e636f6d2f7861702f312e302f003c3f787061636b657420626567696e3d27efbbbf272069
643d2757354d304d7043656869487a7265537a4e54637a6b633964273f3e0d0a3c783a786d706d65746120786d6c6e733a783d2261646f62653a6e733a6d6574
612f223e3c7264663a52444620786d6c6e733a7264663d22687474703a2f2f7777772e77332e6f72672f313939392f30322f32322d7264662d73796e7461782d
6e7323223e3c7264663a4465736372697074696f6e207264663a61626f75743d22757569643a66616635626464352d626133642d313164612d616433312d6433
336437353138326631622220786d6c6e733a64633d22687474703a2f2f7075726c2e6f72672f64632f656c656d656e74732f312e312f222f3e3c7264663a4465
736372697074696f6e207264663a61626f75743d22757569643a66616635626464352d626133642d313164612d616433312d6433336437353138326631622220
786d6c6e733a786d703d22687474703a2f2f6e732e61646f62652e636f6d2f7861702f312e302f223e3c786d703a437265617465446174653e323031372d3036
2d30315431393a31383a34342e3631313c2f786d703a437265617465446174653e3c2f7264663a4465736372697074696f6e3e3c7264663a4465736372697074
696f6e207264663a61626f75743d22757569643a66616635626464352d626133642d313164612d616433312d6433336437353138326631622220786d6c6e733a
64633d22687474703a2f2f7075726c2e6f72672f64632f656c656d656e74732f312e312f223e3c64633a63726561746f723e3c7264663a53657120786d6c6e73
3a7264663d22687474703a2f2f7777772e77332e6f72672f313939392f30322f32322d7264662d73796e7461782d6e7323223e3c7264663a6c693e4765727279
20527a657070613c2f7264663a6c693e3c2f7264663a5365713e0d0a0909093c2f64633a63726561746f723e3c2f7264663a4465736372697074696f6e3e3c2f
7264663a5244463e3c2f783a786d706d6574613e0d0a202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200a2020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202020202020202020202020202020202020200a2020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020200a2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020200a20202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020200a20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200a202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020202020200a202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200a2020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202020202020202020202020202020202020202020200a2020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020200a2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020200a20202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020200a20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200a202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020202020202020200a202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
0a202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202020202020202020202020202020202020202020202020200a2020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020200a2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200a20202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020200a20202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200a202020202020
202020202020202020202020202020202020202020203c3f787061636b657420656e643d2777273f3effdb00430007050506050407060506080707080a110b0a
09090a150f100c1118151a19181518171b1e27211b1d251d1718222e222528292b2c2b1a202f332f2a32272a2b2affdb0043010708080a090a140b0b142a1c18
1c2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2affc000110800c5024b03012200
021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300
041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455
565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9
cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bff
c400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f117
18191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999a
a2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c030100021103
11003f00fa468a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028ae274df88f36b1a65b6a3a6f827c4d716975189619552d00752320e0dc6
6ad7fc26ba8ffd087e27fcacff00f922803aca2b93ff0084d751ff00a10fc4ff00959fff002451ff0009aea3ff00421f89ff002b3ffe48a00eb28ae4ff00e135
d47fe843f13fe567ff00c9147fc26ba8ff00d087e27fcacfff00922803aca2b93ff84d751ffa10fc4ff959ff00f2451ff09aea3ff421f89ff2b3ff00e48a00eb
28ae4ffe135d47fe843f13fe567ffc9147fc26ba8ffd087e27fcacff00f922803aca2b93ff0084d751ff00a10fc4ff00959fff002451ff0009aea3ff00421f89
ff002b3ffe48a00eb28ae4ff00e135d47fe843f13fe567ff00c9147fc26ba8ff00d087e27fcacfff00922803aca2b93ff84d751ffa10fc4ff959ff00f2451ff0
9aea3ff421f89ff2b3ff00e48a00eb28ae4ffe135d47fe843f13fe567ffc9147fc26ba8ffd087e27fcacff00f922803aca2b93ff0084d751ff00a10fc4ff0095
9fff002451ff0009aea3ff00421f89ff002b3ffe48a00eb28ae4ff00e135d47fe843f13fe567ff00c9147fc26ba8ff00d087e27fcacfff00922803aca2b93ff8
4d751ffa10fc4ff959ff00f2451ff09aea3ff421f89ff2b3ff00e48a00eb28accf0e6bb6de27f0e58eb5611cd1db5ec4258d27501d41ec402467e84d69d00145
646abaedc69976228f40d52fe2d819ae2cd61645e4f18690393c7653d4549a378834fd7526fb0c8eb35bb05b8b69e368a6809e81d1802338383d0f6268034e8a
28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a
28a0028a28a002b1fc53e224f0be84da9c965737c04d140b0db140ccd248b1af2eca00dcc075ef5b15c47c5bd3cdef80a491afee2ca0b3bbb5b9b830b84dd1a4
e858b363236805810472a2802d5ef8bb58b4f0aebdab5e785aef4b6d2f4f9aee217971048b3b22336dfdd48c47dde738ebc558f0ef8b2e357d667d2b50d25ec2
ea0b58ae8913a4c851c90395e54f0700e320572735de837be0ef1369ba4eb3afea925f6937289f6f4b97461e4bf313c8814e41eaa4e78a6e91e19d13c3bace8b
6fe044beb6d4ef0c37da8a2df4d243f65200769924765cb636a606ec8e380d4016ed7e22ebcba7dbea177a1d93d95eea2f6d66ff00da1b26b8469ca47e544b1b
ef2130c72cbd18f02bd22bcf7e147872c60f0edb6b32349797d99ede19ae307ecd0a4cebe5c63a28f97248e58f24f403a2beb0f15dd5f4bf64d7b4eb0b3cfee9
534c692603ddda5dbff8e50053f11f8e9343d42e2d6dec1af3ec31453dfc9e6ec585246da88a304c92b1076a000138059722ba5b29a7b8d3ede6bbb636b3c912
bcb6e5c398988c95dc38383c6475c5795fc524d365f125a2ea1711586a1a769c6f34dbb58d3ed57f79b8ac30c7ddc2b80ed18e0974e801af56b569dece16bb45
8e731a99514e42b63903db34012d1451401e77e0ed6e4d13e10f819e28566fb62d8d9b066c6d1200a587b8f4aee9f54b08b538b4d92fad92fa6432476ad32895
d4756099c903d715e73e1c744f84ff000e039c179ac42fb9f2d8ff00206b260b7f02c5e1c993c749663c5b189bed51dd39fb54f72491e642a4ee7c903ca2992a
30171c8a00f58d5b5bd3342b4173acdfc1650b3045699c2ee63d00f53ec2a77bfb48eed2d64ba852e1feec2d200edf41d4d79a785b56b7b2f1103f10ae913c4d
0dbd9d9585b4a0bc8eaf04665921500962d31943b01c08c038009383e35bcd32f74ff13dd452e87a46d9ee228835a7da752bcba8415f3570c1a2dac9f29c3600
0c702803d5ecb5c92ebc65ab68860558f4fb4b5b8594372e66330208f6f2bf5ad79244890bcaea8a3ab31c0ae57c3776b7be35d6a7560c5f4fd3d9b03b91337f
222b9fd4a4bb6f165bf82af44f2a5e6b4baac333ee656b34cdc32ee391f2ce8a9b33f7644c0c7400f4517d686f3ec82ea13738cf93e60df8ff0077ad4373ac69
f6b34304d7f6915c5c3324114b3aa34aea32554752477c038af15d6753d2df4d1abdacba16939d445e59595bda99f509196e0179a4955818f773b8152154ed63
ce0763e1df0bdbcdad78eef8c7e65ec9a8496d6b23a03e4298525fddfa1324ac49e09207a0a00ed2cb540ba058deeb535a5a4d3411bcbb670621215048473f78
67383dc555d5b5b96d3c41e1eb2b530b43a9cd3095d867f76903b82a41c67705f5e335e7bfda56177e1ef07c72a689673278761bb7d4f5c55923b585910158e3
2cbbd98af2723681ce7201cdb2d36f75bf09d85ae87709269f06b579657574226b65b6b39417919518e506d62aa3b6e5e82803d2352f1ce9a96115c6857767aa
9fed4b5d3e758670c22334cb1124ae791b89f7c56fff006958ff00697f67fdb6dfedbb37fd9bcd5f336faedce71ef5e64eb6b7f769e21b08d20d32e753d2f4dd
31631b526860b866f354018da5a470a7baa8238359de12b582fb54d02ff52d76de5d4ee6fe4d416db4cb706eccacaeb27da6466622255263c055c00ab9ce2803
d4f5bd6ffb1e3b7486cae2feeeee5f2adedadc0cb1c124b3121554004924fd3248059e1dd75f5cb6bafb4d9b58de58dc9b5bab632893cb70aae30c3820aba907
8eb547c71e37d37c11a447717f221babb93c8b2b767dbe74a7a027f854752c7a0f524035fe1fde69573a6dd1b2d66d755d4ae26379a94901c7ef1c6d1853c840
b1845cf5083be6803ada28a2800a28a2800a28a2800a28a2800a28a28038df847ff248bc37ff005e4bfccd7655c6fc23ff009245e1bffaf25fe66bb2a002b97f
1220d3bc4fe1fd6e11b19eebfb3aed871be1955b603eb898478f4dcd8ea73d45737e3ff93c2125c0eb697969740fa797731bff0025a00e928a28a0028a28a002
8a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a0028a28a002
91955d4ab80cac3041190452d60f8a3c4e7c36ba72c5a4de6a971a8dd7d96086d5a2525f633f2647503e5463d7b5006f5431da5bc37535cc50a24f71b7cd902f
ccfb461727be335caeafe30d634df08dc6ad3786a7b1ba8eeed6de2b4bcb885bce12cf1c448689d80fbe7a9ea3a62ade95e3017b69adc97fa7bd84ba2311728d
3248bc47e670ea719da4641e46466803a348d224091a2a28e8aa30053abcfb42f1cf889dbc396de21d0aca09f5844ff537e5a6ff0057bde51008c8118e01264c
8c8ee715e83400d78d242a644562a72a48ce0fa8a7573b61e32b4d4aeb4e86dade522feeaf6dd198a8dbf6677477c67382538eff0030ce2ba2a0028a28a00f23
f0078be587e1af86eda4f02788f505b5b284c77115b5b346ccab80e85a607e8700d74cde3cba77577f879e2b664fbac6dad495fa7efea8f83b5b9344f843e067
8a159bed8b6366c19b1b44802961ee3d2bba7d52c22d4e2d364beb64be990c91dab4ca25751d58267240f5c5007287c7b74640e7e1ef8acba8c0636d6b91f8f9
f50ffc2627ed124fff000ad3c4de74abb6493ec769b9c74c13e7e48aeb756d6f4cd0ad05ceb37f05942cc115a670bb98f403d4fb0a9defed23bb4b592ea14b87
fbb0b4803b7d0753401c6c5e3696095a487e1c78a2391d5519d2d2d41655ced04f9fd064e076c9a94f8fef0b027e1f78b091d0fd9edb8ffc8f5b765ae4975e32
d5b44302ac7a7da5adc2ca1b97331981047b795fad6bc9224485e575451d598e05007083c5c019c8f867e2506e3fd71fb15a7ef7fdefdff3f8d4f1f8eae212e6
2f877e2a43236f72b6d6a37374c9fdff002781cd75e2fad0de7d905d426e719f27cc1bf1feef5a86e758d3ed668609afed22b8b866482296754695d464aa8ea4
8ef8071401c849e30f396112fc34f1338b7ff521aced0f97d3eefeff008e83a7a5173e2f1796b3db5dfc33f12cf05c1ccd14b6568cb29e396067c1e83afa0aea
acb540ba058deeb535a5a4d3411bcbb670621215048473f7867383dc555d5b5b96d3c41e1eb2b530b43a9cd3095d867f76903b82a41c67705f5e3340187278de
69a38e397e1cf8a1d23657456b5b521594e5481e7f041031e951db78c3ec734d359fc34f12c12dc36e99e2b3b45690fab113f27eb5a9a978e74d4b08ae342bbb
3d54ff006a5ae9f3ac33861119a658892573c8dc4fbe2b7ffb4ac7fb4bfb3fedb6ff006dd9bfecde6af99b7d76e738f7a00e49fc757324b1c8ff000efc54d247
9d8c6dad494c8c1c1f3f8e29dff09f5e6fddff000afbc59bb18cfd9edb38ff00bff5abe35f15db7837c2f75aa5c299a754616b6ca096b8942921401ce38249ec
013dab6eda5f3ed62988da6440d8f4c8cd00721ff0b06f7fe840f16ffe03db7ff1fa3fe160deff00d081e2dffc07b6ff00e3f5d9d1401c67fc2c1bdffa103c5b
ff0080f6dffc7e8ff85837bff42078b7ff0001edbff8fd7674500719ff000b06f7fe840f16ff00e03db7ff001fa3fe160deffd081e2dff00c07b6ffe3f5d9d14
01c67fc2c1bdff00a103c5bff80f6dff00c7e8ff0085837bff0042078b7ff01edbff008fd7674500719ff0b06f7fe840f16ffe03db7ff1fa3fe160deff00d081
e2dffc07b6ff00e3f5d9d1401c67c2062df083c364a95ff431c1fa9aeceb8df847ff00248bc37ff5e4bfccd765400573df102279be1cf884443322e9d3c918f5
6542cbfa815d0d4771047756d2dbcea1e2950a3a9fe2523045002c32acf047346729228653ea08cd3eb9df034f27fc22f0e9976e5ef74763a75c93d59a2002b9
ff007d363fd1c574540051552e755d3ecefadacaeefada0babb245bc124caaf3103276a9396c0f4a71d4ac57525d3daf6dc5eb26f5b632af9857d76e738e0f34
01668acad1b5c1ac6a1ad5ba41e52e957c2cf797cf9a7c98a52d8c71feb718e7eee7be2b503a990a0605d402573c807383fa1fca80168acfbed7b48d2e491353
d4ed2ccc51acb27da2758c22b315524b11804a903dc553f15eb7368ba3dadcd8f94f2dcea3656886405976cd711c6c7823f859b07d71401b94567db6bda4de6a
f3e9769a95acd7f6c3335b4732b491f4ce541c8ea3f3157bcc4f33cbdebbf1bb6e79c7ae2801d4551d4f5bd3346fb3ff006adf41686e641140b2b806573fc2a3
a93f4a9cdf5a0bcfb21ba845ce33e4f9837e3fddeb4013d15c6cde379e2f1636902ca328bae45a5f99e61ced7b13745f18ea08db8f4aea62d4ac6e2fa6b282f6
de5bb80665b74954c918ff006941c8ea3ad0059a2ab45a958dc5f4d6505edbcb7700ccb6e92a99231fed28391d475ab340051451400514514005145140051451
400514514005145140051451400514514005145140051451400579efc56b2859bc35a9ea3ac5e69ba758eaa3ed2d04c22081e195049b80dc1831551838c3b707
35e8548caac30c01190704771c8a00f2ad6db42d5fe1dea7a4da5febda8c4d756934e3518ee52508b730e763488a76f1fc27d4823ad24de1ad2743b9d4b43f04
8bd834fb7d3eebfb66137b2cd6e864858c6a048cd894921be5c7cbf7baae7d5ea086cadad96610411c62790c92855fbec7a93ea4e280398f875a0d9d878574fd
5033ddea3a958c12dc5f5c732480a02a83fba8b9c041c0fa924dc1a778b66be0f73e21d3e0b5128221b4d30ef280f42ef2b0c9f50a2ba1555450a802aa8c0006
0014b401e37abf87352f0d6a9e1c5d575675d3a6d76f6d6de3d26365b9d976679c6e93af508a7605da327757afdadb4767670db41bfca850469be4676c018196
62493ee493521556c6e50769c8c8e8696800a28a2803cbfc38e89f09fe1c07382f35885f73e5b1fe40d64c16fe058bc393278e92cc78b63137daa3ba73f6a9ee
4923cc8549dcf92079453254602e39156bc01e2f961f86be1bb693c09e23d416d6ca131dc456d6cd1b32ae03a16981fa1c035d3378f2e9dd5dfe1e78ad993eeb
1b6b5257e9fbfa00c3f0b6ad6f65e2207e215d22789a1b7b3b2b0b6941791d5e08ccb242a012c5a632876038118070012707c6b79a65ee9fe27ba8a5d0f48db3
dc45106b4fb4ea57975082be6ae18345b593e5386c0018e057767c7b74640e7e1ef8acba8c0636d6b91f8f9f50ff00c2627ed124ff00f0ad3c4de74abb6493ec
769b9c74c13e7e48a00bfe1bbb5bdf1aeb53ab062fa7e9ecd81dc899bf9115cfea525db78b2dfc157a27952f35a5d56199f732b59a66e19771c8f967454d99fb
b226063a69c5e3696095a487e1c78a2391d5519d2d2d41655ced04f9fd064e076c9a94f8fef0b027e1f78b091d0fd9edb8ff00c8f401e79acea7a5be9a357b59
742d273a88bcb2b2b7b533ea1232dc02f3492ab031eee7702a42a9dac79c0ec7c3be17b79b5af1ddf18fccbd935092dad647407c8530a4bfbbf426495893c124
0f4156478b803391f0cfc4a0dc7fae3f62b4fdeffbdfbfe7f1a9e3f1d5c425cc5f0efc548646dee56dad46e6e993fbfe4f039a00e5ff00b4ac2efc3de0f8e54d
12ce64f0ec376fa9eb8ab2476b0b2202b1c65977b315e4e46d039ce4039b65a6deeb7e13b0b5d0ee124d3e0d6af2caeae844d6cb6d67282f232a31ca0dac5547
6dcbd05769278c3ce5844bf0d3c4ce2dff00d486b3b43e5f4fbbfbfe3a0e9e945cf8bc5e5acf6d77f0cfc4b3c170733452d95a32ca78e5819f07a0ebe8280315
d6d6feed3c43611a41a65cea7a5e9ba62c636a4d0c170cde6a8031b4b48e14f75504706b3bc256b05f6a9a05fea5aedbcba9dcdfc9a82db6996e0dd99595d64f
b4c8ccc444aa4c780ab8015739c575f278de69a38e397e1cf8a1d23657456b5b521594e5481e7f041031e951db78c3ec734d359fc34f12c12dc36e99e2b3b456
90fab113f27eb401b9e3cbbb6b3f006baf7971140afa7ce8ad2b850cc636c28cf73e953f863c41a46bda523689a9daea0b6e891cad6b32c811b6f424719ae7ae
7c66f7a63379f0dbc4f70626df1f9b6968db1b18c8ccfc1c13cd4e3e205e8181f0ff00c5a07fd7bdb7ff001fa00ece8ae33fe160deff00d081e2dffc07b6ff00
e3f47fc2c1bdff00a103c5bff80f6dff00c7e803b3a2b8cff85837bff42078b7ff0001edbff8fd1ff0b06f7fe840f16ffe03db7ff1fa00ece8ae33fe160deffd
081e2dff00c07b6ffe3f47fc2c1bdffa103c5bff0080f6dffc7e803b3a2b8cff0085837bff0042078b7ff01edbff008fd1ff000b06f7fe840f16ff00e03db7ff
001fa00ece8ae33fe160deff00d081e2dffc07b6ff00e3f47fc2c1bdff00a103c5bff80f6dff00c7e8017e11ff00c922f0dffd792ff335d95719f0818b7c20f0
d92a57fd0c707ea6bb3a0028a2b27c57a8be8fe0dd675288ed7b3b09e753e8523661fca8033fc23fe9f75ad6bcb858752bcdb6c07468a11e5093df7156607fba
53d2ba6aa1a0e9a9a378734dd3221b52ced62800ff007542ff004abf401e697b0ea3e13f12dd5e5bdde8faaea5ac6a6822824b473786366004618498548e3c9d
db4000163c939c3d06d20d435ad36f753d7ada4d42e75a92f63b6d3ad835f348ace844d23336d851331901570a00ce4d7af2e9d64ba936a0b676e2f5e311b5c8
897cc641d14b6338f6a2df4eb2b5ba9ee6d6cede19ee0e669638955a53eac40c9fc68038bf04f86ec34df1b78bae0c534f7b1ea4a52f2e65323b2496b03119e9
f783718e06074c565f8eb569745bff0015aac53b6a7ad6976d61a4208db6cedfbe5c2b0e372b4cccc090428cf415e9c90c51c92491c688f290d232a805c80002
4f7e001f414fa00f16b4d53c393eb4fa86a3691eadaecde1cd3ffb36c8032cb333c72921074e778cbf450c492066bacd7b40d6f4ff00847a4e99a246b7dac690
ba7796ac7e595e17883124f6c2b367daba3d23c336ba2eb97d7f65b228aead6dad63b68e208b0470799b40c1c63f787b0c56cba2c91b248a1d1810cac3208f43
401e61a6787a3d5ae23d37c397f25bdb787b4e96cc6ad6cf8336a1298d9df23efed31e5f3c169369ce08ad4f035fdd6bfe2ed7b55d56ccda5ed8c36da4cb0939
54963df24a50f756f35083dc05aedad2cedb4fb38ed6c2de2b6b68976c70c2811107a051c0154341d1068b1dfee9fed12df5fcd79249b36fdf6f957193f75022
e7bedcf19c50072ba46b1a3c3f103556d7ee917c452de7d86c6d1d4b4a96bb41431a019d8df33b3f4ce41236e070fe29d534b6d1b53d66de5d0749d97d2dd5a5
b476bf68d4679a29b734ed22b8317cca723042afde20703dd7cb4f33ccd8bbf1b77639c7a66a0fecdb1dd3b7d8adf372a5673e52fef41ea1b8e47d6803cc352b
dfb3f8c2ee6b4c34f178ae678c6dce593c3fcffe3d8aa1e16b482ce5d32fa1d7adb51d56d74cb9ba8e3d2ad81dfe6c619e4bc90b3172ee148c6dcb0e0601af5f
fecfb2171e78b383cef3bcff0033ca5dde66cf2f7e719ddb3e5cf5dbc74a4b3d3acb4e474d3eceded56472eeb044a8198f5270393ef401e59e01d36cd75df0fc
cdafdbea17f159cb388f4ab75cb2ccaad24b7929662c5d82918dbf30e0601af5caad67a75969c8e9a7d9dbdaac8e5dd608950331ea4e0727deacd00145145001
451450014514500145145001451450014514500145145001451450014514500145145001451450014d95cc70bb84690aa92113196f619ef4ea82fad9ef2c27b6
8aea6b47950a09e0dbbe3c8fbcbb8119fa83401cc786bc6da8789a2b0bbb6f086a76fa65f20923be9ae6d768423218a2ca5f9f4db9e6a9e97f10af2e3558ed6f
f452905c6b377a5dbdd4370a77186491413193bbeec649232075e95cafc37bdf0f68da1e890dc78835f96faca116f716b1fda66b48a551b1a36da8635c1fe124
638a44f09f866c23d675f960d4e3f124faddf5bd949657d3453cb2bccce891a07098c104e46dc025b2013401d7eade2fd6ecfc53ab5b69fa6e9f3e99a65ac0f7
1757b7ff00658e076dece5db6b9c6cf2c8017d727a5749e1dd59f5df0dd86a92da359bddc0b298189253233d48048efc8071d8570ba0f865756f885ab1f13cad
7b359db69f3cd69c7d9dee8c254ca570379063f941e0750338c7a650014514500723f0be448be10f86a495951134b859998e028083249ae86df5ad2eef4c1a8d
aea569358b1205d473ab4648383f3038ea08af3ad17429b5ff0081fe0d856facedade0b7b59ee61be84c905d284c2c6e032f1bcab75e4a8041cd55b9f1136b02
cecaf6d3c3c48bcb83a6ead77094b148a28e312ce91b3fcedbe528b8600e1981c03900f598a68ee21596091258dc655d1810c3d88a8ae2feced209a7bbbb8208
a0c09a49240ab1e718dc4f4ea3afa8af24f0dddbdad86af7fa05e0d42d345d6e3bd68f4fb57b78a7b792d956611c593b97e67900190ccb95ea2a02f26ab3e8ba
83ea3a5d85aeb371a8ebbe6ea911781fcb7822b5254ba6e610307009e0ae71f2d007b341710dcdb25c5b4d1cd048a1d258d832b29e8411c11593e15d5e7d734b
b9bcb8f2b6aea3776f0f95d0c70dc3c4a49ee4f979fc6bcfec23d20693a268773aadc3f86658b51d4eea6bd02dd2e5229a3010631fb82d33385cf2aab9ca9c1d
df843771bf84ee2c2cb4e9adac2cb50bc5b699a2114732b5dccc02479dca154a70cabf7b03a5005e9bc6f7efaeea7a6691e10d57533a64cb04f345716b1aee68
d6418124aa48daea7a77a8fc41e37bfd0f5c9ad93465b9b6b7d286a370c6e9226846f6520963b48017d6b907b7d2747f1f78aa1d7bc4de228eeaeaee2ba862d3
de667789a08d7718e043c2b2940d8e8aa09cd696bfe1ef0a78d3c696d7de218e7b8d3a3d0ccf1cb24f35aaa08a6e5db050e46ecfcdd3af1401d1ebde2bd46dec
fc36fa06986e6eb599d4fd92e1844eb1790f2b649fba46141eb8cf426acf84fc4f77e20b8d52defac6d6da5d3a6585decaf0dd44ce572c9bcc69f32f0180040c
8e7a81c03e9d3ead3f85e19afb56b7d2eff5ab85d35e69d8dd1b1362cdb59dbe75ded1be093bc238e41e9eb5a7e9d67a4e9f0d8e996d15adac2bb6386140aaa3
d80a00b3451450014514500145145001451450014514500145145001451450071bf08ffe491786ff00ebc97f99aecab8df847ff248bc37ff005e4bfccd765400
5737f10be6f00ea90ffcfc22dbe3d7cc754c7fe3d5d25735e363e7db68da70e5efb59b4007a889fed0dff8ec0d401d2d14514005145140051451400514514005
145140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051451400515ce7887c59368ba
dd869363a0dfeaf797d0cb3c6b6d2431a858ca86c991d791e62fe754f56f176b1a7d8e872af872486f353d4fec4d63737316f55f265937074664cfee877e87d6
803afa2b8cb9f1ccd37c36d5bc416163e45eda79d6f0c1348ae8d70ade5a8dca70cbbf0320fa8a9749f16ead3f8b21d0757d1ad6d2596d9ee0f91a879f2c2aa4
00654118540c49030ed920f5c13401d6aaaa8c2800649c01dcf26a296d2de6b982e25851e6b7dde548cb929b860e0f6c8e29d717305a4266ba9a38220402f238
55049c0193ea481f8d49400d11a2bb3aa2866c6e603938e99a7573b61e32b4d4aeb4e86dade522feeaf6dd198a8dbf6677477c67382538eff30ce2ba2a0028a2
8a00f20f0378b95be15e87a5def81f5bd52d469d0c6e44568f0ce028e40798123bf207d2ba297c6714f6d1dbcdf0ef5f9208b1e5c4f059154c0c0c0f3f03038a
cff8732a47f0c7c37e63aa6ed3e20371c67e4cff00204fe15b235ed20e9cba80d56cbec4cc516e7ed09e596048c06ce339078f6a008d3c7f247233a780fc48ae
f8dcc23b305b1d33fe91cd4377e3286fe28e3bef875af5cc713068d6682c9c211d08067e0d4f77ac2daebba669a22f30ea0b33093760208d41e98e73b87a568a
babe76306da70707383e940187a878aed35692da4d53e1aeb77af6b27996ed716d632185f8f99499fe53c0e47a55987c786dbccfb3f807c451798e647d9159ae
e63d58e2e3927d6accfab69d6d3450dcea16b0cb36ff00292499559f66776013ce30738e98ab093c5248d1c72a3ba005955812a0f4c8f7a00a3ff0b0a70c5878
17c4bb88009d967923ff00023dcd4579e39fed0b396d2f7c01e239ede65292452476655d4f5047da3915a373776d6681eeee228149c0695c2827f1a94302a181
0548c839e314019adf106576566f027895990e5494b3ca9c638ff48f4269dff0b12e3fe847f137fdf369ff00c9150f86b549b59d36e2ee7f2f68bfba822f2fa1
48a778813ea4eccfe34dd27587bed5b5c8a56856dac2f63b48581e58986273939ebba5c01ed40163fe1625c7fd08fe26ff00be6d3ff9228ff858971ff423f89b
fef9b4ff00e48a7aeb5a5bdbdcce9a959b436ae63b8904ea56161fc2c73853c8e0fad4afa85947a7fdbe4bb816cf6799f69695447b7fbdbb38c7bd0057ff0085
8971ff00423f89bfef9b4ffe48a3fe1625c7fd08fe26ff00be6d3ff922a49b59d32df495d52e351b58ac1903add3ccab1153d0ee2718356d595d03210cac3208
390450050ff858971ff423f89bfef9b4ff00e48a3fe1625c7fd08fe26ffbe6d3ff00922b468a00ceff00858971ff00423f89bfef9b4ffe48a3fe1625c7fd08fe
26ff00be6d3ff922b468a00ceff858971ff423f89bfef9b4ff00e48a3fe1625c7fd08fe26ffbe6d3ff00922b468a00ceff00858971ff00423f89bfef9b4ffe48
a3fe1625c7fd08fe26ff00be6d3ff922b468a00ceff858971ff423f89bfef9b4ff00e48a3fe1625c7fd08fe26ffbe6d3ff00922b468a00a1f0818b7c20f0d92a
57fd0c707ea6bb3ae37e117fc921f0dffd792ff335d9500646abadde69d7621b5f0e6a9a98281bcdb46b7080e4fca7cc950e78f4c73d6a969da76a9aaebd16b7
e21b74b25b4464b0d3d25123445b8696461f2972bf280b90a0b727771d2514005145140051552e755d3ecefadacaeefada0babb245bc124caaf3103276a9396c
0f4a71d4ac57525d3daf6dc5eb26f5b632af9857d76e738e0f3401668acad1b5c1ac6a1ad5ba41e52e957c2cf797cf9a7c98a52d8c71feb718e7eee7be2b503a
990a0605d402573c807383fa1fca80168acfbed7b48d2e491353d4ed2ccc51acb27da2758c22b315524b11804a903dc553f15eb7368ba3dadcd8f94f2dcea365
6886405976cd711c6c7823f859b07d71401b94567db6bda4de6af3e9769a95acd7f6c3335b4732b491f4ce541c8ea3f3157bcc4f33cbdebbf1bb6e79c7ae2801
d4563c7e2147f136aba498085d32cadeede6ddf7fcd330da171d8439ce79ddd38e5be19d7c6b5e1ad1afaf4c16d7ba9d8c577f6559391bd031001e4e33fa5006
d5155a2d4ac6e2fa6b282f6de5bb80665b74954c918ff6941c8ea3ad50f117892dbc3d0401e19af2f6f1cc567636cbba5b87c6481d800392c7000ea6803628aa
3a65dde4fa5adc6b164ba6cff31921f3c4a100efbc003a73ed589e09f180f15f8424d6dd150acf38f2550ab246ac4c5b831cee688c6d9e01dd9000a00ea68acf
f0fea8fadf86b4cd564b7fb2bdf5a457260dfbfcade81b6e70338ce338151f877596d7b4837cd6c6d47da6e20542fb89114cf186e83ef6cdd8ed9c64d006a515
4b57bab9b3d3fcdb14b7798cd0c616e25f2d4869155b9fef609c0eed81dea73796cb2043711073279414b8c97c676fd71ce3d28026a2aa5d6aba7d8dd5b5aded
f5b5bdc5dbecb78a59555a66f4504e58fd2a9e95e208f53bcd6e26885bc7a4df0b3323c9feb0f9314a5ba7cbfeb76f53d33df1401af4554b7d574fbbba9edad6
fed679ede4f2a68a39959a27c676b00720e01383d8559924486269257548d14b33b1c0503a927b0a007515cf1f19e9d7173a12e91245a8c1ac5ec96a9710cbf2
27970cb2b30383bbfd5631fed673c73a96575733ea1a8c53a5b886de658e068a5dccc0c68c778fe16cb1e3fbbb4f7a00bb4554b2d574ed49676d3afed6ed6de4
314c60995c44e3aab60f047a1a9a2bab79a4d90cf148e5048151c13b0f46fa1c75a00968a28a0028a28a0028a28a0028a28a00f32f88767676ff0010bc3faaeb
5aeea5a7d8b5a5d5aa0b394a32ca4c4caa9e5aef62e15b239cec5c0a835bb2f0f78b742f0ee94d36afa95845ae279ff6e1730cc77c3380199c23e32ddbd874e2
bd4caab10580254e4123a1e9fd696803c5f5cd32d34cf0a7896cfc2335ec1e1cd36d5223e6dc3dc451de47323620f30b1c200430076e700721b1ea9a0f876c3c
3b66f0d8ab3cb33f997375336f9ae64eef23f563fa01c000002ae4161696b662d2deda28ed867112a0dbc9c9e3ea7356280391f88561e20d5bc33a8e9fa22e9e
b0cd66fba6b877f351c0246c555c6410a4127af6ad1f084fa8df787ad753d4b538750fb7dbc5731182d7c9445750d8037312391d49adda6430c56d6f1c16f1a4
50c4a1238e350aa8a060000740076a00f1ed5fc39a9786b54f0e2eabab3ae9d36bb7b6b6f1e931b2dcecbb33ce3749d7a8453b02ed193babd7ed6da3b3b386da
0dfe5428234df233b600c0cb31249f7249a90aab637283b4e4647434b40051451401e089a547acfc1ff02da4c5c46f3592bf97d4a346c8e33d8147604fa13573
c536d6c3c6325b4ba8691a3e9b61a52491ade5b8655333cc923469b9577ed8d1738380f8c7cd4be05d7ef63f87be1f87fe108f105f24167118e78a0b768d885e
1d0b4a0fd0e01adc9b5db9b9b8867b8f871e2296680e62924b4b5668cfaa933647e140186de18d32e6f3c12b78352bdb436cf6d1c5a8b9054084ba97418c3e13
073e801aced6f5c9f4e8d34a4497fb4dbc4e2f6ed194a04b31760a481ba152a61191fde6079045764fe26d424911dfe1f78999e324a31b7b6254918247efb8e0
914db9f115f5e5b3dbddfc3df134d0c830f1c96f6ccac3dc19a8039eb6d06d2df43f1f6a324425b879ef56279141f293633e13d3e791c93dc9f6ab3e16d297c3
9ac787650e259f5ad3a517f391f35c5c0d92ab1f600ca00ec303a0ad95f125fa2baa7c3df132ac84b3816d6c0313d49fdf739a493c437b2cd0cd27c3cf12bc96
e4989cdb5b1319230707cee320e28033fc637762fe268ed661a2da4b6d63e7cda8eb118956285dc8d91c6597733143939e001d720573fa0de595f68fa6e8ba95
f2ae850bea57170ce8d6c92c504e82388ab72b1e2607613f75141e320f5f37882eee248e4b8f875e2495e2398d9ed6d58a1f6266e2abddea1f6f9217bdf861ae
dc3c12f9d134b6368c63938f99499b83c0e473c500735e1ebf597c2963e1fb486e34dd2ee75cbab537600b75783ccba9cac633ba31b6345e429f9c81d3228ffa
0cde15f1b697e1ab47874d17f15ddadedac6a90ab04b5d8230482c772336e0369c672722bb3bcbf1a85a3dadff00c2fd76e6de497ce78a6b1b475693fbe419b1
bbdfad4dfdb973fbcff8b71e22fdeedf33fd12d7e7dbf773fbee71dbd280323c4da55ae99a9787346d3e7d2f4ad3edede7b92da845ba26921f2550b0dc9bd809
1d864f55dddaabda6810b787f47beb3d6addb4bb09ae6745d6ad47932bb39612a00cb855c485339f95b3d81adfbbd76e6fd516fbe1c788ae551b7a09ad2d5c2b
7a8ccdc1a2f35db9d421115ffc38f115d46ac1c24f696aea18743833751eb40186c6fb5082c7c57abde6916505b5bcc96f6f7f66fe585121c5c469bc105e3098
07240e9f788aee7c3f77797fe1eb1bbd4ed7ec977342af241b4aec2474c1e47d0f4e958573ae5cdebc2f79f0e3c4570d6efe642d2da5ab18dbfbcb99b83ee2ac
7fc257aa7fd085e29ffbf16fff00c7a803a6a2b99ff84af54ffa10bc53ff007e2dff00f8f51ff095ea9ff42178a7fefc5bff00f1ea00e9a8ae67fe12bd53fe84
2f14ff00df8b7ffe3d47fc257aa7fd085e29ff00bf16ff00fc7a803a6a2b99ff0084af54ff00a10bc53ff7e2dfff008f51ff00095ea9ff0042178a7fefc5bfff
001ea00e9a8ae67fe12bd53fe842f14ffdf8b7ff00e3d47fc257aa7fd085e29ffbf16fff00c7a803a6a2b99ff84af54ffa10bc53ff007e2dff00f8f51ff095ea
9ff42178a7fefc5bff00f1ea00d8f845ff002487c37ff5e4bfccd7655c5fc2062df083c364a95ff431c1fa9aed28032355f0d5a6af762e2e2ef5485c204db69a
9dc5ba601273b637033cf5c66a97fc20da77fd04bc41ff0083ebcffe3b57755d76e34cbb1147a06a97f16c0cd7166b0b22f278c3481c9e3b29ea2a4d1bc41a7e
ba937d864759add82dc5b4f1b453404f40e8c0119c1c1e87b134019dff0008369dff00412f107fe0faf3ff008ed6be95a543a45a1b7b79aee642e5f75dddc970
f9200c6e9189c71d338abb450079a5ec3a8f84fc4b75796f77a3eaba96b1a9a08a092d1cde18d980118612615238f2776d000058f24e70f41b48350d6b4dbdd4
f5eb69350b9d6a4bd8edb4eb60d7cd22b3a11348ccdb6144cc64055c28033935ebcba7592ea4da82d9db8bd78c46d72225f31907452d8ce3da8b7d3acad6ea7b
9b5b3b7867b8399a58e255694fab10327f1a00e2fc13e1bb0d37c6de2eb8314d3dec7a9294bcb994c8ec925ac0c467a7de0dc638181d31597e3ad5a5d16ffc56
ab14eda9eb5a5db586908236db3b7ef970ac38dcad333302410a33d057a72431472492471a23ca4348caa0172000093df8007d053e803c5ad354f0e4fad3ea1a
8da47ab6bb378734ff00ecdb200cb2cccf1ca4841d39de32fd143124819aeb35ed035bd3fe11e93a66891adf6b1a42e9de5ab1f965785e20c493db0acd9f6ae8
f48f0cdae8bae5f5fd96c8a2bab5b6b58eda38822c11c1e66d030718fde1ec315b2e8b246c92287460432b0c823d0d00798699e1e8f56b88f4df0e5fc96f6de1
ed3a5b31ab5b3e0cda84a63677c8fbfb4c797cf05a4da73822b53c0d7f75aff8bb5ed5755b33697b630db6932c24e55258f7c92943dd5bcd420f7016bb6b4b3b
6d3ece3b5b0b78adada25db1c30a04441e814700550d07441a2c77fba7fb44b7d7f35e4926cdbf7dbe55c64fdd408b9efb73c671401c7bf86ec17e2b7882faea
29aeae1b47b6bab79a794b085f7dca32a0e8a36ecc0c7a9ea4d71da2d8496fe0af0b78c25b58e3d66eef236b69251964b64b29638a3c8eccabbf6f76939af731
0c42e1a711a099942349b46e2a092067d01278f734c8eceda2b78208ade2486dc010c6a802c400c0da3b607031401e53e01d36cd75df0fccdafdbea17f159cb3
88f4ab75cb2ccaad24b7929662c5d82918dbf30e0601ae9fc43a95a787be23e9babebd2ada698fa64f6a97928fdd43319626daefd1372af04900edc575967a75
969c8e9a7d9dbdaac8e5dd608950331ea4e0727deac328652ac010460823ad00705e31f16693e20f04ea9a6784b5cb1d42fafc45a723595c2cde535cbf941894
3c614bb75e8b9aceb1f0cdf785bc770fdb3579efd75eb396dc24482dadd2e62886c1e4af041895802c598797d7d3d2459daaaa85b6840570ea0463861d0fd7de
a6a00e0fc19e3ad13fe111d02c525b99ef56cedede6b7b5b39a7682408aacafb1484da41c938c60d45e18f19e8fa368d71a65f4b3b6a569a85ea4b656b6b2dc4
c3fd2642bf246a4e194ab03e8c2bd04003a0c77e28000ce0633c9f7a00e53e201693c2b69710efc43ab69b3b260a9651790920838c7af3e95c26a7a32bdc7c41
f154ec66b8d075059ec10ffcbb9861b7b89597ddc0553ea171d0d7b23c692aed9115d720e1864641c8fd6a3b8b3b6bab59edae608e582e5592689d0159158608
61dc11c50079c6a8b7de19d7efb58b3bcd1f55d4357bb885a5bcd68ed76c840090a307f9514066ddb7006e63deb2354f0bd858e85f152e764d2dfdba4d3437b7
3299242a6c61931cf1f7d5bb70303a015eb4ba65826a02f92c6d96f162f245c08544823fee6ec676fb74a91ecad644b8492da175b9e27568c112f1b7e6fef700
0e7b0c5007077da6e9be0c87c25712c6f6da6e9b3492de5df95b984a6de54124c5467932c84b1e373738cd727a3eba356d1a23e306feced0eefc437335f0ba7d
a8a8d1acf6d0cc4f08ade62920e325429fbd83edd502d85a23dc3adb421ae9c3ce760fdeb050a0b7a90aaa39ec0500701e2bd3f46f165f7827541e7dee972ea2
d02c1b9e285a36b6b801f6704fcc130dfdde9c124d3d4aceea3b2f1ad9c11dc4b6abaf5a4d771db16f364b236d682544dbcf08ac30392a081c915e9f24314ad1
b4b1a3989b7c65941d8d82323d0e0919f734ab1a23332a2ab39cb1039638c73f801401e4f7117831b5ad31be1c1d35f5233c8d7cda6c818c76a2070eb2853f2a
6446151b0036dc01cd45e01d263f0ed87c3fd69dccb79afdb35bdedc9fbd279b6c27894fb22dbaa2fa7e26bd71618d19cac6aa5fef90a3e6fafad472d95ace6d
ccd6f1486d5fcc837203e536d2bb97d0ed66191d89a009e8a28a0028a28a0028a28a0028a28a00c1f14789cf86d74e58b49bcd52e351bafb2c10dab44a4bec67
e4c8ea07ca8c7af6acdd5fc61ac69be11b8d5a6f0d4f63751dddadbc56979710b79c259e38890d13b01f7cf53d474c566fc56b2859bc35a9ea3ac5e69ba758ea
a3ed2d04c22081e195049b80dc1831551838c3b7073597adb685abfc3bd4f49b4bfd7b5189aead269c6a31dca4a116e61cec69114ede3f84fa90475a00ec74af
180bdb4d6e4bfd3dec25d1188b94699245e23f3387538ced2320f23233587a178e7c44ede1cb6f10e856504fac227fa9bf2d37fabdef288046408c7009326464
7738ac99bc35a4e8773a9687e0917b069f6fa7dd7f6cc26f659add0c90b18d40919b1292437cb8f97ef755cf53f0eb41b3b0f0ae9faa067bbd4752b1825b8beb
8e64901405507f75173808381f524900eae69a3b78249ae2448a28d4bbc8ec155540c9249e800a723ac91abc6c1d1802aca7208f51595e218758b9b136ba343a
7c8b3a34739be7701548c70aa0eee09ea476ac1f8609acb783ec24d635786f44309b3f2a2b5f2f63c2e626258b12cd98ce7a73d874a00b1e23f1d2687a85c5ad
bd835e7d8628a7bf93cdd8b0a48db5114609925620ed40002700b2e4574b6534f71a7dbcd776c6d679225796dcb873131192bb8707078c8eb8af2cf8aa34c9fc
516df6e961d36fb4fb037ba65ca227daaf6ef7910c11e79708e0398c752d1f606bd56d5a77b385aed1639cc6a6545390ad8e40f6cd004b4514500719f0daf6da
c7e117851ef278e0592c2da242ed8dceca02a8f724e2ba5835bd2aeac5ef6d753b39ad11cc6d3c7708d1ab0382a581c020f6af2856d13fe14afc398fc532c31e
9524b6a2e3cf7291b016f29018fa640e0f07a77a75c1b26d61a6834ad2ac22d5aede7d327d661d96f6d05bc11c4d71e49db966df844f9495f9b2066803d796ee
dde18e55b889a397fd5b87187e09e0f7e013f81aab16bda44f6097d06ab6525a48c552e12e10c6c41c10181c120822bc5a1b0b2d7f4ab8d26dafa3bbd3c78aed
5964b1b536d134735b849446a49c23069795383b988eb5d878bdb47b6f1243a6c56fe1dd2cd9e9ff00689b50d5a0578e185dcaf97145b9433318cee391801739
c81401e8de626d0dbd76919073c11eb424892a0789d5d4f4653906bc26d2c0ebda6f8334cb7ba32583eb7a8e9f2ed85a00f6bb9e631846f9914c716c03b21c56
9683a1dbf87f5dd36fb4e1716ef73e33bfb455f31846b6c63b926248feeaa6f8c1000ea01f4a00f5dfed2b1fed2fecff00b6dbfdb766ff00b379abe66df5db9c
e3deaa68bad8d666d55160f2869f7cd66097cf99b5118b631c72e4639e99ef81e59e12b582fb54d02ff52d76de5d4ee6fe4d416db4cb706eccacaeb27da64666
22255263c055c00ab9ce2a59343b6d1343f1e4f652cd0ea69aa2d9bea9733b3c8914f1dab3befcf181293c636e3b62803d5edb56d3af5257b3bfb5b8585fcb95
a29958237f74e0f07d8d3ad352b1bf92e23b0bdb7b97b593ca9d61955cc4fd76b007e53ec6bc6f51d26d2dfc29e2f6d335482eaf6df468a364d1ad162b1b7313
33c2832cc5a55e7ab746190322bd7342d0ac3c3ba4dbe9da5c0b1450c6b1eec0dd2607de63d5989c924f5249a00ccd1fc636dae78cb55d16c10c9069b046cd76
33b6494bbaba29e842ec0091fc591daba4ae1ae3c57e1fd33e2a5dc5a86b7a7dbc8fa65bc0b1c972819a4f3a6f900ce73c8e3dc5773400514514005145140051
451400514514005145140051451401c6fc23ff009245e1bffaf25fe66bb2ae37e11ffc922f0dff00d792ff00335d950015cbf891069de27f0feb708d8cf75fd9
d76c38df0caadb01f5c4c23c7a6e6c7539ea2b9bf1ff00c9e1092e075b4bcb4ba07d3cbb98dff92d007494514500145145001451450014514500145145001451
4500145145001451450014514500145145001451450014514500145145001451450014514500145145001451450014515cb6abe32bab2f144ba1697e19d4b57b
986d63ba91ede6b78d151d995799245279461d3b500750caac30c01190704771c8a5ae3f57f186ada76a9a25a41e1f2f2ea16575753db4d751a496fe49878df9
287fd69cf38e0734dd4bc6b752f81749d6f41b02f75ab5cdb456f6b3b282c1e41bc6738ff561c839c743d2803ab86cadad96610411c62790c92855fbec7a93ea
4e2a6555450a802aa8c00060015cc7873c53a86ade20d4348d4f4bb4b49ac628e491acef8dd2c6ce4e239098d02be06eda0b70474e33d24d7305b9885c4d1c46
6711c61dc2ef6209da33d4e01e3da8024a6450c502148234894b339545001662598f1dc92493dc934fae6f40f18db788bc57ade97611efb6d2e2b76175ced9de
4699582f62aa62db91fc41876a00e89e3490a991158a9ca923383ea29d5ca6a9e367b09ee648345bab9d32c2658af6fcc8b1a4649018a2b7326dcfcc781d7049
18aeae800a28a2803c4fc2bae5d5dfc3df04443c23e269a3d204173e6db5b5bb4773b61741b499d481970d923f8718e6bb2b9f1a497b1aa5e7c37f13dc229dca
b2da5ab007d799ea7f86d7b6d63f08bc28f793c702c9616d12176c6e76501547b92715d2c1ade957562f7b6ba9d9cd688e6369e3b8468d581c152c0e0107b500
728de3591a4f31be1bf8a0bee0db8da5ae77018073e7f500f1493f8d1ee658e5b9f86de279a488e63792d2d58a1f6267e3a576ab776ef0c72adc44d1cbfeadc3
8c3f04f07bf009fc0d558b5ed227b04be8355b292d2462a970970863620e080c0e090411401cba78eae2324c7f0efc54a4b173b6d6d4658f53febfafbd4775e3
27bd7b77bbf86fe2899ad6613c05ed6d4f972005432feff8386619f735dcf989b436f5da4641cf047ad09224a81e275753d194e41a00e16dbc61f639a69acfe1
a7896096e1b74cf159da2b487d5889f93f5a7b78d64659d5be1bf8a0adc9cce0da5ae253b42fcdfbfe7e50073d8015d87f6958ff00697f67fdb6dfedbb37fd9b
cd5f336faedce71ef55345d6c6b336aa8b079434fbe6b304be7ccda88c5b18e397231cf4cf7c000e5e2f17f91602c61f867e258ed00c0b74b2b411e3d36f9f8a
b3ff000b06f7fe840f16ff00e03db7ff001faea2db56d3af5257b3bfb5b8585fcb95a29958237f74e0f07d8d3ad352b1bf92e23b0bdb7b97b593ca9d61955cc4
fd76b007e53ec68038eb6f193596ff00b1fc35f135bf98c5dfcab3b45dcc4e49389f9249cd4fff000b06f7fe840f16ff00e03db7ff001fab0fe37617b0bae8d7
434892f96c3fb4a57540656711a958cfccc85c85ddc73c804735d5d00719ff000b06f7fe840f16ff00e03db7ff001fa3fe160deffd081e2dff00c07b6ffe3f5d
9d1401c67fc2c1bdff00a103c5bff80f6dff00c7e8ff0085837bff0042078b7ff01edbff008fd7674500719ff0b06f7fe840f16ffe03db7ff1fa3fe160deff00
d081e2dffc07b6ff00e3f5d9d1401c67fc2c1bdffa103c5bff0080f6dffc7e8ff85837bff42078b7ff0001edbff8fd7674500719ff000b06f7fe840f16ff00e0
3db7ff001fa3fe160deffd081e2dff00c07b6ffe3f5d9d1401c67fc2c1bdff00a103c5bff80f6dff00c7e8ff0085837bff0042078b7ff01edbff008fd7674500
719f0818b7c20f0d92a57fd0c70df535d9d71bf08ffe491786ff00ebc97f99aeca800ae7be2044f37c39f108886645d3a79231eaca8597f502ba1a8ee208eead
a5b79d43c52a14753fc4a4608a00586559e08e68ce52450ca7d4119a7d73be069e4ff845e1d32edcbdee8ec74eb927ab34400573fefa6c7fa38ae8a800a2aa5c
eaba7d9df5b595ddf5b41757648b78249955e62064ed5272d81e94e3a958aea4ba7b5edb8bd64deb6c655f30afaedce71c1e6802cd1595a36b8358d435ab7483
ca5d2af859ef2f9f34f9314a5b18e3fd6e31cfddcf7c56a07532140c0ba804ae7900e707f43f95002d159f7daf691a5c9226a7a9da5998a35964fb44eb184566
2aa496230095207b8aa7e2bd6e6d1747b5b9b1f29e5b9d46cad10c80b2ed9ae238d8f047f0b360fae2803728acfb6d7b49bcd5e7d2ed352b59afed8666b68e65
6923e99ca8391d47e62af7989e6797bd77e376dcf38f5c5003a8aa3a9eb7a668df67fed5be82d0dcc8228165700cae7f8547527e9539beb4179f6437508b9c67
c9f306fc7fbbd68027a2b8d9bc6f3c5e2c6d2059465175c8b4bf33cc39daf626e8be31d411b71e95d447aa69f2decf6715f5b3dcdbaee9a05994bc43d5973903
9ef4016a8aab16a9a7cfa83d8417d6d25e471895edd265322a1e8c541c807b1e956a800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a
28a2800a28a2800af27f135ae9da6fc59bcbbd7bc45ad5a25fe9507d923b092412318e4977c6a90a16650195ba120b31cd7ac526d52c1881b80201c7207f9028
03cbb5bd07c33e3bd63c2b6da92dfea5a643697d01374d716eece0407f784ec7ce14f5e0f3d7b665ed9fdaf47b55d1b51d4edfc3f26bd650e937325c19a519df
1caf13c9b9bcb3b8042c4f20b0f976e7d8a5892785e29903c72295756190c0f045363b5822b78a08e18d62842889028c201c0c0ed8a00ada3e8da7e81a6c761a
45b25b5b4793b5724b31eacc4f2cc4f2589249e49ae3be277fc2469a24b7d60da5dad8e973c17eb733192494794eacd94014018dc0fcdcae7a678efe9934315c
dbc905c4692c32a9492391432ba9182083d411da802b6976f7d6b67e5ea97eb7f3ee24ccb008863d36827f9d7229e2bf0fd87c5ad5e0bcd6f4f8669f4cd3ede2
8dee5033c826bcca019c92372e476dc3d45775505ad8da58ab2d95ac36eac77308630809ce7271f53401e71e27f1e787f5bf124be159358b5b5d3aca603579a4
6e64656045b2fa0c8f9d8f006546493b7d2adee21bab68ae2d6549a19903c7246db95d48c8208ea08ef4b1c3143bbc98d23dec5db6a81b98f527dfde9caaa8a1
50055518000c00280168a28a00f1a56d13fe14afc398fc532c31e9524b6a2e3cf7291b016f29018fa640e0f07a77a75c1b26d61a6834ad2ac22d5aede7d327d6
61d96f6d05bc11c4d71e49db966df844f9495f9b2066ab78575cbabbf87be08887847c4d347a4082e7cdb6b6b768ee76c2e836933a9032e1b247f0e31cd76573
e3492f6354bcf86fe27b8453b9565b4b5600faf33d007030d8596bfa55c6936d7d1dde9e3c576acb258da9b689a39adc24a23524e11834bca9c1dcc475aec3c5
eda3db78921d362b7f0ee966cf4ffb44da86ad02bc70c2ee57cb8a2dca1998c6771c8c00b9ce40abede3591a4f31be1bf8a0bee0db8da5ae77018073e7f500f1
493f8d1ee658e5b9f86de279a488e63792d2d58a1f6267e3a500703696075ed37c19a65bdd192c1f5bd474f976c2d007b5dcf318c237cc8a638b601d90e2b4b4
1d0edfc3faee9b7da70b8b77b9f19dfda2af98c235b631dc931247f75537c608007500fa575e9e3ab88c931fc3bf15292c5cedb5b51963d4ff00afebef51dd78
c9ef5eddeefe1bf8a266b5984f017b5b53e5c80150cbfbfe0e19867dcd00727e12b582fb54d02ff52d76de5d4ee6fe4d416db4cb706eccacaeb27da646662225
5263c055c00ab9ce2a59343b6d1343f1e4f652cd0ea69aa2d9bea9733b3c8914f1dab3befcf181293c636e3b62ba6b6f187d8e69a6b3f869e25825b86dd33c56
768ad21f56227e4fd69ede359196756f86fe282b7273383696b894ed0bf37eff009f9401cf600500717a8e93696fe14f17b699aa41757b6fa3451b268d68b158
db98999e1419662d2af3d5ba30c81915eb9a168561e1dd26df4ed2e058a286358f7606e9303ef31eacc4e4927a924d729178bfc8b01630fc33f12c7680605ba5
95a08f1e9b7cfc559ff85837bff42078b7ff0001edbff8fd00605dfc42f0cf8a3c5496b36b9676da268d742491e57c7daeea23b9464f0b1c6c036e38dcca31c0
c9f52043282a720f208ef5c447e399e283c98be1d78a522e7e45b5b50bcf5e3cff007a907c40bd0303e1ff008b40ff00af7b6ffe3f401d9d15c67fc2c1bdff00
a103c5bff80f6dff00c7e8ff0085837bff0042078b7ff01edbff008fd0076745719ff0b06f7fe840f16ffe03db7ff1fa3fe160deff00d081e2dffc07b6ff00e3
f401d9d15c67fc2c1bdffa103c5bff0080f6dffc7e8ff85837bff42078b7ff0001edbff8fd0076745719ff000b06f7fe840f16ff00e03db7ff001fa3fe160def
fd081e2dff00c07b6ffe3f401d9d15c67fc2c1bdff00a103c5bff80f6dff00c7e8ff0085837bff0042078b7ff01edbff008fd0076745719ff0b06f7fe840f16f
fe03db7ff1fa3fe160deff00d081e2dffc07b6ff00e3f400bf08ff00e491786ffebc97f99aecab8cf840c5be10786c952bfe86386fa9aece800a28ac9f15ea2f
a3f83759d4a23b5ecec279d4fa148d987f2a00cff08ffa7dd6b5af2e161d4af36db01d1a28479424f7dc55981fee94f4ae9aa8683a6a68de1cd374c886d4b3b5
8a003fdd50bfd2afd0079a5ec3a8f84fc4b75796f77a3eaba96b1a9a08a092d1cde18d980118612615238f2776d000058f24e70f41b48350d6b4dbdd4f5eb693
50b9d6a4bd8edb4eb60d7cd22b3a11348ccdb6144cc64055c28033935ebcba7592ea4da82d9db8bd78c46d72225f31907452d8ce3da8b7d3acad6ea7b9b5b3b7
867b8399a58e255694fab10327f1a00e2fc13e1bb0d37c6de2eb8314d3dec7a9294bcb994c8ec925ac0c467a7de0dc638181d31597e3ad5a5d16ff00c56ab14e
da9eb5a5db586908236db3b7ef970ac38dcad333302410a33d057a72431472492471a23ca4348caa0172000093df8007d053e803c5ad354f0e4fad3ea1a8da47
ab6bb378734ffecdb200cb2cccf1ca4841d39de32fd143124819aeb35ed035bd3fe11e93a66891adf6b1a42e9de5ab1f965785e20c493db0acd9f6ae8f48f0cd
ae8bae5f5fd96c8a2bab5b6b58eda38822c11c1e66d030718fde1ec315b2e8b246c92287460432b0c823d0d00798699e1e8f56b88f4df0e5fc96f6de1ed3a5b3
1ab5b3e0cda84a63677c8fbfb4c797cf05a4da73822b53c0d7f75aff008bb5ed5755b33697b630db6932c24e55258f7c92943dd5bcd420f7016bb6b4b3b6d3ec
e3b5b0b78adada25db1c30a04441e814700550d07441a2c77fba7fb44b7d7f35e4926cdbf7dbe55c64fdd408b9efb73c671401cae91ac68f0fc40d55b5fba45f
114b79f61b1b4752d2a5aed050c68067637ccecfd339048db81c3f8a754d2db46d4f59b79741d2765f4b75696d1dafda3519e68a6dcd3b48ae0c5f329c8c10ab
f7881c0f75f2d3ccf3362efc6ddd8e71e99a83fb36c774edf62b7cdca959cf94bfbd07a86e391f5a00f30d4af7ecfe30bb9ad30d3c5e2b99e31b73964f0ff3ff
008f62ab782f45b0b8d4b4559f5eb6d42f4d84ee63d2add4ee49d01925bc90b3162ec011f772c381806bd67fb3ec85c79e2ce0f3bcef3fccf2977799b3cbdf9c
6776cf973d76f1d292cf4db1d3e3912c2ceded52462eeb044a81d8f52401c9f7a00e43e10e8d6ba77c32d0aed62dd797d651dcdc5c48a3cc91a4556e4fa00140
1e8abe95dc5321863b782386de348a28d422468a155540c0000e800a7d0014514500145145001451450014514500145145001451450014514500145145001451
450015ce7887c59368badd869363a0dfeaf797d0cb3c6b6d2431a858ca86c991d791e62fe75d1d7997c43b3b3b7f885e1fd575ad7752d3ec5ad2ead5059ca519
652626554f2d77b170ad91ce762e05006f6ade2ed634fb1d0e55f0e490de6a7a9fd89ac6e6e62deabe4cb26e0e8cc99fdd0efd0fad4773e399a6f86dab7882c2
c7c8bdb4f3ade1826915d1ae15bcb51b94e1977e0641f515cf6b765e1ef16e85e1dd29a6d5f52b08b5c4f3fedc2e6198ef86700333847c65bb7b0e9c565eb9a6
5a699e14f12d9f8466bd83c39a6daa447cdb87b88a3bc8e646c41e616384008600edce00e436003bad27c5bab4fe2c8741d5f46b5b4965b67b83e46a1e7cb0aa
90019504615031240c3b6483d704d755717305a4266ba9a38220402f23855049c0193ea481f8d67e83e1db0f0ed9bc362acf2ccfe65cdd4cdbe6b993bbc8fd58
fe807000000ac5f88561e20d5bc33a8e9fa22e9eb0cd66fba6b877f351c0246c555c6410a4127af6a00ebab9b87c636d75f113fe117b38fce3158cd73717233b
639124897ca07a16c4bb9876cafad4fe109f51bef0f5aea7a96a70ea1f6fb78ae62305af9288aea1b006e624723a93587e21f13e83a2fc50d19b57d66c2c847a
45fc6fe7dc2215669accaae09ce485620770a7d0d0074775afc56de258348f2c1cda3dddcced2055b78c3055ce7a9625b1d3ee37a56a47224b1ac9132ba380ca
ca72181e841af25f143786a1f889aaea3e31bb17119d3ed4e99a44c418b512be695da98fdeb0776013900b838c9523d07c19a5cfa2781f45d32f368b8b5b28a2
9420c2870a3200f4078a00dba28a28038cf86d7b6d63f08bc28f793c702c9616d12176c6e76501547b92715d2c1ade957562f7b6ba9d9cd688e6369e3b8468d5
81c152c0e0107b57942b689ff0a57e1cc7e299618f4a925b5171e7b948d80b79480c7d32070783d3bd3ae0d936b0d341a56956116ad76f3e993eb30ecb7b682d
e08e26b8f24edcb36fc227ca4afcd9033401ebcb776ef0c72adc44d1cbfeadc38c3f04f07bf009fc0d558b5ed227b04be8355b292d2462a970970863620e080c
0e0904115e2d0d8596bfa55c6936d7d1dde9e3c576acb258da9b689a39adc24a23524e11834bca9c1dcc475aec3c5eda3db78921d362b7f0ee966cf4ff00b44d
a86ad02bc70c2ee57cb8a2dca1998c6771c8c00b9ce40a00f46f313686debb48c839e08f5a12449503c4eaea7a329c835e13696075ed37c19a65bdd192c1f5bd
474f976c2d007b5dcf318c237cc8a638b601d90e2b4b41d0edfc3faee9b7da70b8b77b9f19dfda2af98c235b631dc931247f75537c608007500fa5007aeff695
8ff697f67fdb6dfedbb37fd9bcd5f336faedce71ef55345d6c6b336aa8b079434fbe6b304be7ccda88c5b18e397231cf4cf7c0f2cf095ac17daa6817fa96bb6f
2ea7737f26a0b6da65b837665657593ed323331112a931e02ae0055ce7152c9a1db689a1f8f27b296687534d516cdf54b99d9e448a78ed59df7e78c0949e31b7
1db1401eaf6dab69d7a92bd9dfdadc2c2fe5cad14cac11bfba70783ec69d69a958dfc9711d85edbdcbdac9e54eb0caae627ebb5803f29f635e37a8e93696fe14
f17b699aa41757b6fa3451b268d68b158db98999e1419662d2af3d5ba30c81915eb9a168561e1dd26df4ed2e058a286358f7606e9303ef31eacc4e4927a924d0
073375e36d72d3c4da7688de1eb19eeef260b2456dab9792087ab4ecbe48c2818ea4649001c9aedebccbc532f857fb5ae6efc253427c66970a83fb2b2f2cb2ab
0063b809c14c70de67dd1ce4100d7a6d0014514500145145001451450014514500145145001451450071bf08ff00e491786ffebc97f99aecab8df847ff00248b
c37ff5e4bfccd7654005737f10be6f00ea90ff00cfc22dbe3d7cc754c7fe3d5d25735e363e7db68da70e5efb59b4007a889fed0dff008ec0d401d2d145140051
45140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140052
155620b004a9c824743d3fad2d140055782c2d2d6cc5a5bdb451db0ce22541b79393c7d4e6ac5140051451400c8618adade382de348a18942471c6a155140c00
00e800ed51c363696f712cf6f6b0c534c774b2246159cfa923af41d6a7a2801a5159959954b2fdd24723e94ea28a0028a28a00f22d17fb66d7c1fe10d2b50f06
f8884fe1f78659bc94b47499a389d36826e01032e1b38fe1c639aeaae7c533dec6a979f0ebc43708a772acb1593007d79b8aece8a00e35bc5370d2798df0ebc4
25f706dc62b2cee0300e7ed1d403c524fe289ee658e5b9f873e219a488e637922b26287d89b8e3a5767450071e9e2fbc8c931fc3ef12292c5ced4b31963d4ffc
7c75f7a8eebc4f35ebdbbddfc3af114cd6b309e02f1d99f2e400a865ff0048e0e19867dcd76945007156de2592ce69a6b3f86fafc12dc36e99e286c95a43eac4
5c727eb4f6f155c32ceadf0ebc4456e4e67062b2c4a7685f9bfd239f9401cf6005765450071517891e0b01630fc36d7e3b40302dd20b211e3d36fda31567fe13
5d47fe843f13fe567ffc915d651401c90f1a6a0a30be01f13019cf0b67ff00c914bff09aea3ff421f89ff2b3ff00e48aeb28a00e4ffe135d47fe843f13fe567f
fc9147fc26ba8ffd087e27fcacff00f922baca280393ff0084d751ff00a10fc4ff00959fff002451ff0009aea3ff00421f89ff002b3ffe48aeb28a00e4ff00e1
35d47fe843f13fe567ff00c9147fc26ba8ff00d087e27fcacfff00922baca280393ff84d751ffa10fc4ff959ff00f2451ff09aea3ff421f89ff2b3ff00e48aeb
28a00e4ffe135d47fe843f13fe567ffc9147fc26ba8ffd087e27fcacff00f922baca280393ff0084d751ff00a10fc4ff00959fff002451ff0009aea3ff00421f
89ff002b3ffe48aeb28a00e63e1be977ba2fc36d0f4ed5206b7bcb7b554962620946c9e320915d3d14500646abadde69d7621b5f0e6a9a98281bcdb46b7080e4
fca7cc950e78f4c73d6a969da76a9aaebd16b7e21b74b25b4464b0d3d25123445b8696461f2972bf280b90a0b727771d25140051451400514514005145140051
45140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051
45140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051
4514005145140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051451400514514005145140051451401ffd9}}{\nonshppict{\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw15531\pich5212\picwgoal8805\pichgoal2955\wmetafile8\bliptag307354926\blipupi96{\*\blipuid 1251dd2e2b7256d2edfc447e3bcc56ef}
01000900000388e4000000005fe4000000000400000003010800050000000b0200000000050000000c02c6004c02030000001e00040000000701040004000000
070104005fe40000410b2000cc00c5004b0200000000c5004b0200000000280000004b020000c500000001000800000000000000000000000000000000000000
00000000000000000000ffffff00fefefe00fdfdfd00f7f7f700fcfcfc00fafafa00fbfbfb00f6f6f600f8f8f800f3f3f300f5f5f500f9f9f900f4f4f400f2f2
f2001616160008080800010101000b0b0b000606060096969600d2d2d2003131310019191900101010005a5a5a007474740094949400eeeeee008c8c8c00bebe
be00c7c7c700c9c9c900bfbfbf00c5c5c500b9b9b900c4c4c4000f0f0f0095959500f0f0f000cacaca00dcdcdc00bdbdbd007e7e7e00595959001c1c1c008181
8100ebebeb00bababa0097979700cdcdcd00505050003b3b3b00e8e8e800f1f1f100040404008f8f8f003f3f3f00c2c2c2001b1b1b00cccccc00efefef00dddd
dd00ededed0002020200d6d6d600909090005858580068686800e3e3e30014141400cbcbcb00c6c6c600b3b3b300e0e0e000c1c1c10022222200e1e1e100acac
ac00d4d4d40026262600d8d8d800b4b4b400dfdfdf000e0e0e005b5b5b007f7f7f009d9d9d00e6e6e600d1d1d1000d0d0d008484840036363600bcbcbc004949
4900565656004b4b4b00b6b6b6001a1a1a00b7b7b700090909009f9f9f00878787000303030007070700b0b0b0007272720054545400242424008e8e8e000a0a
0a0055555500a4a4a4005f5f5f009a9a9a0079797900515151003737370080808000383838008b8b8b00a0a0a0003d3d3d006c6c6c0077777700434343007b7b
7b009e9e9e002323230093939300dadada00afafaf0017171700d5d5d500aeaeae00ececec00a7a7a70085858500d3d3d30013131300c3c3c300aaaaaa003e3e
3e00484848008686860064646400333333000c0c0c008383830045454500626262000505050070707000cecece004e4e4e00c0c0c000d7d7d700eaeaea008888
880089898900dedede0047474700a6a6a600e4e4e4007a7a7a00a2a2a2003c3c3c006666660021212100b2b2b2004d4d4d00989898003a3a3a00414141008282
820035353500181818007d7d7d006b6b6b005c5c5c00ababab00b8b8b800b5b5b500111111009292920034343400a8a8a80071717100292929005e5e5e008d8d
8d00575757002b2b2b0042424200dbdbdb0015151500e5e5e500e2e2e2001f1f1f00e9e9e900a9a9a90027272700cfcfcf00757575008a8a8a004a4a4a00adad
ad00303030006a6a6a00a1a1a1002c2c2c002d2d2d002e2e2e004444440073737300d9d9d900c8c8c800a5a5a500a3a3a3001e1e1e0040404000bbbbbb003232
32002f2f2f00e7e7e700282828005d5d5d002a2a2a004f4f4f0053535300393939006d6d6d0078787800202020004646460012121200525252004c4c4c009b9b
9b00919191007c7c7c009c9c9c00d0d0d000b1b1b1006363630076767600999999006e6e6e0065656500606060006f6f6f001d1d1d0067676700616161006969
69002525250001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010605010701
0a01010101010101010105010c01040101010101010101010101010101010101010101070401030701090201010702010107020101010c090201010101010101
010101010101010101010101010101010101010604010c0101020c0101030501010901010a010105080101060102010702060103010107020101010401080101
0401010c080301010101010108010101070701010101010302010101010101010101030101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010301090101040101010101010101010103010a0101050103010101060101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
01010101010101060501090104010101010101010101010101010501090301010101010101010101010101010101060101010103020501010105030901010305
0501010101050101010101010101010101010101010101010101010101011f1f211f32632823214b3a3a3a241f20d8229b2863483c248c4b201e8c30d832242a
5d8c229b9b22481edd20214b61481e28ca2430dd3a225d283a488cf347d83a243a2a5d4b242424242424242424248c248c3a3a3a4b9b24242424242424242424
24242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424
2424242424242424242424242424242424242424242424242424242424244b2f010902060601010101010101010101080129c79ce0040101010b010107010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
010101010101010101010101010101010101010101010c01020101010101010101010103020c09010d0101010101010101010101010101010101010504090102
0a01010a0c0401010107010303010101010501010101010101010101010101010101010101010101010100106497008b00c36413136837000067406768100093
374010136400131167003754640097931300646e006e11b75a000011671312936800120037001125116740106413136497001313131313131313681397973737
37971313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
1313131313131313131313131313131313131313131313131313131313131313131313131313131313136e5b0b0c0101010501010101010101010701a0df18c6
cf005ccc3601040d0106010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101010101030101020101010101010101010105070101020101010101010101010101
010101010101010201010101080101010101010e0101020101020706030101010101010101010101010101010101010101010101010193520103070102080303
0101010101010301010501011c0107030103010101050901010902010506020201020c0101090102010101080901030101010b01040101010102010101010202
02020202020201030502020302010202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020254ab0101010103090101
0101010101010336010b0109040321ea5cca08010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010100010101010101010101010101010101010101010101010101050203030101010c010101010101010107010c010104
0109010101010101010101010101010101010b0401010801010c0703010a06060101070503030707050201010101010101010101010101010101010101010101
01019730050201a847010101020c0501010901010108070303010101010209050301030c0601010607010104010107050a010106040607060201090109010204
01070c0b090101030602010101010101010101010201010202010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101251d060a0803010101010101010101010101010901010604011cba184d010601010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010103020301010701010101
01010101010101010102050b0101010101010101010101010101010101010105360105060102020101010101010c010505010101010701010101010101010101
0101010101010101010101010101003c010801933001010102060701010102090101040301270103090101010307010101010901010701010b01010107010701
01010101010401040108010701010101010101060301030303030303030301030201010706020303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303
0303030303030303030303030303c36d01010101060b010101010101010106020501050109010a0101abea010d04010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
010101010101012f01010101010101010101c5f2010101010106010101010101010101010101010101010e010501010a0303010136010b060a01010101020606
030101010101010101010101010101010101010101010101010193230601018f780105070101010a0d0101010801012f010503050901090c0c01010e06010a02
010401010c0c0163c401010c04050207030101010d0101010c073603010306010101010101010101010101070301010102010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101eb9f090c01010101010101010101010101010103070204010101010eacda0301010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
0101010101010101010101010101010103050c410a010101010101010101941a0a030901153a010101010101010101010101010101015e08010901090102074e
96f6280106010c01010d3ed71c0101010101010101010101010101010101010101010101010137480109035e900c0109010182579eab3d05ce300dd963050101
054a142ed1c502f321010c530a010c0401020110b8013faea15bc50101030601ed2701090df0d5383e0101088cbe0101010101010101273f0e02010507010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101c38101010205020101010101010101010107010b010103010901
01079b77050101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01000101010101010101010101010101010101010101010101010c010906a26775524830885d0166b801d717a50101081b5c010805010609010601060c010c01
0259370301010401010101c7be8f000012db6101022b009700b6010401010a01090101010101010101010101010101010101104b01030de911c390010901ac55
946f2590aacc019eae0101090839439ee41866ed6d051f0001030133d7010c6e6101aed4ef740f700501019d6401070156771d19c3da05011e5e0501010d010e
02010c8000a15e423d03010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101
01010101010101010101030101040c10360101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010100010101010101010101010101010101010101010101010101010e010156fc666c0017d538066fab0d014993200a0178bc0101
01010101040207010101040c01d17d01070301010b0402010d011001413a3f03caeb2822c8174f010b0101020901010101010101010101010101010101016749
01010b25eeddede30d01001c01274b340057059ffa0501010100c5010d48de007f0124103f01018b4b2f01001f277db50107f2469b07050100450101ad300b01
4beb320ef2e30104010101010301033d5330d15e549c010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838
010201010201010101010101010101010101010101010201010602d2470101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010c045e860401050101060175
7901360169c35101beec030201010b010e0101020136010201bef5010109010302010127010a000102020301befc01010ce56601040c01040101010101010101
010101010101010101015a1f010b03bf280101ecb305e4960101010e8e300c9e5e0102060595fc01010901acd8052613150101751d0106003c01604b01012f26
c801022400010c03e42801010138a20a1f0001012f3605050105010105010907f06f010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101011838010201010201010101010101010101010101010101010101020201f4420201010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010a01
0101003c01060706060101e24b0102011c265e022efc0701010e010c010d0a0109f99abd7316f101020a01010309010101066e0c3601010b6a5b01010b4ee10d
01060307010301010101010101010101010101010101972a0101019a7001061510459917e5270801d53a076655010901019cc6558701878f1e01b868790901ec
760801001e067d31b55301010407034bc001011c39f6d9270108010152d30c010101013f0101013d01060105208f010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010201030101f15f0101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
01010101010101010101010507c5ebdd0601010a01010dad1e010d010123ea03bec90406080103050701010501412a7cf81200eae8a90402020236010b010001
0107010131e6450a01e01122010107010104010101010101010101010101010101011123010201e64d010106bf790de06f00a6a113480198ac080105030c3cbf
67df9a0f2203f018e4010cad8101016e63017de53b00e23a01020b99340201019aa1e3006f3a09018800361c03010501050308010106040181d5010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010501030101d8
d4010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
010101010101010101010101010101010101010101010e0352c300985b1d2ea5f20101003c0601094f347c0ce4fbb9360907090101010b06360701012900c5ce
cca907010105010d0127400901093601b80046c53601cf5d010109010601010101010101010101010101010101011248010c0caaf309050bf731010a044fdd9b
0fc427c164dd01010301010a59993a000708ade5b735016e5c059d67480adac00c1cae407a01562bbf0d09011b5c014f6dc38f013800bb010a06080101060187
020501f2642101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101
0101010101010301030101a32d050101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101000101010101010101010101010101010101010101010101010101018825927a5e6f5c353d0500005a120093cbc701bfb1fc12a0010105
1c0101010201030163de0104010102080b01030501015a01270101043ab05b673a05392802050c0109010101010101010101010101010101010168230501058e
c6b401017d42cec8010101d1170101af6baf3601016586020e01614601018fabe4f90100006be7170102c50f86074a3b8d06cc00132614362fb7da054d624e0c
bbbd40e00303010401013603c552fa00420601010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101
02010101010101010101010101010101010101010301010a62870101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010103010506009b0103010b010102136b1600ef
c7030109dcef016d376d020101020703010805016a56010101030a01010c040101040003010704010100a3ab64e9134801020101060201010101010101010101
0101010101014020010e01b2a68b6f61c9882200bd94bf3bd108010061ff6aab9bd80043b8e512b40601e276293b7593697fea8c02010123137f665a0101019f
5055cd51041f67f1896e0106b376b316866308010503014e000033590d0101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101183801020101020101010101010101010101010101010101010105010106fb530101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101030201978c
01010601040105008c07a28b9c010702aaae011c9925fe09030102020201050bfcda0101010101010101016ddf1f10050103010501cfce0dd7f17f0e01090101
080101010101010101010101010101010101109b010206daad87fc6ea409014a3190be15010801ab0b29cf628a0751daae6d410401093d040d4524510e010103
03010507a9aaaaa90705019eed0108070101c8aaea61018747419d2c461b010104010c01885e84ca010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101183801020101020101010101010101010101010101010101010207010104e5490101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
0101010101010e0101513b830a0101010603010028010ce55b03010590f701070a4184630101010203010101e0010101010101010101012f1b17110201010901
08883901010c8701010e010106010101010101010101010101010101010167280201019d6302013f010104010501360103010127010201e00101020302020b01
0102060201070b0701010103030101010106060101010942600301010108070602010101010101010b010109010101013d043846820101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010105010101f9d10101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
01010101010101010101010101010101010101010bb8001825640064b43501686f769ad41401010657db8f655108feb101020101010c06080101010101010101
0101070101ec0001050301010cc50fd8090701010c0c0101060301010101010101010101010101010101003c090101010106090101360b010401010107010c01
0601070109270101010301010501010101010101010302010101060c050101050c0603658e02010502010101030d090101040501050503030136c220ca221f16
77870101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101
0101030102020201d69f010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101020104852230dddd2153010200fa38bed10d3609014100b8d41300e98c01050907
01010136013d0101010101010101013f0153b7040c010a0c0107767fc701060b07010103050301010101010101010101010101010101672404010b0901080101
0a0101010402070b0103020104020a01060101060901010609010103070102050705010101030101010c0c01010103c2c6010c03051c01070301010703010102
0b02010101015f16ac8fac67644d0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101
010101010101010101010101010102010201020166f5010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010100010101010101010101010101010101010101010101010101013601010101010101012701056a5302060103010102
0a84ca0105010e0106010101010501010101010101010101010101030707ab010101010536020106020101030101040c01010101010101010101010101010101
0101134b0101010902010101030106090105010701080103010101010a0106010401030201010101020303020101010105060306050101050603011c01060101
0c010b01010107080c020401010104040907030101020c0101060101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101183801020101020101010101010101010101010101010101010303010207eefc010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010901050b070102010a
010205022701010109013d0501ca04350103030101050101020801013f0101010101010101010d01070301010107070101010107010501010101070101030101
0101010101010101010101010101688c010901010c01070403010607010505010801010601070236030108010107030101050601010101010101020502010102
07020207020105010b010501010d01030c050101010101060105010101050207012701010b010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101183801020101020101010101010101010101010101010101010503010209696b010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
010101010105020901070501080306010105010701011c0108010d011c0501060401010701020101050101010101010101010103040501080701050c01080101
010c0507070101010107010101010101010101010101010101019724010d0101050601050601010203010901010101030102010101010e010301020101050602
010102020203050301010c0101030301010c010105020109010101010101020b0c01010901020303040107010c010e0101870101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010103010102018ca6010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
010101010101010101010101010101030504010802010101040106030c0109010a0201090101013d01070701010701070101010401060101010101010101012f
01020a0101020102010301010201010107030107060101010101010101010101010101010101374b0101010b01010a01010c0101060101050108010101010701
040201010201010302010101030301010101010101020101010303010101010601040101020c0501010c0501010c0706010203010501010b0101030105010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010201
01010201f2c001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01000101010101010101010101010101010101010101010101010101010509010103010b010102010701010c0109080102010101010101010101090107030104
07010101010101010101050105030101010801030101070301060201010201010108010101010101010101010101010101011263010106010309060101010201
010601010d0101050801010c01030107020c01030101070201010104010b0101040101040b050101020101010801010105070101010101030201010101010101
01010201070109010303010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010f6d010101030105010101010101
01010101010101010101010103010108051101020107010108010101010101010101030105070101020101020706020101010d0101030106010c010101010101
010101060102080101270106050101010106030101030101010c0701040109010101010503010103050101020101010101090101080101080101030501010605
0101030103010c030109010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010100010101010101010101010101010101010101010101010101050c0101020501060107010c0c010c030901010101010b010101
01010101010105020301010101060101010101010101010102010c050201010301010107010103030506050101010101010101010101010101010101010197f5
3131da66eef6ef8126261b14f6eeab2642726631f11b26b872381b78f67fab424231ab1b1babf11bef6526311df181657072384231ee6df11bab26945772ab72
31b8b83172f68181818181818181ef14b8f181f1263181811b1b1b1b1b1b81818181818181818181818181818181818181818181818181818181818181818181
81818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181819776
060101010101010101010101010101010101010101010101010101040154360301070101090101010101010101010b0101030c0101060902010101090c010102
07050701020101010101010101010c01010201080401010101010907010501010101010c05010109010101090c02010103070703010105020101030805010608
010909010b0c010706010101060903010101010c0701010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101090101010c01010501010b0301
02010301070a010136010101010101010101010a020109040501010101010101010103010c010802060104010109070102070101010102030101010101010101
0101010101010101010100250000378b003713376797400000110000379700640000976713003700000000643700001300006737006700126800000000009713
110064004000005a0011004067000067000037373737373737373710000000670013404040406767379737373737373737373737373737373737373737373737
37373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737
37373737373737373737007e0402010101010101010101010101010101010101010102050101050c018051010107010107010101010101010101010101020c07
01010107360401010101020705010901090301010101010101010236060101060106070101010c01010106060501010105070203010727010301050101010101
0105010109060101030201030c010204070106010109020101010506080801010801010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010104
010501090101090101050101070101010c0c01010701010101010101010101080101010102010101010101010101010102010501090701010109010101070101
0101010205020101010101010101010101010101010154b601010207010107050301010101030301010501011c01060501050101010707010107010101030203
01020c0101090101010101040901050101010d010801010101020101010101010101010101010201020201010701010102020201010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101128902010103010501010101010101010101010101010101010601010705017ab5010105010105010101
010101010101010d040101010109030201010207090407010301010c010501010101010101010101010701070101010501010101010c01010108040101060101
04010107060105030101010103050d0101040c0102020307010101010c070501010b070103030101010301010906010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
01010101010101010101010802070107010503010101030b0c01050c01010106010601010101010101010c0101080101040b0101010101010101080905070801
030101060c0101060901020706020101020101010101010101010101010101010101139b0101010ff20202010504060101040101010407020201010101030907
030105090601010606010104010107050a01010509070507010109010401020401070c0b09010103060201010101010101010407010101010205010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010fbe01010203010301010101010101010101010101010101010701010301
05fdef010103030103010101010101010101010101050601010107010103020101010102030d050101030101010101010101010b7fb30a010601010607010206
0503360701010201010306001c070401010101050c03030c0501030101010101010101010701010601010104040101010101040a0101090c0103010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
010101010101010101010101010101010101010101010203010101010109010205010706010201010c0201010109010101010101010102010605013605010101
010101010101010101030c010501030101010d0901060101010707010101010101010101010101010101010101010020020e01fb8a0901010107050101010106
01010902010e0101060101010102010101010803010c01010a0301010c010c010101010101080109010901030101010101010309070101010101010101010102
0105070c010201010101010102020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101467801010302010101010101010101010101
0101010101010102010301010614f90101010302020101010101010101010b050101010a27010c01020908050105030501060701870101010101010101010d0c
88c10101090101060101070c010101020c010101070201d48601010b03030101010101010101010b0701050805010207050606050701020101033d0d02090106
36010708010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101050101013f010103010706010501014f8201010701030501010101010101
010103030a010105010e0101010101010101019d010401030a01010a0301060101070d0101010601010301010101010101010101010101010101182401010877
78030606010101360e0101010d0101c7010c05070401040909010108030108010106010107070123e00101070c020105020101010e010102040c0a0101010501
01010101010101010101013d01010103010c06050101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101b79f01010201
0101010101010101010101010101010101010301010701020259d40e02010102010101010101010101010101058701010101010103010101010101019d010101
27010101010101010101530161540b01010707030101020101360b02010c0b07010107f5bd030a0101010c0101090901010c010701010d010106010201010101
0101010b01010c010105270101030106010c01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010109010c0c4f090701010103010c010a81fa1c
010507ca28070101010101010101020109010901085e0101010101010101f198d12a0101060102a2ce06010a0701ca1c01010601010201010101010101010101
010101010101401e0201018f4201010c0101c27f9ff63602835d088823020101034d31aea54505832a02043e27010c0801020168b8012f2eea944a0101070601
ed36010c0df0d56d3e0101088cbe0101010101010101f3869d01010407f20b090501010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101461d010101020103010101010101010101010101010101010901010c0103010c5a580601010101010101010101010101040179d2fd29010b0281
d5fe1f01010405019851070101030101010101010101549c24000101060101010107010187613b8107010301010801eeaf0301020c0305010a59590a01050952
9e783a01876a050ba80d0b8009013195968a0105043f2c040108010c010301010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101015764df
dd9b20ba300531f6075325700101019e5c02010301010301010501010c010103f2670109070101010105e05b6b000037c6f301460084d5ec7ddee63d01080109
010101010101010101010101010101010101104b01030de911c390010901ac55946f2590aacc019eae0101090839439ee41866ed6d051f0001030133d7010c6e
6101aed4ef740f700501019d6401070156771d19c3da05011e5e0501010d010e0201960010c1ecd59a10c4080101030301010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010118380102010102010101010101010101010101010101010101010101010101015ff10101080c010c010101010101
01010101308da7de9d0361b781a78bf002020103dcf2010c0102010b013f6d6e89510001ef9364acd7010801010401010109b60ffa0c36010402064b973e0702
0c0101011b0046a8510183189e5646a6da00014b0001211301f3b742fe00be0d010768030c020109020201010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
01010101010107010494a7b150003bd47801c17801018c12150301765c01010d090d01018701080b01010b01ee9a010101010702010c0103054001283c0d02a9
5afc6d9f7228a3010c01011c060601010101010101010101010101010101674901010b25eeddede30d01001c01274b340057059ffa0501010100c5010d48de00
7f0124103f01018b4b2f01001f277db50107f2469b07050100450101ad300b014beb320ef2e301040101010103019cc392d1662b1f580b030101020101020101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010101010101010147de
090101010401010101010101010101030303021ab00166660109d7d49e010101cdef0106050636010ae15ef100a5cd01efc95da5648d01090b020107705308a3
2db40135010101ad674b010c010c362425d73fe7ec0db82e020e3f14005c0185000199000cef9f0c01c4d2cc0103003e01010901010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
01010101010101010101010101010101010105010160b40101010c010136eab401070b491053075bbd36050101010405010d010105050c01bef0030701010701
01010c0109000101090101014746f602c7010101090102050101010101010101010101010101010101015a1f010b03bf280101ecb305e4960101010e8e300c9e
5e0102060595fc01010901acd8052613150101751d0106003c01604b01012f26c801022400010c03e42801010138a20a1f0001012f3605050105022716fe2701
02090101010201010105010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101
0101010101010101010101c6590d010303010101010101010101010801060207c0709e6d090101dd66090109373a0401010102036daa0701acc6ad0451ec090c
8a00820101010b014c710101d1b7e0010103cc5c7a1d0101020201bf9e0501013f02a9e99b010108a950013600011c37012ef60d080124f70301001f01060109
09020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010100010101010101010101010101010101010101010101010101010401122109013f01033601ea4701050101147701f0f80101011c36020501013601
9aed749eadcc0103020106090101010b018b080801070109068a106901080e0901010a01010801010101010101010101010101010101972a0101019a70010615
10459917e5270801d53a076655010901019cc6558701878f1e01b868790901ec760801001e067d31b55301010407034bc001011c39f6d9270108010152d30c01
0101013f01010d011cd4e80105020101020201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101
0101010101010101010101010101010101010101010106b89104010205010101010101010101090e222299b5fdbe9f76a5c7e0010206014a972f070109090106
149f01c4b437e5082aea010101f8fe010107040100628a0c01e2f9050147fba91dbd02011c010cbd940b0601060101e7183001015d2c030100010167019498ce
293f010101016e530501010106010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101000101010101010101010101010101010101010101010101010201c7008c0103010803010b5eb501010201857a03f1
a808030c01010401050b0136c5b57fed0068e5fe4e0801010c04020701000101010d01020105a96eb5010103010101010b010101010101010101010101010101
01011123010201e64d010106bf790de06f00a6a113480198ac080105030c3cbf67df9a0f2203f018e4010cad8101016e63017de53b00e23a01020b9934020101
9aa1e3006f3a09018800361c030105010503010c0b99d35b010c0202010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01011838010201010201010101010101010101010101010101010101010101010101070bdba001013603010101010101010103d4fbacdc2c7747bec9d3007a88
010101011236010401010603befc050182007e0124dc010187caa8010a01018264bdb10109d862011c6fa40130d401010601019071010305013d0136a5c35a39
77c10901000c0100072692af93aa7909018200690101580101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010ba9ff002ba4fa1bcc58
0701008c0101019c5cd60c33fbff3f011c01018701010d01020c0c82104aabab5d3d0106010101011c130b01050101010e0127ba16e00101060c01010c010101
01010101010101010101010101011248010c0caaf309050bf731010a044fdd9b0fc427c164dd01010301010a59993a000708ade5b735016e5c059d67480adac0
0c1cae407a01562bbf0d09011b5c014f6dc38f013800bb010a0608010106020301019b4cd8030302010101050702010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010118380102010102010101010101010101010101010101010101010101010101010102a7380102010c0101010101010101010f
ee01010608014f683d1cc83b970e811d00020701010a03018dc90102017ab1015d34070101350001040101b6929bc60109013b63476e3f013e0003010101043f
64830103010105010287238598f50c0140030300012810e0c41bd3621c2200af0201010501060101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
010107011413afc1f9343341030c0025001100137e3f01959ebb125101040104010601010105011e4c0101040501010201010104018b01080102013601010702
5ef60d010103070502060101010101010101010101010101010168230501058ec6b401017d42cec8010101d1170101af6baf3601016586020e01614601018fab
e4f90100006be7170102c50f86074a3b8d06cc00132614362fb7da054d624e0cbbbd40e00303010401010601060b03aef4010102010101050701010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010101010101010101010a1b980136
01070101010101010101015d188a3f01010a05347b0603e4d005b52d137e90a00e0103060400050205a1ef099b129132074b00010901039b6006e94901077a38
dcce030109931f0105010101cede4b06010501f8c706010a2dd902091301041201078f1a0501d3e7052192d2c80e050501010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
0101010101010101010101010101010701001e010b010901010718959500be350c010874cc097800b801090108010501060201d6760101020102070101060501
0200070101070c0101870101daea01030c0102010107010101010101010101010101010101014020010e01b2a68b6f61c9882200bd94bf3bd108010061ff6aab
9bd80043b8e512b40601e276293b7593697fea8c02010123137f665a0101019f5055cd51041f67f1896e0106b376b3168663080105030201010201c500010103
05010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010101
0101010101010501edda010136010101010101010101010ae72d571ec401012f46d6a2001501012300e7edb601090101871803060166d8095300e562d97e7501
0c010224160226db8c0177610102010109bfb1090101010203a7c04b0106019250f0f7afe301012f400135970e0135467b8664200266ec661749b8011c010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0100010101010101010101010101010101010101010101010101030307112a0105010102010100d801a22d8a080106cd3807028c5ab2010136010105010106bd
c8080101010101010101f6db8a00010136010c3822070101a58f010101010101010101010101010101010101010101010101109b010206daad87fc6ea409014a
3190be15010801ab0b29cf628a0751daae6d410401093d040d4524510e01010303010507a9aaaaa90705019eed0108070101c8aaea61018747419d2c461b0101
040163f60101019c3707010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101
01010101010101010101010701010c02010101a00f060701010201010101010101010c01071fd3648305050299609a310403061f00010109010102010652010b
0102010506d286236cdb3201010a023200010df66ec0d558070105010a59590a0105020201094225d49b010e5d9f9e639d01010b004802009905018c5f396602
013c1f09ae12fa0d0107010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010201c2804e0b090704010c0354520305bf2b010101cc2c010101
9925520701010d010104015801010101010101010101877f1700010301050272c03c013d90890101010101010101010101010101010101010101010101016728
0201019d6302013f010104010501360103010127010201e00101020302020b010102060201070b07010101030301010101060601010109426003010101080706
02010101010101010b0101090101992d31010920b905010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838
01020101020101010101010101010101010101010101010101030201010501f789090106010101010101010101010101080105c701050101010403360101061f
100a0101010b0201014a010101010909012a0d01010101030501016964010104c2a0a30101040c0101090901010c01010301013c69280c0101060601020b0d01
125d0168240a07010301070101010101030201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101ee000037105a648d010500b1
2b95e981090501ba84bd149903f52e0735010c01050c0101010c01010101010101010703e5970105010107019e2df5f684b60101010101010101010101010101
01010101010101010101003c090101010106090101360b010401010107010c010601070109270101010301010501010101010101010302010101060c05010105
0c0603658e02010502010101030d090101040501050503030136016162bb78de6601010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101011838010201010201010101010101010101010101010101010101030601010107276c5801010401020101010101010101090108070108
0c020904050101030505018500050d0104010301020101010401010101011c9d010401010601013c930b0807013d0204010301010101010101010801010d0101
020101010101010101010101001e0100230101030601030c0d010c0a01013d03010a010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101013f01
0253201f1e23b64d090100e2f026ce360104045300cc5c671197200101010501030101063d0101010101010101010101a0640d010106060106f2767788010101
01010101010101010101010101010101010101010101672404010b09010801010a0101010402070b0103020104020a0106010106090101060901010307010205
0705010101030101010c0c01010103c2c6010c03051c010703010107030101020b020101010102091c72c19e0403010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010101060701070501d16f06010507010c0101
0101010101010201010402010c010101010504010103010d5a1c060601270105070105070c0108090101010101010d0105010101002f01010709010101010105
0c03030c05010601010c0101020101050c0c06060201040e13300897a90101010107060101010101070c01010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
01010101010101010101010201020601010101010705f74501020609010101013b590c0127013d01013601070107010101010101010101010101010c01ef0101
0107010d01010c010301010101010101010101010101010101010101010101010101134b0101010902010101030106090105010701080103010101010a010601
0401030201010101020303020101010105060306050101050603011c010601010c010b01010107080c0204010101040409070109010301010a01010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101010102010901010d
010177300401070101030101010101010101050d05050101010d03020801050108050101010b0101360101050101050301010201013609013601010104010436
6ed80801010107013d0505030101010103050101020101010c0502020101010103030101f68701311c0108010103020101080701030101098701010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
010101010101010101010101010101010101010101010136010702010501010301020c010704010106070507220b0301020b01010501010301040106050c0101
01010101010103060101010e0101010104060c013d01010101010101010101010101010101010101010101010101688c010901010c0107040301060701050501
080101060107023603010801010703010105060101010101010102050201010207020207020105010b010501010d01030c050101010101060105010101050801
01040106060101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101
01010101010103010c01010c012f680b010701010b01010101010101010101010101270901010101040109010501060101270107010a0107010c010101070106
02010204010107070c010101320102010306020101010501010101010105010101060a0b0101010105050707030101090107060105020101060b010101020901
01070801010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101000101010101010101010101010101010101010101010101010c01010101070c01040c010c01010901010d01010102010101350101010d
010101060101010b0101010101010101010101040b0b070c01013d010104030e01010101010101010101010101010101010101010101010101019724010d0101
050601050601010203010901010101030102010101010e010301020101050602010102020203050301010c0101030301010c010105020109010101010101020b
0c01010901020303040105013601010b010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101
02010101010101010101010101010101010105010701020101a95c01010501010b0101010101010101010506050101030102080101010601010501010c010905
0701070301060103010301042701010c010b0501010c0b07010b010602020101010d010103070703010101010101010101080201010101010105013f01070d01
0b0109090101010a0201010903010105050e01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101060108060101010101020101270105010301
020c020101090501020307010405030103010501010d01010101010101010c0103020101050601270301010c0109010101010101010101010101010101010101
010101010101374b0101010b01010a01010c01010601010501080101010107010402010102010103020101010303010101010101010201010103030101010106
01040101020c0501010c0501010c0706010203010501010101010901040101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101183801020101020101010101010101010101010101010101030103010c0108b176010b0105010107010101010101010101010802010305010101
01020301010101040101030105020101010101030501090101010c010b010101020101020301020502010e030101010503010103050101050101060901010201
01050301010107010c01010901020103010901010109060101060101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
0101010104010108020101010101010101010102010601080601020101020101010801010101010101010705010c010c01010901010103050101010101010101
0101010101010101010101010101010101011263010106010309060101010201010601010d0101050801010c01030107020c01030101070201010104010b0101
040101040b050101020101010801010105070101010101030201010101010101010107010b010102040101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010f6d010101030105010101010101010101010101010101010c0101010701035f4e07010101080102010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
010101010101010101010101010107010901010c01030101010101010101010501090101010e0303050605010101010101010101010101010b01010a01060101
05010102070701010101010101010101010101010101010101010101010197f53131da66eef6ef8126261b14f6eeab2642726631f11b26b872381b78f67fab42
4231ab1b1babf11bef6526311df181657072384231ee6df11bab26945772ab7231b8b83172f681818181818181817ff1f67238da144281818181818181818181
81818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181
81818181818181818181818181818181818181818181818181818181818197760601010101010101010101010101010101010101010103010201030102ac2401
0101010c010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
010101010101010101010101010101010101010101010101010103010101010201070101010101010101010601010303010c0101010102030101010101010101
01012701080d0101010201050c010101010101010101010101010101010101010101010101010101010100250000378b00371337679740000011000037970064
0000976713003700000000643700001300006737006700126800000000009713110064004000005a001100406700006700003737373737373737000068370010
37403737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737
373737373737373737373737373737373737373737373737373737373737373737373737373737373737007e0402010101010101010101010101010101010101
010101030301010103b0c50106050107010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101010101010101010101010107010106010101010101010102090101010902010101
01010102050201010101010101010203010b01010305060301010303010101010101010101010101010101010101010101010101010154b60101020701010705
0301010101030301010501011c0106050105010101070701010701010103020301020c0101090101010101040901050101010d01080101010102010101010101
01010101010101010101010302010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010112890201010301050101
0101010101010101010101010101010602010101046404010c050107010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010201050c010103010101010101
010101010b0901020a0102070602010102010101010101010101011c0101070b01020c0101030701020901010101010101010101010101010101010101010101
0101139b0101010ff20202010504060101040101010407020201010101030907030105090601010606010104010107050a010105090705070101090104010204
01070c0b090101030602010101010101010107010a04010201050101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010fbe0101020301030101010101010101010101010101010101060101050335c3020107010107020101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
010701010c0101010101010101010201010101010c010101010707010101010101010101010108010a0306030101010101030101010701010101010101010101
01010101010101010101010101010020020e01fb8a090101010705010101010601010902010e0101060101010102010101010803010c01010a0301010c010c01
0101010101080109010901030101010101010309070101010101010101010901010c010c01030101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101467801010302010101010101010101010101010101010101010501010503cade020201010205020101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
01010101010101010101010101070101c7010101010101010101079c9c01020103070d010101060101030101010101010101010401060101070701020201050b
090101010101010101010101010101010101010101010101010118240101087778030606010101360e0101010d0101c7010c0507040104090901010803010801
0106010107070123e00101070c020105020101010e010102040c0a01010105010101010101010101010101c40101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101b79f01010201010101010101010101010101010101010101010101010301a99a010501010501
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
010101010101010101010101010101010101010101010501050801044f0c01010101010101010289761c01010bd7ca1c010106010102010101010101010101ea
03010308010501030101e0289c05010101010101010101010101010101010101010101010101401e0201018f4201010c0101c27f9ff63602835d088823020101
034d31aea54505832a02043e27010c0801020168b8012f2eea944a0101070601ed36010c0df0d56d3e0101088cbe0101010101010101f260b824e0010d010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101461d010101020103010101010101010101010101010101010101
020101017f7101050102060101030101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010001010101010101010101010101010101010101010101010101010101010101010101020301da13df83474870b601b8790ce0547f0101076d770d01010e01
0a0101010801060101059c0001010507060101010cb65a0054f2010101090501010201010101010101010101010101010101104b01030de911c390010901ac55
946f2590aacc019eae0101090839439ee41866ed6d051f0001030133d7010c6e6101aed4ef740f700501019d6401070156771d19c3da05011e5e0501010d010e
02010d65710054681138010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101
01010101010101010101030107030102b87b01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101012f0101015bb2b8e600ebec6d01ad660102
49fb990a015be3010127010201050101010101060102142c0287010101060601018f1401f6d30b01010101010303010101010101010101010101010101016749
01010b25eeddede30d01001c01274b340057059ffa0501010100c5010d48de007f0124103f01018b4b2f01001f277db50107f2469b07050100450101ad300b01
4beb320ef2e301040101010103010105072c5d413c3e010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838
01020101020101010101010101010101010101010101010101050103897e01010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010a0101040177
79011c010d010101e457010c04b64632015b5e01020c03010101010d030103070c0226bb010101010b010d0101003c05c7d45208010201030102010101010101
010101010101010101015a1f010b03bf280101ecb305e4960101010e8e300c9e5e0102060595fc01010901acd8052613150101751d0106003c01604b01012f26
c801022400010c03e42801010138a20a1f0001012f3605050105010601ac2001010e010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101183801020101020101010101010101010101010101010101010501070102e7b801010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
01010101010101010405011032070101070c0127c1590c03012726cd0c1dbb0c050101010c0102010135fe33e5bee61b0202030102010103087bf901062b5b0d
010c070c010301010101010101010101010101010101972a0101019a7001061510459917e5270801d53a076655010901019cc6558701878f1e01b868790901ec
760801001e067d31b55301010407034bc001011c39f6d9270108010152d30c010101013f0101010101603a050101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010401050101ec8d01010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
0101010101010101010101010101010101010101010804115201070101010b01714901010d012360012e843501010e06010e06080801ca1e89f40037aaf5ba01
0b0302011cd7464706ffce01010501040105010101010101010101010101010101011123010201e64d010106bf790de06f00a6a113480198ac080105030c3cbf
67df9a0f2203f018e4010cad8101016e63017de53b00e23a01020b99340201019aa1e3006f3a09018800361c0301050105030801017423010202010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010b01020101
e63a0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
010101010101010101010101010101010101010101010101010101010101080201239300aeb189cc56f201050024010d019c8e7b012c80afe03d010101010103
0103010101470045b478230a0105070301017010ef800d010403010c0701010101010101010101010101010101011248010c0caaf309050bf731010a044fdd9b
0fc427c164dd01010301010a59993a000708ade5b735016e5c059d67480adac00c1cae407a01562bbf0d09011b5c014f6dc38f013800bb010a06080101060102
05c1210c010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101
01010101010101090101010950290101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101010101010101010101033d01ab6416a133aadca301026711370012007ce0
0bed76f96241080106010d010108010e0123ac0c01020901010501e0010bc280b03201010807010107010101010101010101010101010101010168230501058e
c6b401017d42cec8010101d1170101af6baf3601016586020e01614601018fabe4f90100006be7170102c50f86074a3b8d06cc00132614362fb7da054d624e0c
bbbd40e0030301040101010401e48a07020c01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101
02010101010101010101010101010101010101020301012f3b080101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010107010107010020020d01
0206010100b3de252e0d030101ea6d011d007005020c05010c03010107f5760405010801080109012fa10033c301090101020701020501010101010101010101
0101010101014020010e01b2a68b6f61c9882200bd94bf3bd108010061ff6aab9bd80043b8e512b40601e276293b7593697fea8c02010123137f665a0101019f
5055cd51041f67f1896e0106b376b3168663080105030601018f2301010601010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010118380102010102010101010101010101010101010101010103010701034a0f010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
01010101040105002002030d010c0109001f01ce64a0050602959001024754b2010203010c010801042c6187010107010101010642922f014c880c0101360101
020101010101010101010101010101010101109b010206daad87fc6ea409014a3190be15010801ab0b29cf628a0751daae6d410401093d040d4524510e010103
03010507a9aaaaa90705019eed0108070101c8aaea61018747419d2c461b010104012846d19a5d01030201010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010118380102010102010101010101010101010101010101010101030106012aac010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
010101010101010101010101010107010101c2dbf3030102010b0c01973a0d01ecf00101014296013d06ca17ce0c0c0106010301012736010102010103070701
6184850a864c0e010902050301080101010101010101010101010101010167280201019d6302013f010104010501360103010127010201e00101020302020b01
0102060201070b0701010103030101010106060101010942600301010108070602010101010101010b010109010101b4db185d08010701010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010d0c0107266a0c0101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
01010101010101010101010101010101010101010101010101010704010e79970000006e008d010900f8b195d331010e0114c396148201f85b01010108070136
060101010c070101060103010173544e5374753d01010108050501010101010101010101010101010101003c090101010106090101360b010401010107010c01
0601070109270101010301010501010101010101010302010101060c050101050c0603658e02010502010101030d090101040501050503030136070190971f07
01020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101
010104010c02015e7f01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010100010101010101010101010101010101010101010101010101010101010101010101070201094a48154b9b8c4a0401134481f088040107019c112e
4c6e000fd80103010c0901010a0403050602010706010e0106054b5e00015f01010d0103010201010101010101010101010101010101672404010b0901080101
0a0101010402070b0103020104020a01060101060901010609010103070102050705010101030101010c0c01010103c2c6010c03051c01070301010703010102
0b0201010101020701ff9b0105070101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101
0101010101010101010101010101010401010710580c010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010407010101010c0601080101010d
963e040101070b030a01b78c010b0101060c06090101030101010c0101010101070101050d010102012701010105060d01020101010101010101010101010101
0101134b0101010902010101030106090105010701080103010101010a0106010401030201010101020303020101010105060306050101050603011c01060101
0c010b01010107080c020401010104040907010401c83e0105010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010118380102010102010101010101010101010101010101010105010a014f500a01010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010201
0105060801013601c787010101010127050c01010101852705870101350101080101080806050101010c0101010708010b0102080101013f0101010901010101
0101010101010101010101010101688c010901010c01070403010607010505010801010601070236030108010107030101050601010101010101020502010102
07020207020105010b010501010d01030c050101010101060105010101050a010101010409010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101011838010201010201010101010101010101010101010101010301010e42430501010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
0101010101010101010105020701010101050102010101020e012701013601090401090107011c01010301070c01010101030501070901010101010c010a0707
03010501012701010407010101010101010101010101010101019724010d0101050601050601010203010901010101030102010101010e010301020101050602
010102020203050301010c0101030301010c010105020109010101010101020b0c01010901020303040101010b0a0101060c0101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101010101060a0d3b3c0107010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
01010101010101010101010101010101010101010101010205010703060102020201090101060106040101040101010c0701010603010901030c010301030601
0101010506010301010101010607010301010401060101010101010101010101010101010101374b0101010b01010a01010c0101060101050108010101010701
040201010201010302010101030301010101010101020101010303010101010601040101020c0501010c0501010c0706010203010501010102010a0101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010202
01392b01030101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010001010101010101010101010101010101010101010101010101010101010101010106050107010a01010101010101010105010c0104010101010101010101
0101010101010101010101070401030701090102070101010302010101010101010101010101010101010101010101010101673a010601050902020101050906
0201010c01070c0101010101010503010106090101030101070302020d0101010b01010707010101070701050101010406010105070101020602030101010305
02010206050101050602010603010701010409010103090101030101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101018b78010101030103010101010101
01010701010603010c01013233340201350101010101010101010101010101010101030105070101020101020706020101010d0101030106010c010101010101
010101060102080101270106050101010106030101030101010c0701040109010101010e01050305010706010107030107010207010103050101010101010205
02010301030301020501010101010101010103010102020101010201010203010102030c0101010104010701010a010104010101010906010107010e010c0101
0601010101010101010101011c010104010c0109010901010206010109010109010101010101010101020d01020c010d01060101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010605010901040101010101010101010101
01010501090301010101010101010101010101010101060101010103020503070702010202010101010101010101010101010101010101010101010101015ab2
b8268131d9ef266dbe31d16531421b721b7f1b6db8266d1bf6ab262631ab31386defb831721babf1b857cc6d1b312631ab14ef423165f1f61d42817065ab1b65
7f42beab657231eeef4257f1b8264272f1816d81f6721bb8b8ab5726eff6eebecc14d17f3126b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8
b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b81376
0601020201020101010101010101010501280e292a2b2c2d2e08012f0101010101010101010101010101010101010b0101030c0101060902010101090c010102
07050701020101010101010101010c01010201080401010101010907010501010101010c05010109010101090c02010101060701010101060c01010101080103
090101050701010305020101020201050201010c090101010101010101010201010203010105020101030201010301020103030205010101050101060303020b
04010105060101010301010601010101010101010101070101050107010101010101010403010501010101040202010107050101010501050b01010104030101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010c01
020101010101010101010103020c09010d01010101010101010101010101010101010105040901020a0105010102020101010101010101010101010101010101
01010101010101010101115a004067001300136740110000006e4064001013670067689737670000003768003764000013376713005400005a00406767110000
00001111005400000097000000121000000037006768000068003713400000676700005497000040001111976867000000009797979797979797979797979797
97979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797979797
97979797979797979797007e0403030201030101010101010101010415161718191a1b1c01010101020901010101010101010101010101010101010101020c07
01010107360401010101020705010901090301010101010101010236060101060106070101010c0101010606050101010507020301072701030107010d020107
0801060101010c1c0101040101050301010101010201010101030701010106010109010101010101010102010102020101030202030501010103010103010502
010103060601063d01010201010c04010102010b02060101090101010101010101010102013f010107030901060c070201090306010701020102050303070c0c
0301090301010d010801010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
01010101010101010101030101020101010101010101010105070101020101010101010101010101010101010101010201010101080102010102020101030101
0101010101010101010101010101010101010101010100a558c545d73ea0d7823e4da3454d533ea35929d7c4514d3e9c413ec54a534d3ea0454529c23e29c2a0
3e533e45c5d7d729a0a0453558a04158583ec28735d7c54d298253e0c7585329c545c229c54a3ed7824aa3454a4d51c5c5c2a0a3c53e455382d7a045a34d3e3e
3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e64940501020301030101010101010101060101050101060c010b0e010a09030101010101010101010101
010101010101010d040101010109030201010207090407010301010c010501010101010101010101010701070101010501010101010c01010108040101060101
04010107060101010101010a01010201050601010801080101050205040c01010101010101050101010102010105010101010101010103020101010101010101
010101010101070102010303010901010101010101030205020101050c0c0603010101070201010101010101010101010501010c01010101010b010101070104
01270101010302010101010101010101050101010105010101010101010101010101010101010101010101010101010101000101010101010101010101010101
010101010101010101010101010101010101050203030101010c010101010101010107010c0101040109010101010101010101010101010101010b0401010801
010c02010305020101050101010101010101010101010101010101010101010101015ace4d4145c5c55329c4c43e513ea08229c487c5853541c5534a45e0c453
2929c258c24fc4c7a0a04da3354fa0454fe045c4453e823ec5a35353c541d785a0a0454d4aa029d7d7c2c2e0d785e0c5854da045584dc29cd7293585a03f45d7
d78a45c2c2c54d51d7c54d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d
4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d8b7801010303010201010101010101010605070107010801010104010101
0d0201010101010101010101010101010101010101050601010107010103020101010102030d050101030101010101010101010b7fb30a010601010607010206
0503360701010201010306001c0704010101020101050e0c010c060d010301010b0101040a0101010201070101050c070203010b0a0101090901010101010101
0101010101010101010101010101010301010101010105050109010c010c01010a09010105070301010101010d08011c013d0101010101010101010d01010506
0109010d010101060e010207010401050103010306030101020c01070c0101070b01010101010101010101010101010101010101010101010101010101000101
0101010101010101010101010101010101010101010101010101010101010302030101070101010101010101010101010102050b010101010101010101010101
0101010101010105360105060102010202010101010101010101010101010101010101010101010101010101010112f64ac54115453ea04d4a8282534d3e5341
a3a03e354d4f3ec5c5824f41294dc2e04d9cc282d745a082534135459c53c5c2513ec54ac241c551c2583582d7c5854a5845a0534d4d3e51a358859c45a0a04a
824f82e0e029a0d729d78a4d87c58aa0c53ea0a3c5d7a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0
a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0c31d01010505010101010101010101010101
010b0301080c0205040106030601010101010101010101010101010101010b050101010a27010c01020908050105030501060701870101010101010101010d0c
88c10101090101060101070c010101020c010101070201d48601010b0303010b020106010807010b01013f01010701010103270d030c06010102050101010101
01030101020101010101010101010101010101020301010101010103020101020106010105010108010104040701030703010105090c0109010d010101010101
010101010101010d01090301010203020c030401030306010101010401010701010107040602060201030e010501010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101012f01010101010101010101c5f201010101
0106010101010101010101010101010101010e010501010a030301030101010b0901010101010101010101010101010101010101010101010101978d5841a02f
1c414ad782a335c553453f2929584ad80d2982a029824d35c2483559293f4ac2453e4d53c52f4130c7c553294ae04582538758584f2f41c5ca514d53c2c2c5c4
8247a353c23ec5a34d2958293e35e0c2d7c5d787583ea33e8558e0c553533ec23ec5535353535353535353535353535353535353535353535353535353535353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353ebcc01010303
0101010101010101010104010106010101010301010106010209010101010101010101010101010101010101058701010101010103010101010101019d010101
27010101010101010101530161540b01010707030101020101360b02010c0b07010107f5bd030a0101010106013501010b012f010c010106010d010e01010101
0103020101010101010a3d01010301050a01010101010101010101050501010303010106090301010101010c01080101c50101030c010c030147010101010207
01010c0101010901040301010101010101010601ca01010c060101010102018701010301c50101060101010203030201010105010109019c0108010101010101
010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010103050c410a010101
010101010101941a0a030901153a010101010101010101010101010101015e08010901090102030601010bc5e005010101010101010101010101010101010101
01010101010113883ee0a0895b87d7a3c5a9f9a6764a3e53d74db698a08245c5a04dc785bed529bef1d73ec5a0ceca3e53a02eaa854a8245c48c66fc1d1ff24e
f6c25f006ea94d9898c4c4e400b0ce8ae8fec7d75670c4854dc78de5ed2e534d594529b2e3444d8a58e09e80e447a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0
a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0
a0a0a0a0a0a0b7cc01010102010301010101010101010101010702010801010307030101010101010101010101010101010101010101040179d2fd29010b0281
d5fe1f01010405019851070101030101010101010101549c24000101060101010107010187613b8107010301010801eeaf0301020c03030101f751030102dc04
01010cc83c01f6ea9615020907070201050601010ea0289b4b2f0461ce010101010101010101090b040301020101010b270c010101050109010b010b614505c7
470607010b2d2a01475c162001870101f8820103c7bd01010101010101010202844f0106855d0704010101e729010104f31c08030109033e2415040103a34708
01010854f20601010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
01010c010906a26775524830885d0166b801d717a50101081b5c010805010609010601060c010c01025937030101040101010701070135119e06010602010101
0b010101010101010101010101010101010100f3824a53f078594a4a51e6a12bc0c6dd8a4ac5838e4a299c4d4e8e4632aaf03e6a2e9c3e45d739a49cc5a0ae7a
c54dd71c51506fcb8e8bf039d6c4b78672c39f778d9c4a18ba72545bead93e5156bb4d352929de957c16ffcec4c2a3a4a2d3ec874529a51df4bcf2a3c782a0a3
82455353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
535353535353535353535353535353535353256d0102010101010101010101010101010105010501010201010101010101010101010101010101020201050101
09010101308da7de9d0361b781a78bf002020103dcf2010c0102010b013f6d6e89510001ef9364acd7010801010401010109b60ffa0c36010402064b973e0702
0c010601099a20050b47379d0c01015e9eb6931bf88bb1090107030109013694c340008b00253ef04401010701089c0f0c019017eafa88200102016d545ef8a2
8a070601040d0101cd30032800010c010368210185abef0f99020101ed8c080401000108010507c79fb078ca930401f6005ac98a010106e49b020701dc240601
0121a1100054c13d018c11010501026e8c0101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
0101010101010101010101010101010e010156fc666c0017d538066fab0d014993200a0178bc010101010101040207010101040c01d17d01070301010b040101
270c016754470201010c0c010101010101010101010101010101010101016ece9c58297bcd1c9c4ac500a33e827897f2584fce3bc25829a26e7ea6bbd3b4a37e
ec87a03ed7c11a4d454ad0a7f2c54a413e25211ca357a800382a004a85b5df11b141b513354a9be3009841587e91a020c2293735c52956b08a513ec43e32349a
2935f2a03ebda8224a3ec78a4d455353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
535353535353535353535353535353535353535353535353535353535353256d0102010101010101010101010101030101010601010e01010101010101010101
010101010101010503010101010101030303021ab00166660109d7d49e010101cdef0106050636010ae15ef100a5cd01efc95da5648d01090b020107705308a3
2db40135010101ad674b010c010c0c0101a67001013a0083010d0d394b789401085116f1030101020101dfbc8d3f011c01ce1c305a010d013d015bec07076257
8890332568a502fbefb466e43b00ce5801010406cf1501b66e01050107004a27040102d940820905398d01010b68410101010abc6f6d00c8aa0e1e124f36a4ea
03010760790101025c1e0609b6b788c70187faad0528000109010b00290201010101010101010101010101010101010101010101010101010100010101010101
010101010101010101010101010101010101010101010101010101010c045e8604010501010601757901360169c35101beec030201010b010e01010201360102
01bef501010901030201010601012710eeca05040101010c060201010101010101010101010101010101134e29a04d7e7d4a45858740298536d7712a2915567a
878535006315abe100869caea1471cc282a6e84a823533f558293e35a0d5ed5382581c3b864a00c79d4f4a00e917c50053534ac468bcb05344c1c43d2958009c
a34a3e96bac5824aa0a04b001e3558352982def69cc24ae045825353535353535353535353535353535353535353535353535353535353535353535353535353
535353535353535353535353535353535353535353535353535353535353535353535353535353535353256d010201010101010101010101010101040801010c
0101020202020202020202020202020202020b01010206010587010801060207c0709e6d090101dd66090109373a0401010102036daa0701acc6ad0451ec090c
8a00820101010b014c710101d1b7e0010103cc5c7a1d01010202012f01006301012293db08010239f266be0902019bd009010b0b019b17c2010e020601090108
101f01070101347601c25a0907030207dd015800010102072748070101010101976904590001010515250101010d0102bbf701016ed80a010100ca3f01016d5f
010477e97d0155ae02010336030501404b0102016ef205011269012701013fb74af3970b01014f67010901010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101010101010101010a010101003c01060706060101e24b0102011c265e022efc0701
010e010c010d0a0109f99abd7316f101020a01010309095c90583e00010101010609090101080101010101010101010101010101010100c84d51c57cf94153d7
3e1326a91529c4c23ec5a4f44f3f5112a3c5876468a5a0cb1951c7c24ac1748a9d1584a982c55353f2b550ec9c4a298f7f4112b4c4539c103f1b53a8d19d8224
8bd7f6535bf8479d4fa06414a9c24fc4e04132f3c84ec8e3709c31c849ceb956a02f294529a05353535353535353535353535353535353535353535353535353
535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353256d0102010101010101
010101010101050101010101080e0101010101010101010101010101010101020e010c010101090e222299b5fdbe9f76a5c7e0010206014a972f070109090106
149f01c4b437e5082aea010101f8fe010107040100628a0c01e2f9050147fba91dbd02011c010e010e6758010423a684480601607378a48d4a1c010101070501
019f16010c010101870106019a7b0401363054c701214c0301020801010122c6010a2701010605010b0c010d93c4058c972801016ded0b01638c3c9b78390158
133e0b0103005901011c9eef0b01b800ec072c1d010601010109066753060c01005301c83b090901010208ad909c00f201011be4070101010101010101010101
0101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010507c5ebdd0601010a01010dad
1e010d010123ea03bec90406080103050701010501412a7cf81200eae8a9040202020b00bfc35fa10b040b070701010e01010101010101010101010101010101
0101648853a0a0745ca01ca0590043105055238235c556fac2824d6469d7c4e5408a35e4d22715853e3900994a4b0085c22953a09d9c2a8e00e3de465287e678
c245ee404a8ae08e42a0357911a04a8255ffe045c78a40bf9325f43a3c1f3750ad5ec19a3e84d395dfa15e4b41533541a34a5353535353535353535353535353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
5353256d01020101010101010101010101010109010e01070c0103030303030303030303030303030303050104010901010a03d4fbacdc2c7747bec9d3007a88
010101011236010401010603befc050182007e0124dc010187caa8010a01018264bdb10109d862011c6fa40130d401010601010601000301014fbfb21a010eaa
1dcc5c3913b9a203090101031c42e5030c04010101010c01e80018d6282cf50101dd5e020906010e050121e40a010104360509010101019b000b016393960105
761a06bb178fcd7ded86010100010102c26e480d0101ab7101095854f705efaa0103080158010111010701511109017e6b01060101010343e86300fc0104cb5b
27010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010e03
52c300985b1d2ea5f20101003c0601094f347c0ce4fbb9360907090101010b06360701012900c5cecca9070101059b0005598e006b4801010502010201090101
010101010101010101010101010168833ec2c5ea37ee8a3e2fedf4c5c81954a44bfae6b187294d3b7f0ec26d5a823ed5373887e0c77546f482ce92322fa045c5
4fd787c4b66369403c3c6118b629b6108a048ada2d4ec2b500279945aa3731453ed7bf44d75dd0002e9b00b44fd7c2c2853bf553e0d785c79c51454ac4a05353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
5353535353535353535353535353256d01020101010101010101010101010101019c5845c2c54d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4dd70107020101010f
ee01010608014f683d1cc83b970e811d00020701010a03018dc90102017ab1015d34070101350001040101b6929bc60109013b63476e3f013e00030101010726
311005010ddd5e23b00101d3d82800351c1be3ebc401020101cca6070101010d01270901d797da7d00376a533d327d010201010202018c8f3601010705010101
0901019b100106d818c61501958301b2ad0401050906261b00010201b500cf06090486e101080dcf9f010e685201010d016d7f00060101b437010785259d0901
013601af218c3b933e018eb401040101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
010101010101010101010101018825927a5e6f5c353d0500005a120093cbc701bfb1fc12a00101051c0101010201030163de0104010102080b01990001015556
f180bc5901050e05010a0101010101010101010101010101010100a9a04135de7a343629c2578463a0700083cacd6ee696ab457be8598248109cc2778fd2519c
c5c18993b4b3e8c4852fc29c08f6aea3c5291bfba0e0a09068d9860082f2e09df53bee6900590bd7dbaa92d74a2fa52d30516d124785bbea32c435a32983971e
a0c59d47353f5129c245535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
5353535353535353535353535353535353535353535353535353256d0102010101010101010101010101010132e3c3dfc08bc6c6c6c6c6c6c6c6c6c6c6c6c6c6
c6c6c62d740d013d0a01015d188a3f01010a05347b0603e4d005b52d137e90a00e0103060400050205a1ef099b129132074b00010901039b6006e94901077a38
dcce030109931f01050101246867f06d3524ad01bc6d2f936101e4a70601d2f50102010b03867d013f010501030101080e001501f06ccf78012274013d068701
010a48cd010109010208010101013624000501b5d5b3bd8a100b034f80a908010105ce2db7f89f2983ad505d020127370a010771902f01492d41040101305400
b1a4453a0001050b74cf362bfa052b3b2928a65555511236010b0101010101010101010101010101010101010101010101010101010001010101010101010101
0101010101010101010101010101010101010101010103010506009b0103010b010102136b1600efc7030109dcef016d376d020101020703010805016a560101
01030a01010cb564010b5e940107480105030109030101010101010101010101010101010101138da03ec400d92d6b66a99df040ceeae535d75395de337d4dcb
f051355255a35300eed2f9898deaba1ac35486a34a82458251d937cd7ced68d1514d9c4a42460037c4c55345858118680045c24a9765c6e26669c2736ed16fd5
c5531fd43b7f7053a0c2fd62764e223fd7d74d82353e535353535353535353535353535353535353535353535353535353535353535353535353535353535353
5353535353535353535353535353535353535353535353535353535353535353535353535353256d010201010101010101010101010101060187010536010101
0101010101010101010101010101020187010e01010d010ae72d571ec401012f46d6a2001501012300e7edb601090101871803060166d8095300e562d97e7501
0c010224160226db8c0177610102010109bfb109010107012a93a7c149487427be377d5a8704582db2a93728030107010a41545101050101050c020601197c9d
c38601010c4bad010101010109019b74090105010101010b010102039307012aed2febe1190c0501ab402e238501011e00bb8f83ab397212ce26013702010176
d8010107fa6c4b01020947007b7469010003010c0a5fb7b16237a88a019be4c4b7de5e0109010101010101010101010101010101010101010101010101010101
0100010101010101010101010101010101010101010101010101010101010101010101030201978c01010601040105008c07a28b9c010702aaae011c9925fe09
030102020201050bfcda01010101010101011f670401aa76010501010101010101010101010101010101010101010101010140b64d4f45b82923dec349d74de7
7ad5d8a3d7c5dc7ca0539c2a3041e053c2c4a09f9d69d317f3941f4f579e99c741c445534d3e5d6d7ca41e9c584a294d3e59ba0029a3534d9c58596500c25841
9e4d835c2569a3299839ea693d3e85d76ddbc6699d513eba77008632454ac24d453e535353535353535353535353535353535353535353535353535353535353
5353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353256d010201010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010c01071fd3648305050299609a310403061f00010109010102010652010b
0102010506d286236cdb3201010a023200010df66ec0d558070105010a59590a010508013a40010d013ae1010c306da50801012a609a9e05010506010c0191d4
2f0101020c01050601a96c86ff2f010605247d01010908010103d8950102010c0701013601010605b30501a072073dae99010602014f19b77b01011f00010701
414b017e12bb36830104010c010309010d4284cf6101240001070601bf01030b0201612d6c2a01010ba05705e0be240101090101010101010101010101010101
010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010e0101513b830a0101010603010028010ce5
5b03010590f701070a4184630101010203010101e00101010101010101018c6e010381e8010101010101010101010101010101010101010101010101010111ba
4aa05824353ea08c093ec54d4dc2f2d73ea3ad98a353c4d785a0a353293e5859e0d74d41273e822f3e15c4c73ea03e8253e0459c41534fc5e05329c5a3534f00
c45329354d29c5ca844a59274fa358514135154ac53ea04558c4a3c44d295dc42fa0c44541418ac5355382534d29535353535353535353535353535353535353
5353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353256d
010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101080105c701050101010403360101061f
100a0101010b0201014a010101010909012a0d01010101030501016964010104c2a0a30101040c0101090901010c010a48000c0101b5130301060a01010c0601
01010b01010101010c01c277508c0201070b0d060102eb11c8011c010c288001010101040701ddff0a0101080106040101020106010101030401053d0c010102
0501023d0d010124670b0108050701060701010b0101010c0101360c010e15574d361f6407050101020e0101080101870c01010201010401013f010301010101
0101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010bb80018
25640064b43501686f769ad41401010657db8f655108feb101020101010c06080101010101010101010101004505943901080101010101010101010101010101
0101010101010101010168d14aa33ee05335e041a05159e0c4c236294d3e746a352953a3a3a03e4d4a294fa0a3584a3ec2533e539d359c9c5382584a29a04a4d
45584d454d2982a04dc5e000d74ac253c54d4d5100ca85584d3e4ac22fa03e3e9d4f4d9c8ad78241825835d7c24d51514d4a45454a29c2534aa0535353535353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
53535353535353535353256d01020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101090108070108
0c020904050101030505018500050d0104010301020101010401010101011c9d010401010601013c930b0807013d020401030101010101010101010585000101
0d290006010101010c010805010101010708030c0109010acbdbbbf04a0101010701bb174501082701b654010304010301053c130105070101090c010602010c
6541020b0107020109020c020209040201020e8a110101010101010701071c010a010106010107040101010601069c670201010c79410c010c01010101080605
09030109010101080506010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
01010101010101020104852230dddd2153010200fa38bed10d3609014100b8d41300e98c0105090701010136013d010101010101010101220127c5523f010101
0101010101010101010101010101010101010101010193da4ac585e04fa0c582823d4ac2a04d41413f5398fa41539c4ac5c2824ac5a03d51a09d99538782a341
c24a41c2e0c54d4da0293e4a3e514a3e29535329c23e3e648d3e58c229c4e04d67831c4d9c9de0f2a03ec79cc4a0a035c74d53c4c551a3c2a39d4dc4584f3e82
82a04d4aa0a053535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
53535353535353535353535353535353535353535353256d01020101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010201010402010c010101010504010103010d5a1c060601270105070105070c0108090101010101010d0105010101002f01010709010101010105
0c03030c050107010197c43f010d379c080703030a01010101060102010107020101010145c8e4bf28010b010101f30f01060101010d373e0101030801012f67
3e019d0801010103060202075a1e010709010107070501010101010302010102934a0808013501010d0105010601010105060101050a013f010701645104010e
6e8a360101090501060201010601030d03010c010109010101010101010101010101010101010101010101010101010101000101010101010101010101010101
010101010101010101010101010101010101013601010101010101012701056a53020601030101020a84ca0105010e0106010101010501010101010101010101
01010b0301010d01010c01010101010101010101010101010101010101010101010168884a4a3ea04a532958c5c29c51c7a02fc25145c5d73d4f4d4d4d4a53a0
a0a0a0d78541c4c453d745a0c24d35a33e3e824a45c5c5c445a04d293ec5a34aa053c25f819c87c43e3ec245604241d7d7a029a0e02941f253c54da029293e3e
4ac5413e299c3ea3454ac5534aa3a3a0c23e53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
53535353535353535353535353535353535353535353535353535353535353535353256d01020101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101050d05050101010d03020801050108050101010b0101360101050101050301010201013609013601010104010436
6ed80801010107013d050503010101010305010c040101010e01564d06010101010702090105010b0506010127360201010207010101010c0d0101671f010103
0e0903010402010107060c0101360101010e0102010701021d4501010501010c0105010d0e0101010704030901010101c4010b010901050c010e0901010b0601
01011c0101013601010101019ee00501010105010102060202080101090101010201010101010101010101010101010101010101010101010101010101000101
010101010101010101010101010101010101010101010101010101010101010901050b070102010a010205022701010109013d0501ca04350103030101050101
020801013f010101010101010101010636010501010101010101010101010101010101010101010101010101010137b44d4a459c9da05153459cc453585915a0
29c235414a45453e294dc53e294a51583f3e9d85854a51c53ec2a3298a53a0c5c5a0c2c2c2c245533ea04a4a4da3291e9ba029a04a4dc458212853a3274ac553
2945c72f4a85d7c253a3c4c553a053354d4ae0298a4ac54a4a4a533e53c553535353535353535353535353535353535353535353535353535353535353535353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353256d01020101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101270901010101040109010501060101270107010a0107010c010101070106
02010204010107070c01010132010201030602010101050101010101010505010103090b010701010106020b01060104060d01010101013f0101070401070c01
0803010201062701012f01020101010e01010202090106011c01010d01010b010305010101010603010506010301010101030b0401010101013f060107010105
040e0201010107010101010203010101070401013d030301010b01010701010c0c02050101060201040501010d01010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101010101010101010101010105020901070501080306010105010701011c01
08010d011c050106040101070102010105010101010101010101060101050101010e01010101010101010101010101010101010101010101010110b4c5535329
a3c235293ed758a0a0c458e0294f453ec5c52982c2534a3e534545513e824a5358293ea3c53e3ea0c59da03ea05353534535534a532929a04d4da0e058589c41
53c4c24fc55845823ed7a3c241514d29a03553a34d5151534d29c54ac2822982a0c72929c282294a4d4a53535353535353535353535353535353535353535353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353256d01020101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010506050101030102080101010601010501010c010905
0701070301060103010301042701010c010b0501010c0b07010b010602020101010d01010307070301010301090301060301010c01010206010305010101020d
0c070101010e0c010105010405010705013d060309010101010501010104090101010105010506010e0106010c01030104020108010101010c010b0501010101
0105040105010201090b030901010106270101060501010106093601020101080101010301030701010301070101070e06010901010106010102010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101030504010802010101
040106030c0109010a0201090101013d01070701010701070101010401060101010101010101010b0101010e0201010101010101010101010101010101010101
01010101010164884d4ac2c74a53d753e0533e4d5158c23e4d4d53a0c551a045c44d3e3e534a3ec44d53533e82c553294545c24dc49c45a03e4d4d29c2a0c2c5
c44d534d4a293515d74a35c53ed729e053154dc451e0d7459d9cc4534d9c45c28245c58282c52953e0458245359c3e4a4aa04d45a08553535353535353535353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
535353535353256d0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010802010305010101
01020301010101040101030105020101010101030501090101010c010b010101020101020301020502010e030101010503010103050102050101010701050101
0601030103020101030602010103010707010509010c020105070103040101010402010c07010b01010101040101010c010501010201010d0102010101010201
060503030103010709010107060101070101010e010102010b01060101070501010109020101010901070101090101010c01060701030901030c010107070107
09010d01010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101020801010401010701010601010b0101010c0601010202010101010101
010101010101010101010101010101010101114ea0c7c2d7c7c2a39cc5a3535845c253c4c53e2982c245c54ac2a0c44ac24a29294a4ac54d4aa09c35c541a045
3e3e3ec44ad7294a53c5294dc4539c3ea3534a4a9c53539c4dc55353535353535353535353535353535353535353535353535353535353535353535353535353
53535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
535353535353535353535353535353535353461d01010102010201010101010101010103010a0101050103010101060101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010103010c010109010701010205080a01010501
010101050503010101010101010101010101010101010101010101010101972e88b4b4a94e8dbaa98dbaa2d1b4a9c8baa2c88683ce8d7fb449868db48dba52b4
70498dd97061b6a270ce868dba88c8f3b4ce86a9ba8d83a2d986a9cebabab4b4708386f3b4ba8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d
8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d
8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d682e070102020101010101010101010101080129c79ce0040101010b010107010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101070102010101
010301020c0103070106010101010507010101010101010101010101010101010101010101010101010100c300006e540037001200138b374000000067370000
40006e97376700671300006813930000003700006768001112670037009711130000000000006700001000000037006400006767676767676767676767676767
67676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767
67676767676767676767676767676767676767676767676767676767676767676767676767676767676700f009020201010201010101010101010701a0df18c6
cf005ccc3601040d0106010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010601010701010101010501010101010c010707030601010201010101010101010101010101010101010101010101010140dd0106270105010101
0609030203020101010106030101010e0e01030601010707080601010104010101010303020501010401070108010301010501010501010101010e0109010202
02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202026e5b0301010201020101
0101010101010336010b0109040321ea5cca08010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010301010c050102010102010709050e01010503020302010501010101010101010101010101010101010101010101
01015a21080101020201010c010104010101010c040501010106010101010107070301010102010a07010105270901010b010501050105010401010105010101
0709010101010c010301020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
0202461d01010203010101010101010101010101010901010604011cba184d010601010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010c01010701010101060101010102010601010101020c0101010101010101010101
01010101010101010101010101010059010e1c0c0101013d0c05070101070b0101010105090106010c3601010105360602090301010508010106010101010801
010301010705010405010704010102050d0101010104010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010f1d010103030101010101010101010106020501050109010a0101abea010d04010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101c7010107010101020603018285010c070108270101
0401010101010101010101010101010101010101010101010101108c0501010104040c010501013605010c01050a010209010c01010201063d0101010c010802
3d0101080301060301090101013d010101020102010104050e220101070101450102030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303038b78010102020101010101010101010101010103070204010101010eacda0301010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010c4f0401080501050501
010589bb01060207152806010d01010101010101010101010101010101010101010101010101643a010d010456c0b1030d0127781d3109871e5d040104019c09
01033cfee41b06010b0143000f2a062ebe0b010801010106041504090108030c010706015dbc090103081cf30401010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101eb7801010101010201010101010101010107010b010103010901
01079b77050101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101050107050107
010169005cdd2120a5a90181310115b74e0101017892010336010101010101010101010101010101010101010101010101016821010201017821afa70101d3a7
2be4b772dc9f010506ba00320101e6e45b8ed34b01015a4b498b7fc1610109010601010ca964ff9b23477021014819020292a701050220001c010c0101030c03
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101
01010101010101010101030101040c10360101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010105010602010101021afa2e6c00466065076fae01042a62470127cc750c01010a0101010101010101010101010101010101010101010101014047
01870108010c0916fd01003501015de3977f01018540eb790c060001010981b7078c6401013caf00810e0c0b0104010144fc38db126ead81056674010987931b
010130003d0101010101010105040101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838
010201010201010101010101010101010101010101010201010602d2470101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101040101080502d586010b0101030a0a6fee0201084e254f01efd501013d020101010101010101010101010101
0101010101010101010164dd030101010a010bc2648a7db205010101deb501063942ce7d010100070b0105d03201000203030100169304010c01050abfce0d02
0103010b01b8bd05013d4fe1a502d811020a02070603010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101011838010201010201010101010101010101010101010101010101020201f4420201010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010709010106010162a901010607010101773c02080101f1390156440c0e01010101
0101010101010101010101010101010101010101010100480102c41c2424d81edb8af212f0450707d528012350a315000102009b851c01010101685901013f10
01a9010d0d010101402301010a010c010e1dcc0d0301012100022084010101010101010703010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010201030101f15f0101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010101010101010101040101010406012f132808060301010209ad3a010101
084b600190163601010b010101010101010101010101010101010101010101010101371f0801580092a1ea74e59d01c5df6edcdc84480ef8cc070646230100ec
5a841a470701a17087055d400a0c0e01010e04c51048010c010c010101aebe010205010d180122101f0309050101020203030101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010501030101d8
d4010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010d0b0101c8c300d0
6d1d1dae530301008c010a05a0dc9101bf64cf450101010101010101010101010101010101010101010101010101132301018a6828010401010e010201ca6359
375301bc2401011aae07b3730199b297660163183f019b5a0501010109011f25006a899e6d90c201c7335b0501044d7c50016518254f060101090c0101030101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101
0101010101010301030101a32d050101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010401010308010c4912e6c1cdd5e4410101100000931000fa080e4366b23bf206010101010101010101010101010101010101010101010101403e04360173
d5c701012701c84e011c0157c0019c10090107da950123c69c018d939c010114104e200001020e0701010cc897507de56f7d820101600000124000e532022eec
f16e30e0010103010107010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101
02010101010101010101010101010101010101010301010a62870101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010c07010303010a00d80201060101080c13e57537661c01030177260b1d10b8010101010101010101010101010101010101
0101010101015a5201010127cfc952dd0101610074815f8479019d410109014a0027012eb7b6b319010309018862001303010101060301010051030504010701
057decaa002c2901030142ad05b510d6530102020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101183801020101020101010101010101010101010101010101010105010106fb530101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101070101070401016e4b0802010506010c25dd01f3684a0602018f6601012a256a0c0c01011c
010b010101010101010101010101010101016e5d020106010e65804c150601c5d19f38d80701060601010109d1e00901e8cded99010901010936dd0006010101
0401030100d804070101020502609f014f1849010601897d0101c2cfde3f09070105010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101183801020101020101010101010101010101010101010101010207010104e5490101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010501010501010141646301010207013601004b0609f9b1010501
90980801014f25b6010d0701050501010101010101010101010101010101649b01010a01018702a001010106060604010101020101030a01090201019d010b01
010e01010901096401090c0101010282256101010105030101a194050431d4010a041fd4270701355c760101e001010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010105010101f9d10101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010b0c0135839300000000eb
70012768d6e89a2dd106010eb4c9cd313201f8efc70101011c0101010101010101010101010101010101679b01010706010101020c0107040101010109040201
01060101010b0107010101010c010101090101000a010503010305d90067930000978887015e335643d4430901041c009aefdd0df395010e0103010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101
0101030102020201d69f010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010206
02010101032f414b3a323aa958010100f442aec80a06010b4f006d75008b462001030303010501010101010101010101010101010101673a0601010508070c01
0d010101010203050201010506060c06050103010609060501010c0c0101061321010107030101274f3a1f9b48204d0101d595cc6daba3030c019d17e8ea376e
00a50301010801010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101
010101010101010101010101010102010201020166f5010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010403010102010105010306040101050871a0010301c7012f010e5a2901020d36010d010504010e0101010101010101010101010101
010110d8080401010201010107030b01080101010101020903010c0205010b010101010101030c01010601e2a20401010201010101070501010c03080979dd03
02070c01020101e51b01010e01040501070101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101183801020101020101010101010101010101010101010101010303010207eefc010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101050806050a0401040101010a010101010101050109010101c2350901010101030801010b010101
0101010101010101010101010101674701050101010108030101010104010609090501010101010103070601010b0c2704010101020c01412901090107010606
09010105010801080106010101030127011c04a34a010b01020c010d090301010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101183801020101020101010101010101010101010101010101010503010209696b010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010102010101010101050201010709010301070c050107080103020205e00107
02010936010106010c01010101010101010101010101010101010048010101050705010202010c010402010101010101050a0b01010102060101010101010209
0201040101010c010a01010203010c04010103070501010a050105010b01010b0105010b02010101060101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010103010102018ca6010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010301010505010501360102010301050201
01060101010101010301040101060101030803010201010101010101010101010101010101016e9b09010105010101030c010101010202010106060101010101
080607010507090101060101010701050c0c01010e010503010c0201010409010b07010101060107010c0603010102010a010906010b01010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010201
01010201f2c001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01000101010101010101010101010101010101010101010101010101010101010101010101010101010101010401010802010101010101010101010201060108
06010201010201010108010101010101010101020701010103020101010101010101010101010101010101010101010101011063010501010d02030302010101
010101030702010103070103010c0801050101070103010501050101010101010101010203020101020701060102050109010603010103060101010107010701
070c010403030201060101040b050101020101010903010301060101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101461d010101020102010101010101
01010101010101010101010103010108051101020107010108010101010101010101030105070101020101020706020101010d0101030106010c010101010101
010101060102080101270106050101010106030101030101010c0701040109010101010503010103050101020101010101090101080101080101020701010305
01010207010103050101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010107010901010c01030101
010101010101010501090101010e0303050605010101010101010101010103070702010202010101010101010101010101010101010101010101010101012591
312642f1d1427231263172f61b6dee3181b88126f6f1ee6d31726579381b427914bebe2681572626261bb8b81b14ef31f1f6b842145765be318157ee81ee57ab
be31f6a526381b1bf61b81be72d91d57da81ee14b81481657072384231ee811426d1ab26ab7081811b1b1b1b1b1b818181818181818181818181818181818181
8181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181682e
070102020101010101010101010101010101010101010101010101040154360301070101090101010101010101010b0101030c0101060902010101090c010102
07050701020101010101010101010c01010201080401010101010907010501010101010c05010109010101090c02010103070703010105020101030805010608
010909010b0c01030901010507010103090101050701010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101
010103010101010201070101010101010101010601010303010c0101010102030101010101010101010105010102020101010101010101010101010101010101
0101010101010101010100101100000067000000000000110000001140401111000097000000000000136e000093000011119797974000004097970000004068
40000040b70000003700000000680011004097000097939700003700970000008b00000000009713110000131100006400004040404067673797373737373737
37373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737
3737373737373737373700f00902020101020101010101010101010101010101010102050101050c018051010107010107010101010101010101010101020c07
01010107360401010101020705010901090301010101010101010236060101060106070101010c01010106060501010105070203010727010301050101010101
0105010109060101030201030c010204070104010105030101010401010503010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010107010106010101010101010102090101010902010101010101020502010101010101010102010102020101030101
010101010101010101010101010101010101010101016421010101010101050101020607010101010101010102070901010102010105010e0102010701050202
020303030302010101010101010105010104010701030101030101010101010107010c01010101060506010d0103010101010104090105010101090102010101
02020201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101016e5b03010102010201010101010101010101010101010101010601010705017ab5010105010105010101
010101010101010d040101010109030201010207090407010301010c010501010101010101010101010701070101010501010101010c01010108040101060101
04010107060105030101010103050d0101040c0102020307010101010c07080101050205040c080101050205040c010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
0101010101010101010101010101010101010101010101010101010201050c010103010101010101010101010b0901020a010207060201010201010101010101
01010201030502010105010101010101010101010101010101010101010101010101138c010e0101010201010101010202030101020c07010101020103070201
01060e010187010103010102030101010103050503020203070c01040c010102010101010107010c010303010105040103090e010106010b0d01010509070507
01010105050102030b01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101461d01010203010101010101010101010101010101010101010701010301
05fdef010103030103010101010101010101010101050601010107010103020101010102030d050101030101010101010101010b7fb30a010601010607010206
0503360701010201010306001c070401010101050c03030c05010301010101010101010107010106010101040a010101020101040a0101010201010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010701010c0101010101010101010201010101010c010101
010707010101010101010101010101020201010101010101010101010101010101010101010101010101010101013761010101360101030c0903010102080403
01030201010601010301010a01010102010108070603010101010101010103010101010202010c01010105070107030302030101010107020106010201020109
01020d0101030c01010101010108050104090101010c010101010101020201010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010f1d01010303010101010101010101010101
0101010101010102010301010614f90101010302020101010101010101010b050101010a27010c01020908050105030501060701870101010101010101010d0c
88c10101090101060101070c010101020c010101070201d48601010b03030101010101010101010b070105080501020705060605070101010103270d030c0101
0103270d030c01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101070101c701010101010101
0101079c9c01020103070d01010106010103010101010101010101030101010b0901010101010101010101010101010101010101010101010101404701090101
01040101010106060101060101010501010105010c020101010b0104060801010101010101020c0c03010205060605010101060127010c010101050109010d01
0a0c0101090101010401010801010801580101070c02010502010301010301350105060501010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101018b7801010202
0101010101010101010101010101010101010301010701020259d40e02010102010101010101010101010101058701010101010103010101010101019d010101
27010101010101010101530161540b01010707030101020101360b02010c0b07010107f5bd030a0101010c0101090901010c010701010d010106010201010101
0101010e010101010103010e01010101010301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010501
050801044f0c01010101010101010289761c01010bd7ca1c0101060101020101010101010101030601010bc5e005010101010101010101010101010101010101
010101010101971f0b0103ccbe010c01011cca2045010101094a15a00d0101c4f673d9580b2ab602283302010402030101091c8708010b837cb8a001f242013a
b83601011c01653d0101be1d812901411b060901f7e33a01050c0122b3012f2eea944a0101070102060115e5ef8c0b0905010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101eb78010101010102010101010101010101010101010101010901010c0103010c5a580601010101010101010101010101040179d2fd29010b0281
d5fe1f01010405019851070101030101010101010101549c24000101060101010107010187613b8107010301010801eeaf0301020c0305010a59590a01050952
9e783a01876a050ba80d0b800901f6ea961502090707f6ea96150209070701010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
010101010101010101010101020301da13df83474870b601b8790ce0547f0101076d770d01010e010a0106010109010104010701070135119e06010602010101
0b010101010101010101010101010101010100d8010301d5cc0701a038eb1200108d010b9dd29700ef0101d2f4cc390f4239ef0c6660030601010b0109d83b31
0c01a4771db200d0f0a1014b950101010b01370801f5758996407ea7950101059df1007001050166cd02aed4ef740f7005010101090105ef9118370018be0201
06020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010118380102010102010101010101010101010101010101010101010101010101015ff10101080c010c010101010101
01010101308da7de9d0361b781a78bf002020103dcf2010c0102010b013f6d6e89510001ef9364acd7010801010401010109b60ffa0c36010402064b973e0702
0c0101011b0046a8510183189e5646a6da00014b0001211301f35a6d7b8b940c0630931bf88bb109010701010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
01010101010101010101010101010101010101010101012f0101015bb2b8e600ebec6d01ad66010249fb990a015be30101270102010501050101050307010101
270c016754470201010c0c01010101010101010101010101010101010101674801030155be0505dc5f202f0147932101d5440a476c633deba001015dd354d101
f160030c010601050ec6682c010edc23052f4519007b0548cf0c050a014d000101c18c0101d77d17440901f15805d812f2019d57a1027db50107f2469b070d01
010c01011c5e3a413ad7010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010101010101010147de
090101010401010101010101010101030303021ab00166660109d7d49e010101cdef0106050636010ae15ef100a5cd01efc95da5648d01090b020107705308a3
2db40135010101ad674b010c010c362425d73fe7ec0db82e020e3f14005c0185000199000cef420e0a82c97907909401085116f1030101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
010101010101010101010101010101010101010101010101010101010101010101010a010104017779011c010d010101e457010c04b64632015b5e01020c0301
0101013d010108010106010601012710eeca05040101010c060201010101010101010101010101010101978c01030173380272503d01010e08262c53004d0101
060101dce708010a03b9610130ed010301030c092eed09000401abc008010901a4a401220005010105488b360ebe50c70701011a7e01320052050173ea0801b5
3301604b01012f26c8010101010b090101c1220101010106050d0101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101
0101010101010101010101c6590d010303010101010101010101010801060207c0709e6d090101dd66090109373a0401010102036daa0701acc6ad0451ec090c
8a00820101010b014c710101d1b7e0010103cc5c7a1d0101020201bf9e0501013f02a9e99b010108a950013600011c37012eb80101015dd6031dbe0902019bd0
09010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010101010405011032070101070c0127c1590c03
012726cd0c1dbb0c050101010c014d1f2907010c0c01095c90583e000101010106090901010801010101010101010101010101010101974b010101bebe016cce
0d050301013a671fe90e06018703014784b34501025e8c0328ea0101010101272d4836eb4b014acfcfc236015b89089baf01020d01212d0b019d5c5c9d0e0d6d
9e055d8be9010b0ed2700cdd95087d31b55301010407010d010107070795dd040c07010701010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101
0101010101010101010101010101010101010101010106b89104010205010101010101010101090e222299b5fdbe9f76a5c7e0010206014a972f070109090106
149f01c4b437e5082aea010101f8fe010107040100628a0c01e2f9050147fba91dbd02011c010cbd940b0601060101e7183001015d2c03010001016701947b52
53e001010166a48d4a1c010101070101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101080411
5201070101010b01714901010d012360012e843501010e06010e31750012dce4a4c50b00bfc35fa10b040b070701010e01010101010101010101010101010101
0101374b010105429f010028010d01011c20640100290b0501010b018ab312e1952dca0b3c390501050108ab7a0101e2be0101027e001692e381013197a30301
0378ad010c090dcb00e1e44cb80b819ac34b010972bf041fe5017de53b00e23a0102080101010101039a8a010305010301010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01011838010201010201010101010101010101010101010101010101010101010101070bdba001013603010101010101010103d4fbacdc2c7747bec9d3007a88
010101011236010401010603befc050182007e0124dc010187caa8010a01018264bdb10109d862011c6fa40130d401010601019071010305013d0136a5c35a39
77c10901000c010007265c16007dd909035b5c3913b9a20309010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
010101010101080201239300aeb189cc56f201050024010d019c8e7b012c80afe03d010101010901043e4b5b98639b0005598e006b4801010502010201090101
0101010101010101010101010101373a0101079f9e015f810204013f0186d302bed40101020d010d020d22484800580628d50301050101d61b010486d4090907
04d7d84facce056d002b0101046660062701010553222a5c6308d97c7396020c3e935821cd06dac00c1cae407a010201010b010136a1b60701070105010a0101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010118380102010102010101010101010101010101010101010101010101010101010102a7380102010c0101010101010101010f
ee01010608014f683d1cc83b970e811d00020701010a03018dc90102017ab1015d34070101350001040101b6929bc60109013b63476e3f013e0003010101043f
64830103010105010287238598f50c0140030300012837353f65cf93279900351c1be3ebc4010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
01010101010101010101010101010101010101033d01ab6416a133aadca301026711370012007ce00bed76f96241080106010201022f01010901990001015556
f180bc5901050e05010a01010101010101010101010101010101974b0201017678012400a5c4c122c5c6b805c7777e0104010d2ac807010d49c905018c600101
03010111ca01015913034acb0101034f00c501765f10530101788f01018a90070b01c2643e082ecc3262270c0100611fcd03c50f86074a3b8d06010604070101
06742401010c03030101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010101010101010101010a1b980136
01070101010101010101015d188a3f01010a05347b0603e4d005b52d137e90a00e0103060400050205a1ef099b129132074b00010901039b6006e94901077a38
dcce030109931f0105010101cede4b06010501f8c706010a2dd90209130104120107cdfa0401d3440101e4a70601d2f501020101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
01010101010101010101010101010101010101010101010101010101010107010107010020020d010206010100b3de252e0d030101ea6d011d007005020c0106
010101050b01b564010b5e940107480105030109030101010101010101010101010101010101684b0602017e6d020149b0ad719700b10107014784b20c080149
67741db364b40101b56003010701074f01070c016cb6a0b71642b2847e0c0139b85fb988ba47600701538b3494bbbcbd0102be7e01bf8f2945130e638f010123
137f665a010101020102080101392203050201050101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010101
0101010101010501edda010136010101010101010101010ae72d571ec401012f46d6a2001501012300e7edb601090101871803060166d8095300e562d97e7501
0c010224160226db8c0177610102010109bfb1090101010203a7c04b0106019250f0f7afe301012f400135970e013f8bb2a968470104582db2a9372803010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0100010101010101010101010101010101010101010101010101010101010101010101010101010101010101040105002002030d010c0109001f01ce64a00506
02959001024754b2010201010101010101011f670401aa7601050101010101010101010101010101010101010101010101019352010106949501020158969798
0c0105010301999a846b010529882e6d3201010c9b670305010201010101023d9c22019d639e9f5d0e010123a00ea154a2a3a401010c0ea566385236010138a6
012fa718a87c05226e020507a9aaaaa907050103010632a8269a4801020501090105010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101
01010101010101010101010701010c02010101a00f060701010201010101010101010c01071fd3648305050299609a310403061f00010109010102010652010b
0102010506d286236cdb3201010a023200010df66ec0d558070105010a59590a0105020201094225d49b010e5d9f9e639d01010b004802009905012a609a9e05
0105012a609a9e050105010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010107010101c2dbf3030102
010b0c01973a0d01ecf00101014296013d06ca17ce0c01010101010101018c6e010381e801010101010101010101010101010101010101010101010101010020
010901313301030501010406010501010c0b0187238801030606070505070c01280001010105010203010101060d0b0201060601010c06023f010104060d050c
04010701010d01010127892c010c011f8a35053a40040101010606010101010402010670e95a4b010101010c0101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838
01020101020101010101010101010101010101010101010101030201010501f789090106010101010101010101010101080105c701050101010403360101061f
100a0101010b0201014a010101010909012a0d01010101030501016964010104c2a0a30101040c0101090901010c01010301013c69280c0101060601020b0d01
125d0168240a060101010b010101060101010b010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101
01010704010e79970000006e008d010900f8b195d331010e0114c396148201f85b01010101010101010101004505943901080101010101010101010101010101
01010101010101010101672806070176770501070e09010309012701010101010305020505010101010106013000060702020101030501010101010101010101
01012701010a040301017804010504010101270b0101797a01010b05010101480001060c050101050c0601030b01010178643a06010101060101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101011838010201010201010101010101010101010101010101010101030601010107276c5801010401020101010101010101090108070108
0c020904050101030505018500050d0104010301020101010401010101011c9d010401010601013c930b0807013d0204010301010101010101010801010d0101
020101010101010101010101001e0100230108050101010107080805010101010708010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
010101010101010101010101010101070201094a48154b9b8c4a0401134481f088040107019c112e4c6e000fd801010101010101010101220127c5523f010101
0101010101010101010101010101010101010101010110240801012b6001080101060101060101070701010c05010c010101090d0c010101613b3d0301050101
010103050505010206060c0c0501010b07010903032a00060101010c0406010108011f62010509010101016364450101010c0c01010103010103030101501506
01010103010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010101060701070501d16f06010507010c0101
0101010101010201010402010c010101010504010103010d5a1c060601270105070105070c0108090101010101010d0105010101002f01010709010101010105
0c03030c05010601010c0101020101050c0c06060201040e13300897a90101010106010201010101010601020101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
01010101010101010101010101010101010101010101010101010407010101010c0601080101010d963e040101070b030a01b78c010b0101060c010101010101
01010b0301010d01010c010101010101010101010101010101010101010101010101004701010648490101030606060301010101030607010109010101010101
010102014a14010101070603010101010303030301010101020201010101060b01012b010a01020501010c0101034b4c0d0501090801034d4e01030605010105
06030b010201020109702f0201010101010501010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101010102010901010d
010177300401070101030101010101010101050d05050101010d03020801050108050101010b0101360101050101050301010201013609013601010104010436
6ed80801010107013d0505030101010103050101020101010c0502020101010103030101f68701311c0102090105010b050602090105010b0506010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
010101010101010101010101010101010101010101010101010101010101010101010101010102010105060801013601c787010101010127050c010101018527
058701013501010101010101010101063601050101010101010101010101010101010101010101010101010101014020010605010101030b0101010101040a02
01020d07010301010609060201010701010b01050101020101010101010101030707050501010803090601010505010109020d01090601060301034101080501
0307030c010101020702020702010201080501010101020101030201010501010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101
01010101010103010c01010c012f680b010701010b01010101010101010101010101270901010101040109010501060101270107010a0107010c010101070106
02010204010107070c010101320102010306020101010501010101010105010101060a0b0101010105050707030101090107060105020104060d010101010104
060d0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010502070101010105010201010102
0e012701013601090401090107011c0101030101010101010101060101050101010e010101010101010101010101010101010101010101010101123a0a010101
0105010101060e0701010101070101010707090101010103070702030101050e01010101020305030202050101010101010201010101050101060e0501070101
270101010103040101010b010108010501060c0101030301010c05010103013d010d010301020501010201010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101
02010101010101010101010101010101010105010701020101a95c01010501010b0101010101010101010506050101030102080101010601010501010c010905
0701070301060103010301042701010c010b0501010c0b07010b010602020101010d010103070703010101010101010101080201010101010105013f01070d01
0b0105010101020d0c0705010101020d0c0701010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010102
05010703060102020201090101060106040101040101010c0701010603010101010101010101010b0101010e0201010101010101010101010101010101010101
01010101010137280701010801010103090101010901070101030101030101010305010101010104030101050107010102020101010201010103050101020502
03070101040101010601010b06010301070901070701010e05010109010601010103030101010102010501010401010601010601010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101183801020101020101010101010101010101010101010101030103010c0108b176010b0105010107010101010101010101010802010305010101
01020301010101040101030105020101010101030501090101010c010b010101020101020301020502010e030101010503010103050101050101060901010201
01050301010107010c01010901020101030602010103010103060201010301010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
0101010101010101010108010101020101020101010101010101010101010b010701010101010101020501010101010101010901010103050101010101010101
0101010101010101010101010101010101011063010501010d02030302010101010101030702010103070103010c080105010107010301050105010101010101
0101010203020101020701060102050109010603010103060101010107010701070c010403030201060101040b05010102010102090101010105010101070701
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101461d010101020102010101010101010101010101010101010c0101010701035f4e07010101080102010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010105060503030101010101010101010108070c010402010102030503010101010101010101010101
0501010207070101010101010101010101010101010101010101010101012591312642f1d1427231263172f61b6dee3181b88126f6f1ee6d31726579381b4279
14bebe2681572626261bb8b81b14ef31f1f6b842145765be318157ee81ee57abbe31f6a526381b1bf61b81be72d91d57da81ee14b81481657072384231ee727f
f1ab426dab7f81261426261426818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181
818181818181818181818181818181818181818181818181818181818181682e0701020201010101010101010101010101010101010103010201030102ac2401
0101010c010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
01010101010101010101010101010101010101010101010101010101010101010101010103020101010101010101010101010401010101010c01010101010203
0201010101010101010101050c010101010101010101010101010101010101010101010101010101010100101100000067000000000000110000001140401111
000097000000000000136e00009300001111979797400000409797000000406840000040b7000000370000000068001100409700009793970000370097000000
8b000000000097131100000037006737004067406713136740673737373737373737373737373737373737373737373737373737373737373737373737373737
37373737373737373737373737373737373737373737373737373737373737373737373737373737373700f00902020101020101010101010101010101010101
010101030301010103b0c50106050107010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101020502010101010101010101010101010701
01010307010107030101010103070101010101010101060301010303010101010101010101010101010101010101010101010101010164210101010101010501
01020607010101010101010102070901010102010105010e01020107010502020203030303020101010101010101050101040107010301010301010101010101
07010c01010101060506010d010301010101010409010c0501030101040101030703030703010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101016e5b0301010201020101
0101010101010101010101010101010602010101046404010c050107010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010201010206
07020101010101010101010504010904010b030706050101010201010101010101010c0101030701020901010101010101010101010101010101010101010101
0101138c010e0101010201010101010202030101020c0701010102010307020101060e010187010103010102030101010103050503020203070c01040c010102
010101010107010c010303010105040103090e010106010b0d010105090705070101010101020606060101020201010202010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101461d0101020301010101010101010101010101010101010101060101050335c3020107010107020101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
01010101010101010107070101010101010101010101050101010104010901010103020101010101010101010101010101030101010701010101010101010101
01010101010101010101010101013761010101360101030c090301010208040301030201010601010301010a0101010201010807060301010101010101010301
0101010202010c0101010507010703030203010101010702010601020102010901020d0101030c01010101010108010304010101010b05010101010101050101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010f1d01010303010101010101010101010101010101010101010501010503cade020201010205020101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
010101010101010101010101010101010101030101060101010d01010101010101010d01518a010503010807010101030301010101010101010101020201050b
090101010101010101010101010101010101010101010101010140470109010101040101010106060101060101010501010105010c020101010b010406080101
0101010101020c0c03010205060605010101060127010c010101050109010d010a0c0101090101010401010801010801580101070c020105020101010c01093d
01080501010404010105010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101018b7801010202010101010101010101010101010101010101010101010301a99a010501010501
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
0101010101010101010101010101010101010101010101010101010101010201010601011cca01010101010101010102aebb06010b0122d70e01010505010101
01010101010101030101e0289c05010101010101010101010101010101010101010101010101971f0b0103ccbe010c01011cca2045010101094a15a00d0101c4
f673d9580b2ab602283302010402030101091c8708010b837cb8a001f242013ab83601011c01653d0101be1d812901411b060901f7e33a01050c0122b3012f2e
ea944a01010708010107b6d1070202010c58580c0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101eb78010101010102010101010101010101010101010101010101
020101017f7101050102060101030101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010001010101010101010101010101010101010101010101010101010101010101010101010101010101010301360101313777b61f8cdaf30172b8014a18da01
0a015b5c01010605010a0101010503010105070101b66800c31501010109050101020101010101010101010101010101010100d8010301d5cc0701a038eb1200
108d010b9dd29700ef0101d2f4cc390f4239ef0c6660030601010b0109d83b310c01a4771db200d0f0a1014b950101010b01370801f5758996407ea795010105
9df1007001050166cd02aed4ef740f70050101010d0c7100105e7aea6f64a0010703010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101
01010101010101010101030107030102b87b01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010d0102011c909894e1
008b6bee0295ef0102a96232010a14160606010501010c03010105070201010108a17901f0750b01010101010303010101010101010101010101010101016748
01030155be0505dc5f202f0147932101d5440a476c633deba001015dd354d101f160030c010601050ec6682c010edc23052f4519007b0548cf0c050a014d0001
01c18c0101d77d17440901f15805d812f2019d57a1027db50107f2469b07070601039d12c9651b6db64a020a0109010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011838
01020101020101010101010101010101010101010101010101050103897e01010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101
0101060101010101eada010b01010387017dd9050101a50f4b0156c101020d01060501020c02010101010b0701008c0101bc5208010201030102010101010101
01010101010101010101978c01030173380272503d01010e08262c53004d0101060101dce708010a03b9610130ed010301030c092eed09000401abc008010901
a4a401220005010105488b360ebe50c70701011a7e01320052050173ea0801b53301604b01012f26c801010401050d06de7b063d01090107010c010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101183801020101020101010101010101010101010101010101010501070102e7b801010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
01010101010101010101010101010901050d0201b7220701020c010101a18c01070101382c04be7e870101030b0105a0325307010308010701e77b0301e85b0d
010c070c010301010101010101010101010101010101974b010101bebe016cce0d050301013a671fe90e06018703014784b34501025e8c0328ea010101010127
2d4836eb4b014acfcfc236015b89089baf01020d01212d0b019d5c5c9d0e0d6d9e055d8be9010b0ed2700cdd95087d31b55301010407020103010c0236bcd001
010207030c0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010401050101ec8d01010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
01010101010101010101010101010101010101010101010101010102090101288461010401010c0502dcb6013f0501ddac01cc460808010102070c57de0010df
b37ee00704e0109b01c3ce0101050104010501010101010101010101010101010101374b010105429f010028010d01011c20640100290b0501010b018ab312e1
952dca0b3c390501050108ab7a0101e2be0101027e001692e381013197a303010378ad010c090dcb00e1e44cb80b819ac34b010972bf041fe5017de53b00e23a
01020901010101020447b95601010a01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010b01020101
e63a0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
01010101010101010101010101010101010101010101010101010101010101010101010101010d02010dcecf406abe669e94c407052528090107358e7b09550f
afc70108070101050606c71e78d0ce010c03d12d9fd20d010403010c070101010101010101010101010101010101373a0101079f9e015f810204013f0186d302
bed40101020d010d020d22484800580628d50301050101d61b010486d409090704d7d84facce056d002b0101046660062701010553222a5c6308d97c7396020c
3e935821cd06dac00c1cae407a01012f07010702010115db4f0e0101050501010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101
01010101010101090101010950290101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010106010101037900c0c1337d8fc201
0100540000c300739d01ad1db23b8c0101030101010102030101013601015362b799010108070101070101010101010101010101010101010101974b02010176
78012400a5c4c122c5c6b805c7777e0104010d2ac807010d49c905018c60010103010111ca01015913034acb0101034f00c501765f10530101788f01018a9007
0b01c2643e082ecc3262270c0100611fcd03c50f86074a3b8d060901010136010708055b8f01010b010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101183801020101
02010101010101010101010101010101010101020301012f3b080101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010201
36080105372001030101020a01119aad00782f01010c8f8901ae127f8701060101020603010101013f5e4039af09090101020701020501010101010101010101
010101010101684b0602017e6d020149b0ad719700b10107014784b20c08014967741db364b40101b56003010701074f01070c016cb6a0b71642b2847e0c0139
b85fb988ba47600701538b3494bbbcbd0102be7e01bf8f2945130e638f010123137f665a01010103010601010701034597090601010b01010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010118380102010102010101010101010101010101010101010103010701034a0f010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
01010101010101010101010d01010c01002a01080201010101002a018d2d8a0103028f9001015d8491010101010101010101010642922f014c880c0101360101
02010101010101010101010101010101010193520101069495010201589697980c0105010301999a846b010529882e6d3201010c9b670305010201010101023d
9c22019d639e9f5d0e010123a00ea154a2a3a401010c0ea566385236010138a6012fa718a87c05226e020507a9aaaaa90705090105071eab0901064d642f0101
06030101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010118380102010102010101010101010101010101010101010101030106012aac010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
01010101010101010101010101010101010101010101010d020102538030080c010e070501002005085f76270107816a0d070982188301010101010101010701
6184850a864c0e01090205030108010101010101010101010101010101010020010901313301030501010406010501010c0b0187238801030606070505070c01
280001010105010203010101060d0b0201060601010c06023f010104060d050c04010701010d01010127892c010c011f8a35053a400401010106060101010108
013d288b8c07018d8e01033d01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101183801020101020101010101010101010101010101010101010d0c0107266a0c0101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010201041b0067685a000069010d006a1a6b6c6d010201656e6f704102
7172010101010101010103010173544e5374753d01010108050501010101010101010101010101010101672806070176770501070e0901030901270101010101
030502050501010101010601300006070202010103050101010101010101010101012701010a040301017804010504010101270b0101797a01010b0501010148
0001060c050101050c063f0101010152407b7c7d7e010101013f0101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101
010104010c02015e7f01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010101010a050101513224522021530101545514
56570a025801595a5b5c3700465d01010101010101010e0106054b5e00015f01010d010301020101010101010101010101010101010110240801012b60010801
01060101060101070701010c05010c010101090d0c010101613b3d0301050101010103050505010206060c0c0501010b07010903032a00060101010c04060101
08011f62010509010101016364450101010c0c01010101040b0101040b655f663f010d0b02010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010118380102010102010101
0101010101010101010101010101010401010710580c010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010c0101010b01
030c010401010a010644450202010101010903463e090c010101010101010101010101050d010102012701010105060d01020101010101010101010101010101
0101004701010648490101030606060301010101030607010109010101010101010102014a14010101070603010101010303030301010101020201010101060b
01012b010a01020501010c0101034b4c0d0501090801034d4e0103060501010506030107010609010c0e07070104010104010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010118380102010102010101010101010101010101010101010105010a014f500a01010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
010101010101010303013d0105010801050401010c010136010a2f06010101323e0105360108010101010101010108010b0102080101013f0101010901010101
01010101010101010101010101014020010605010101030b0101010101040a0201020d07010301010609060201010701010b0105010102010101010101010103
0707050501010803090601010505010109020d010906010603010341010805010307030c0101010207020207020102010b010102010101010101030607010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101011838010201010201010101010101010101010101010101010301010e42430501010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
01010101010101010101010101010101010101070c010101040901040201070301050104010501010403010203010a0101050101010101010101010c010a0707
0301050101270101040701010101010101010101010101010101123a0a0101010105010101060e0701010101070101010707090101010103070702030101050e
01010101020305030202050101010101010201010101050101060e0501070101270101010103040101010b010108010501060c0101030301010c07010c010c0a
01070205070804010109010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010118380102010102010101010101010101010101010101010101060a0d3b3c0107010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
010101010101010101010101010101010101010101010101010101010101060101060103010101060103010301030d0107010236010102020108010505010101
01010101010103010101010106070103010104010601010101010101010101010101010101013728070101080101010309010101090107010103010103010101
030501010101010403010105010701010202010101020101010305010102050203070101040101010601010b06010301070901070701010e0501010901060101
01030301010101360104010101050301010601010a01010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101011838010201010201010101010101010101010101010101010202
01392b01030101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010113300101050c0101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011831070101060601010101010101
01010701010603010c01013233340201350101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101181d
1e1f2021222324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424
24242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424
24242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242526
27080201010a0101010101010101010501280e292a2b2c2d2e08012f010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101000f10110000121013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
1313131313131313131300140101090903010101010101010101010415161718191a1b1c01010101020901010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010c010105010502020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
020202020202020202020202020202020202020202020201010a070101010101010101010101060101050101060c010b0e010a09030101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010a0a06010101010901010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101020505010109080101010101010101010605070107010801010104010101
0d020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101030a04010103030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303010205030101010301010101010101010101
010b0301080c02050401060306010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101070501010101
02010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101030301070601
01010101010101010101040101060101010103010101060102090101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010203010104010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010102050101030603050101010101010101010101070201080101030703010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010001010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100040000002701ffff030000000000}}}}}\sectd \ltrsect
\linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sftnbj {\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note the }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 offset}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  on our parameter: 00000008. That means 8 bytes past wherever the EBP register is pointing.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Note also the offsets on the local }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 scratch}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  
variables: FFFFFFFC, FFFFFFF8, FFFFFFF4. That's -4, -8, and -12 in regular notation, which means 4, 8, and\~12 bytes to the other side of where the EBP register is pointing.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that's it for this step. Next time, we'll give everyone (who needs one) a permanent address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 230. Time to hand out addresses. Move the abort line down and activate the next step:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line 
Compile the directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line Compile the directory (index the routines for utility use).\line 
Compile the directory (compile the bodies of the routines).\line Compile the directory (add and compile the built-in startup routine).\line Compile the directory (offset parameters and variables).\line Compile the directory (address).\line 
Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (transmogrify).\line \\Compile the directory (link).\line \\
Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 231. Then put this guy back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (address):\line If the compiler's abort flag is set, exit.\line Show status "Addressing...".\line 
Start the addressing timer.\line Put 4096 into an address.\line Put the address into the import borough's base.\line Address the imports given the address.\line Put the address minus the import borough's base into the import borough's length.\line 
Round the address up to the nearest multiple of 4096.\line Put the address into the data borough's base.\line Address the globals given the address.\line Address the literals given the address.\line 
Put the address minus the data borough's base into the data borough's length.\line Round the address up to the nearest multiple of 4096.\line Put the address into the code borough's base.\line Address the routines given the address.\line 
Put the address minus the code borough's base into the code borough's length.\line Stop the addressing timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 232. You hopefully recall that we only need five of the many possible sections that\~
a Windows Portable Executable might have: The DOS Header, the PE Header, the Import Secti
on, the Data Section, and the Code Section. We'll deal with the two Headers later. In the meantime, we didn't want to waste a good word like "section" on Windows' crap, so we decided to call those latter three sections "boroughs." (A }{\rtlch\fcs1 
\ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 borough}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  is an administ
rative division of a large city.) Here are the types we'll be needing in this step; put them back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A borough has a base address, a length and a size.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The import borough is a borough.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The data borough is a borough.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The code borough is a borough.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 size}{\rtlch\fcs1 
\af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  of a borough is its actual }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 \i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 length}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  rounded up to the nearest multiple of 4096 (the virtual page size used by x86 architecture CPUs).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 233. We'll also be needing a few globals to keep track of where we are; put these back in too:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The current header address is an address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The current name address is an address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The current thunk address is an address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 The image base is an address equal to 4194304 [$00400000].}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 234. The Import Borough comes just after the headers in our executable, so we address our imports first:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address some imports given an address:\line Put the address into the current header address.\line Put the imports' count into a count.
\line Add 1 to the count.\line Multiply the count by an import header's magnitude.\line Put the address plus the count into the current thunk address.\line Get another count given the imports (all entries plus markers).\line Multiply the other count by 4.
\line Put the current thunk address plus the other count into the current name address.\line Loop.\line Get an import from the imports.\line If the import is nil, break.\line Address the import.\line Repeat.\line 
Put the current name address minus the address into a number.\line Add the number to the address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 235. The routine above needs a little help from this guy:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To get a count given some imports (all entries plus markers):\line Put 0 into the count.\line Loop.\line Get an import from the imports.
\line If the import is nil, exit.\line Add the import's entries' count to the count.\line Add 1 to the count.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 236. And some more help from this routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address an import:\line Put the current name address into the import's name address.\line 
Put the current header address into the import's header address.\line Put the current name address into the import's import header's name memory address.\line Put the import's name's length plus 1 into a number.\line 
Round the number up to the nearest multiple of 2.\line Add the number to the current name address.\line Add an import header's magnitude to the current header address.\line 
Put the current thunk address into the import's import header's first thunk memory address.\line Address the import's entries.\line Add 4 to the current thunk address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
237. it's not enough, of course, to just address our imports (the DLLs we'll be calling); we need to address each of the functions (entries) within those DLLs that we want to call. So we need these two guys:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address some entries:\line Get an entry from the entries.\line If the entry is nil, exit.\line Address the entry.\line Repeat.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address an entry:\line Put the current name address into the entry's name address.\line Put the entry's name's length plus
 3 into a number.\line Round the number up to the nearest multiple of 2.\line Add the number to the current name address.\line Put the current thunk address into the entry's thunk address.\line 
Put the image base plus the current thunk address into the entry's address.\line Add 4 to the current thunk address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 238. And that's it for the DLL stuff. Now we assign addresses\~to\~our global variables and our literals, both using these two guys:}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address some variables given an address:\line If the compiler's abort flag is set, exit.\line Get a variable from the variables.\line 
If the variable is nil, exit.\line Address the variable given the address.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address a variable given an address:\line If the compiler's abort flag is set, exit.\line If the variable is nil, exit.\line 
If the variable's compiled flag is not set, exit.\line Put the image base plus the address into the variable's address.\line Add the variable's type's length to the address.\line 
If the variable's type can be reduced to "string", add the variable's data's length plus 1 to the address.\line Round the address up to the nearest multiple of 4.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 239. Lastly, we assign addresses to each of our routines:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address some routines given an address:\line If the compiler's abort flag is set, exit.\line Get a routine from the routines.\line 
If the routine is nil, break.\line Address the routine given the address.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address a routine given an address:\line If the compiler's abort flag is set, exit.\line If the routine is nil, exit.\line 
If the routine's employs moniker is not blank, exit. \\ employs are addressed later\line If the routine's compiled flag is not set, exit.\line Put the routine into the current routine.\line Put the image base plus the address into the routine's address.
\line Address the routine's fragments given the address.\line Round the address up to the nearest multiple of 4.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 240. it's not
 enough, of course, to just give an address to a routine's entry point; we need to know where to put each fragment of code, as well. So we need these two\~guys:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address some fragments given an address:\line If the compiler's abort flag is set, exit.\line Get a fragment from the fragments.\line 
If the fragment is nil, exit.\line Address the fragment given the address.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address a fragment given an address:\line If the compiler's abort flag is set, exit.\line If the fragment is nil, exit.\line 
Put the image base plus the address into the fragment's address.\line If the fragment's tag is the push address tag, add 7 to the address; exit.\line If the fragment's tag is the call internal tag, add 5 to the address; exit.\line 
If the fragment's tag is the load address tag, add 12 to the address; exit.\line If the fragment's tag is the increment tag, add 10 to the address; exit.\line If the fragment's tag is the dereference tag, add 14 to the address; exit.\line 
If the fragment's tag is the jump false tag, add 9 to the address; exit.\line If the fragment's tag is the not tag, add 3 to the address; exit.\line If the fragment's tag is the exit tag, add 5 to the address; exit.\line 
If the fragment's tag is the repeat tag, add 5 to the address; exit.\line If the fragment's tag is the break tag, add 5 to the address; exit.\line If the fragment's tag is the prolog tag, address the fragment given the address (prolog); exit.\line 
If the fragment's tag is the epilog tag, address the fragment given the address (epilog); exit.\line If the fragment's tag is the intel tag, add the fragment's code's length to the address; exit.\line 
If the fragment's tag is the push value tag, address the fragment given the address (push value); exit.\line If the fragment's tag is the call external tag, add 6 to the address; exit.\line If the fragment's tag is the load eax tag, add 8 to the address; 
exit.\line If the fragment's tag is the save eax tag, address the fragment given the address (save eax); exit.\line If the fragment's tag is the call indirect tag, add 8 to the address; exit.\line 
If the fragment's tag is the routine address tag, add 12 to the address; exit.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
241. Some fragments have fixed machine-code lengths; some don't. The fixed-length ones are handled above; the others are handled by the four routines below:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address a fragment given an address (epilog):\line If the current routine's callback flag is set, add 3 to the address.\line 
Add 6 to the address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address a fragment given an address (prolog):\line Add 3 to the address.\line 
If the current routine's local size is not 0, add 10 to the address.\line If the current routine's callback flag is set, add 3 to the address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address a fragment given an address (push value):\line Add 6 to the address.\line 
If the fragment's variable is nil, abort with "Internal error - address a fragment given an address (push value)"; exit.\line If the fragment's variable's type is nil, abort with "Internal error 2 - address a fragment given an address (push value)"; exit.
\line Put the fragment's variable's type's length into a length.\line If the length is 4, add 2 to the address; exit.\line If the length is 2, add 3 to the address; exit.\line If the length is 1, add 4 to the address; exit.\line 
Abort with "Internal error 3 - address a fragment given an address (push value)".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To address a fragment given an address (save eax):\line Add 6 to the address.\line 
If the fragment's variable is nil, abort with "Internal error - address a fragment given an address (push value)"; exit.\line If the fragment's variable's type is nil, abort with "Internal error 2 - address a fragment given an address (push value)"; exit.
\line Put the fragment's variable's type's length into a length.\line If the length is 4, add 2 to the address; exit.\line If the length is 2, add 3 to the address; exit.\line If the length is 1, add 2 to the address; exit.\line 
Abort with "Internal error 3 - address a fragment given an address (push value)".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 242. And that's it for this step. Run it. In the blue, open up the daughter and list her. Then open up the listing and check out\~
the addresses we've given our globals:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 GLOBALS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /variable/global/yes/adding built-in memory routines timer//timer/timer/00402000/no/1/no////\line /variable/global/yes/adding bu
ilt-in startup routine timer//timer/timer/0040200C/no/1/no////\line /variable/global/yes/addressing timer//timer/timer/00402018/no/1/no////}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Then jump to the literals and check out their addresses:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 LITERALS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /variable/literal/yes/~L1//number/number/004030AC/no/1/no///01000000/\line 
/variable/literal/yes/~L2//number/number/004030B0/no/1/no///02000000/\line /variable/literal/yes/~L3//number/number/004030B4/no/1/no///03000000/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Then jump to the routines and check out both the entry addresses, and the fragment addresses:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ROUTINES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /routine/abort from/given/with/using [string]/yes/no/no/no//4/12/00419000/\line 
/variable/parameter/yes/string/string/string/string/00000008/no/1/no////\line /variable/scratch/yes/~S7063//flag/flag/FFFFFFFC/no/1/no////\line /variable/scratch/yes/~S7064//flag/flag/FFFFFFF8/no/1/no////\line 
/variable/scratch/yes/~S7065//abort message/abort message/FFFFFFF4/no/1/no////\line /fragment/prolog/////00000000/00419000//\line /fragment/loop/////00000000/0041900D//\line /fragment/load address/compiler/~S7063///00000000/0041900D//\line /fragm
ent/increment/~S7063////00000014/00419019//\line /fragment/push address/~S7063////00000000/00419023//\line /fragment/call internal///[flag] is/are set//00000000/0041902A//\line /fragment/jump false/////00000000/0041902F//\line 
/fragment/exit/////00000000/00419038//\line /fragment/end if/////00000000/0041903D//\line /fragment/load address/compiler/~S7064///00000000/0041903D//\line /fragment/increment/~S7064////00000014/00419049//\line 
/fragment/push address/~S7064////00000000/00419053//\line /fragment/call internal///set [flag]//00000000/0041905A//\line /fragment/load address/compiler/~S7065///00000000/0041905F//\line /fragment/increment/~S7065////00000018/0041906B//\line 
/fragment/push address/~S7065////00000000/00419075//\line /fragment/push address/string////00000000/0041907C//\line /fragment/call internal///put [string] in/into/to [string]//00000000/00419083//\line /fragment/finalize/////00000000/00419088//\line 
/fragment/epilog/////00000000/00419088//}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Finally, jump to "IMPORTS:" (no quotes) and take a peek at both the import and entry addresses we assigned:}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 IMPORTS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /import/user32.dll/\line /entry/DisableProcessWindowsGhosting/004010DC/\line /entry/GetSystemMetrics/004010E0/\line 
/entry/PostMessageA/004010E4/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Sweet. And all that addressing took only... let me see...}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TIMERS:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/loading/16/\line /timer/scanning/437/\line /timer/resolving types/15/\line /timer/resolving globals/110/\line 
/timer/compiling routine headers/281/\line /timer/calculating/0/\line /timer/adding built-in memory routines/62/\line /timer/indexing utilities/79/\line /timer/compiling routine bodies/1437/\line /timer/adding built-in startup routine/31/\line 
/timer/offsetting/0/\line /timer/addressing/32/\line /timer/transmogrifying/0/\line /timer/linking/0/\line /timer/writing/0/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /timer/total/5078/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...32 milliseconds. Zippy!}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Next up: TRANSMOGRIFICATION! Mwa-hah-hah-hah (evil laugh).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 243. The dictionary says }{\rtlch\fcs1 \ai\af0\afs27 \ltrch\fcs0 
\i\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 transmogrify}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
 means "to change completely the nature or appearance of," and that's exactly what we're about to do to each and every one of our fragments. So let's do it. Move the abort line down, reactivate the next step:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line 
Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line Compile the directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line 
Compile the directory (index the routines for utility use).\line Compile the directory (compile the bodies of the routines).\line Compile the directory (add and compile the built-in startup routine).\line 
Compile the directory (offset parameters and variables).\line Compile the directory (address).\line Compile the directory (transmogrify).\line Abort with "I'm not old enough to make babies.".\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\Compile the directory (link).\line \\Compile the directory (write the exe).\line \\Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 244. Then add in these three guys:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par To compile a directory (transmogrify):\line If the compiler's abort flag is set, exit.\line Show status "Mogrifying...".\line Start the transmogrifying timer.\line Transmogrify the routines.\line Stop the transmogrifying timer.
\par \~
\par To transmogrify some routines:\line If the compiler's abort flag is set, exit.\line Get a routine from the routines.\line If the routine is nil, break.\line Transmogrify the routine.\line Repeat.
\par \~
\par To transmogrify a routine:\line If the compiler's abort flag is set, exit.\line If the routine is nil, exit.\line If the routine's employs moniker is not blank, exit.\line If the routine's compiled flag is not set, exit.\line 
Put the routine into the current routine.\line Transmogrify the routine's fragments.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 245. These two routines are the top-level helpers we need:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify some fragments:\line If the compiler's abort flag is set, exit.\line Get a fragment from the fragments.\line 
If the fragment is nil, exit.\line Transmogrify the fragment.\line Repeat.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment:\line If the compiler's abort flag is set, exit.\line If the fragment is nil, exit.\line 
If the fragment's tag is the push address tag, transmogrify the fragment (push address); exit.\line If the fragment's tag is the call internal tag, transmogrify the fragment (call internal); exit.\line 
If the fragment's tag is the load address tag, transmogrify the fragment (load address); exit.\line If the fragment's tag is the increment tag, transmogrify the fragment (increment); exit.\line If the fragment's tag is
 the dereference tag, transmogrify the fragment (dereference); exit.\line If the fragment's tag is the jump false tag, transmogrify the fragment (jump false); exit.\line If the fragment's tag is the not tag, transmogrify the fragment (not); exit.\line 
If the fragment's tag is the exit tag, transmogrify the fragment (exit); exit.\line If the fragment's tag is the repeat tag, transmogrify the fragment (repeat); exit.\line If the fragment's tag is the break tag, transmogrify the fragment (break); exit.
\line If the fragment's tag is the prolog tag, transmogrify the fragment (prolog); exit.\line If the fragment's tag is the epilog tag, transmogrify the fragment (epilog); exit.\line 
If the fragment's tag is the push value tag, transmogrify the fragment (push value); exit.\line If the fragment's tag is the call external tag, transmogrify the fragment (call external); exit.\line 
If the fragment's tag is the load eax tag, transmogrify the fragment (load eax); exit.\line If the fragment's tag is the save eax tag, transmogrify the fragment (save eax); exit.\line If the fragment'
s tag is the call indirect tag, transmogrify the fragment (call indirect); exit.\line If the fragment's tag is the routine address tag, transmogrify the fragment (routine address); exit.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 246. And these 18 guys are the low-level helpers who actually do the transmogrification:
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (break):\line Put the repeat tag into a tag.\line Find another fragment given the fragment and the tag.\line 
If the other fragment is nil, put the finalize tag into the tag. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ for break without a loop or after a loop\line }{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Find a third fragment given the current routine's fragments' last and the tag (backwards).\line 
If the third fragment is nil, abort with "Internal error - transmogrify a fragment (break)"; exit.\line If the third fragment's next is nil, abort with "Internal error 2 - transmogrify a fragment (break)"; exit.\line 
Attach $E9 and the third fragment's next's address to the fragment. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ jmp the destination's address}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (call external):\line Attach $FF15 and the fragment's entry's address to the fragment's code. }{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ call [the fragment's entry's address]}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (call indirect):\line Attach address loading code to the fragment's code given the fragment's variable. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ put address into edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Attach $FF12 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ call [edx]}{
\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (call internal):\line Get an address given the fragment's routine.\line 
Attach $E8 and the address to the fragment. \\}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706  call the fragment's routine's address}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (dereference):\line Attach $8B95 and the fragment's variable's offset to the fragment's code. }{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov edx,[ebp+the fragment's variable's offset]\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Attach $8B12 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov edx,[edx]\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Attach $8995 and the fragment's variable's offset to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov [ebp+the fragment's variable's offset],edx}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (epilog):\line If the current routine's callback flag is set, attach $5F5E5B to the fragment's code. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ pop edi, esi, ebx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Attach $8BE5 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov esp,ebp\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Attach $5D to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ pop ebp\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Attach $C2 and the current routine's parameter size to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ ret the current routine's parameter size}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (exit):\line Find another fragment given the fragment and the finalize tag.\line 
If the other fragment is nil, abort with "Internal error - transmogrify a fragment (exit)"; exit.\line Attach $E9 and the other fragment's address to the fragment. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ jmp the destination's address}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (increment):\line If the fragment's variable is nil, abort with "Internal error - transmogrify a fragme
nt (increment)"; exit.\line If the fragment's variable's kind is not "scratch", abort with "Internal error 2 - transmogrify a fragment (increment)"; exit.\line 
Attach $8185 and the fragment's variable's offset and the fragment's number to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ add 
[ebp+the fragment's variable's offset],the fragment's number}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (jump false):\line Find another fragment given the fragment and the end if tag.\line 
If the other fragment is nil, abort with "Internal error - transmogrify a fragment (jump false)"; exit.\line Attach $83F800 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ cmp eax,0\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Attach $0F84 and the other fragment's address to the fragment. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ je the destination's address}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (load address):\line Attach address loading code to the fragment's code given the fragment's variable. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ put address into edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Attach $8995 and the fragment's other variable's offset to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov [ebp+the fragment's variable's offset],edx}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (load eax):\line Attach address loading code to the fragment's code given the fragment's variable. }{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ put address into edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the fragment's variable is nil, abort with "Internal error - transmogrify a fragment (load eax)"; exit.\line If the fragment's variable's type is nil, abort with "Internal error 2 - transmogrify a fragment (load eax)"; exit.\line 
If the fragment's variable's type's length is not 4, abort with "Internal error 3 - transmogrify a fragment (load eax)"; exit.\line Attach $8B02 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov eax,[edx]}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (not):\line Attach $83F001 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ xor eax,1}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (prolog):\line Attach $55 to the fragment's code. \\ push ebp\line Attach $8BEC to the fragment's code. \\
 mov ebp,esp\line Put the current routine's local size divided by 4 into a number.\line If the number is not 0, attach $B9 and the number and $6A004975FB to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov ecx,number; loop: push 0; dec ecx; jnz loop\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the current routine's callback flag is set, attach $535657 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ push ebx, esi, edi}{\rtlch\fcs1 \af0\afs27 
\ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (push address):\line Attach address loading code to the fragment's code given the fragment's variable. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ put address into edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Attach $52 to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ push edx}{\rtlch\fcs1 
\af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (push value):\line Attach address loading code to the fragment's code given the fragment's variable. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ put address into edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the fragment's variable is nil, abort with "Internal error - transmogrify a fragment (push value)"; exit.\line If the fragment's variable's type is nil, 
abort with "Internal error 2 - transmogrify a fragment (push value)"; exit.\line Put the fragment's variable's type's length into a length.\line If the length is 4, attach $FF32 to the fragment's code; exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ push [edx]\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the length is 2, attach $66FF32 to the fragment's code; exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ push word ptr [edx]\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the length is 1, attach $0FB61252 to the fragment's code; exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ movzxb edx,[edx]; push edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
Abort with "Internal error 3 - transmogrify a fragment (push value)".}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (repeat):\line Find another fragment given the fragment and the loop tag (backwards).\line 
If the other fragment is nil, abort with "Internal error - transmogrify a fragment (repeat)"; exit.\line Attach $E9 and the other fragment's address to the fragment. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ jmp the destination's address}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (routine address):\line Attach address loading code to the fragment's code given the fragment's variable. }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ put address into edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the fragment's routine is nil, abort with "Internal error - transmogrify a fragment (routine address)"; exit.\line Get an address given the fragment's routine.\line 
Attach $C702 and the address to the fragment's code. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov [edx],the address}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To transmogrify a fragment (save eax):\line Attach address loading code to the fragment's code given the fragment's variable. }{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ put address into edx\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the fragment's variable is nil, abort with "Internal error - transmogrify a fragment (save eax)"; exit.\line If the fragment's variable's type is nil, abort with "Internal error 2 - transmogrify a fragment (save eax)"; exit.\line Put the frag
ment's variable's type's length into a length.\line If the length is 4, attach $8902 to the fragment's code; exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov [edx],eax\line }{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 If the length is 2, attach $668902 to the fragment's code; exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov [edx],ax\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If the length is 1, attach $8802 to the fragment's code; exit. }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \\ mov [edx],al\line }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Abort with "Internal error 3 - transmogrify a fragment (save eax)".}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par If you're wondering why we only need 18 fragment transmogrifiers when we have 21 fragment types, it's because 3 of those fragment types don't require transmog
rification. The END IF, LOOP, and FINALIZE tags are just labels that we stick in there (and address) so we have places to jump to.
\par \~
\par 247. Some of the transmogrifiers need a little help from this guy...
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To attach address loading code to a hex string given a variable: \\ loads into edx\line 
If the variable is nil, attach $C7C200000000 to the hex string; exit. \\ mov edx,0\line If the variable's kind is "global", attach $C7C2 and the variable's address to the hex string; exit. \\ mov edx,the variable's address\line If the var
iable's kind is "literal", attach $C7C2 and the variable's address to the hex string; exit. \\ mov edx,the variable's address\line If the variable's kind is "local", attach $8D95 and the variable's offset to the hex string; exit. \\
 lea edx,[ebp+the variable's offset]\line If the variable's kind is "scratch", attach $8B95 and the variable's offset to the hex string; exit. \\ mov edx,[ebp+the variable's offset]\line 
If the variable's kind is not "parameter", abort with "Internal error - attach address loading code to a hex string given a variable"; exit.\line If the variable's by-value flag is set, attach $8D95 and the variable's offset to the hex string; exit. \\
 lea edx,[ebp+the variable's offset]\line Attach $8B95 and the variable's offset to the hex string. \\ mov edx,[ebp+the variable's offset]}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 248. ...and from these five general-purpose helpers:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To attach an hex string and an address to a fragment: \\ call or jump\line Put the address into a number.\line 
Subtract the fragment's address from the number.\line Subtract the fragment's code's length from the number.\line Subtract the hex string's length from the number.\line Subtract 4 from the number.\line 
Attach the hex string and the number to the fragment's code.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To attach a hex string and a number and another hex string to a third hex string:\line Append the hex string to the third hex string.\line 
Convert the number to a fourth hex string.\line Append the fourth hex string to the third hex string.\line Append the other hex string to the third hex string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To attach a hex string and a number and another number to another hex string:\line Append the hex string to the other hex string.\line 
Convert the number to a third hex string.\line Append the third hex string to the other hex string.\line Convert the other number to a fourth hex string.\line Append the fourth hex string to the other hex string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To attach a hex string and a number to another hex string:\line Append the hex string to the other hex string.\line 
Convert the number to a third hex string.\line Append the third hex string to the other hex string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To attach a hex string to another hex string: employ append a string to another string.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
249. Getting a routine's address isn't as simple as it sounds since each routine's header can be worded in different ways, and since a routine may explicitly employ a different routine to do its work. So this helper is needed to deal with all that:}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To get an address given a routine:\line If the routine's address is not 0, put the routine's address into the address; exit.\line 
Put -1 into the routine's address.\line Find another routine given the routine's employs moniker and the routine index.\line 
If the other routine is nil, abort with "I can't find the '" then the routine's employs moniker then "' routine you're trying to employ." and the routine's locus; exit.\line If the other routine's address is -1, abort with "Recursive reference in employ 
clause." and the routine's locus; exit.\line Get the address given the other routine.\line Put the address into the routine's address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 250. We also need these two guys to help us find where to jump to (in various cases):}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a fragment given another fragment and a tag:\line Put the other fragment into the fragment.\line Loop.\line 
If the fragment is nil, exit.\line If the fragment's tag is the tag, exit.\line Put the fragment's next into the fragment.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To find a fragment given another fragment and a tag (backwards):\line Put the other fragment into the fragment.\line Loop.\line 
If the fragment is nil, exit.\line If the fragment's tag is the tag, exit.\line Put the fragment's previous into the fragment.\line Repeat.\line \line }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 251. And that's it. Transmogrification complete. 
Run it. In the blue, open the daughter and list her. Then open the listing and jump to the "ROUTINES:" section. This is what you should see there:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ROUTINES:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 /routine/abort from/given/with/using [string]/yes/no/no/no//4/12/00419000/\line /variable/parameter/
yes/string/string/string/string/00000008/no/1/no////\line /variable/scratch/yes/~S7063//flag/flag/FFFFFFFC/no/1/no////\line /variable/scratch/yes/~S7064//flag/flag/FFFFFFF8/no/1/no////\line 
/variable/scratch/yes/~S7065//abort message/abort message/FFFFFFF4/no/1/no////\line /fragment/prolog/////00000000/00419000/558BECB9030000006A004975FB/\line /fragment/loop/////00000000/0041900D//\line 
/fragment/load address/compiler/~S7063///00000000/0041900D/C7C2402040008995FCFFFFFF/\line /fragment/increment/~S7063////00000014/00419019/8185FCFFFFFF14000000/\line /fragment/push address/~S7063////00000000/00419023/8B95FCFFFFFF52/\line 
/fragment/call internal///[flag] is/are set//00000000/0041902A/E899160300/\line /fragment/jump false/////00000000/0041902F/83F8000F8405000000/\line /fragment/exit/////00000000/00419038/E94B000000/\line /fragment/end if/////00000000/0041903D//\line 
/fragment/load address/compiler/~S7064///00000000/0041903D/C7C2402040008995F8FFFFFF/\line /fragment/increment/~S7064////00000014/00419049/8185F8FFFFFF14000000/\line /fragment/push address/~S7064////00000000/00419053/8B95F8FFFFFF52/\line 
/fragment/call internal///set [flag]//00000000/0041905A/E8117B0500/\line /fragment/load address/compiler/~S7065///00000000/0041905F/C7C2402040008995F4FFFFFF/\line /fragment/increment/~S7065////00000018/0041906B/8185F4FFFFFF18000000/\line 
/fragment/push address/~S7065////00000000/00419075/8B95F4FFFFFF52/\line /fragment/push address/string////00000000/0041907C/8B950800000052/\line /fragment/call internal///put [string] in/into/to [string]//00000000/00419083/E8F8130500/\line 
/fragment/finalize/////00000000/00419088//\line /fragment/epilog/////00000000/00419088/8BE55DC204000000/}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Look at all that lovely machine code on the end of each fragment line! (Except for the LOOP, END IF, and FINALIZE lines, of course).}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Next time, we cram everything we've got into a Portable Executable.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ---}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Coming down the home stretch now. Time to cram everything into a Portable Executable file and finish up.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 252. Let's begin by grabbing the three ugly types we need for Windows:}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 
\f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A dos header is a record with\line A wyrd called signature,\line A wyrd called numberofbytesonlastpage,\line A wyrd called numberofpages,
\line A wyrd called relocuss,\line A wyrd called sizeofheaderinparagraphs,\line A wyrd called minimumextraparagraphs,\line A wyrd called maximumextraparagraphs,\line A wyrd called initialrelativess,\line A wyrd called initialsp,\line A wyrd call
ed initialchecksum,\line A wyrd called initialip,\line A wyrd called initialirelativecs,\line A wyrd called addressofrelocationtableinfile,\line A wyrd called overlynumber,\line 8 bytes called resveredbytes,\line A wyrd called oemidentifier,\line 
A wyrd called oeminfo,\line 20 bytes called reservedwords,\~ \line A number called addressofpeheaderinfile.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A pe header is a record with\line A number called signature,\line A wyrd called machinetype,\line A wyrd called numberofsections,\line 
A number called timestamp,\line A number called pointertosymboltable,\line A number called numberofsymbols,\line A wyrd called sizeofoptionalheaderinbytes,\line A wyrd called characteristics,\line \\ optional header\line A wyrd called magicnumber,\line 
A byte called majorlinkerversion,\line A byte called minorlinkerversion,\line A number called sizeofcodeinfile,\line A number called sizeofinitializeddatainfile,\line A number called sizeofuninitializeddatainfile,\line 
A number called addressofentrypointinmemory,\line A number called addressofcodeinmemory,\line A number called addressofinitializeddatainmemory,\line A number called imagebase,\line A number called memoryalignment,\line A number called filealignment,\line 
A wyrd called osmajorversion,\line A wyrd called osminorversion,\line A wyrd called usermajorversion,\line A wyrd called userminorversion,\line A wyrd called subsystemmajorversion,\line A wyrd called subsystemminorversion,\line A number called reserved,
\line A number called sizeofimageinmemory,\line A number called sizeofallheadersinfile,\line A number called checksum,\line A wyrd called subsystem,\line A wyrd called dllcharacteristics,\line A number called maxstack,\line A number called minstack,\line 
A number called maxheap,\line A number called minheap,\line A number called loaderflags,\line \\ directories (16 address and size pairs)\line A number called numberofdirectories,\line 8 bytes called directory0,\line 
A number called imagedirectoryentryimportaddress,\line A number called imagedirectoryentryimportsize,\line 112 bytes called directories2-15,\line A pe section header called idata section,\line A pe section header called data section,\line 
A pe section header called code section.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 A pe section header is a record with\line 8 bytes called name,\line A number called sizeinbytes,\line A number called addressinmemory,\line 
A number called sizeinfile,\line A number called addressinfile,\line 12 bytes called reserved,\line A number called characteristics.}{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 253.\~Then let's delete the abort line altogether, and activate the the three remaining steps:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory:\line Compile the directory (start).\line Compile the directory (load the source files).\line 
Compile the directory (scan the source files).\line Compile the directory (resolve the types).\line Compile the directory (resolve the globals).\line Compile the directory (compile the headers of the routines).\line 
Compile the directory (calculate lengths and offsets of types).\line Compile the directory (add the built-in memory routines).\line Compile the directory (index the routines for utility use).\line Compile the directory (compile the bodies of the routine
s).\line Compile the directory (add and compile the built-in startup routine).\line Compile the directory (offset parameters and variables).\line Compile the directory (address).\line Compile the directory (transmogrify).\line 
Compile the directory (link).\line Compile the directory (write the exe).\line Compile the directory (stop).}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 254. Then let's add this guy back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (link):\line If the compiler's abort flag is set, exit.\line Show status "Linking...".\line Start the linking timer.
\line Link.\line Stop the linking timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 255. And this guy:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To link:\line Round up borough sizes.\line Initialize a dos header.\line Initialize a pe header.\line 
Fill the compiler's exe with the null byte given the compiler's exe size.\line Blurt the dos header into the compiler's exe.\line Blurt the pe header into the compiler's exe.\line Blurt the imports into the compiler's exe.\line 
Blurt the globals into the compiler's exe.\line Blurt the literals into the compiler's exe.\line Blurt the routines into the compiler's exe.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 256. Now some helpers, starting with this routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To round up borough sizes:\line Put the import borough's length into the import borough's size.\line 
Round the import borough's size up to the nearest multiple of 4096.\line Put the data borough's length into the data borough's size.\line Round the data borough's size up to the nearest multiple of 4096.\line 
Put the code borough's length into the code borough's size.\line Round the code borough's size up to the nearest multiple of 4096.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 257. And let's try not to barf as we add these 9 guys back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a dos header:\line Put 23117 [$5A4D] into the dos header's signature.\line 
Put 64 [$0040] into the dos header's addressofrelocationtableinfile.\line Put 256 [$00000100] into the dos header's addressofpeheaderinfile.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header:\line Initialize the pe header (standard header).\line Initialize the pe header (optional header).\line 
Initialize the pe header (version information).\line Initialize the pe header (directories).\line Initialize the pe header (import section).\line Initialize the pe header (data section).\line Initialize the pe header (code section).}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header (code section):\line Copy bytes from "code\~ "'s first to the pe header's code section's name's whereabouts for 6.
\line Put the code borough's length into the pe header's code section's sizeinbytes.\line Put the code borough's base into the pe header's code section's addressinmemory.\line Put the code borough's length into the pe header's code section's sizeinfile.
\line Put the code borough's base into the pe header's code section's addressinfile.\line Put -536870880 [$E0000020] into the pe header's code section's characteristics. \\ executable, readable, writable, code object}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header (data section):\line Copy bytes from "data\~ "'s first to the pe header's data section's name's whereabouts for 6.
\line Put the data borough's length into the pe header's data section's sizeinbytes.\line Put the data borough's base into the pe header's data section's addressinmemory.\line Put the data borough's length into the pe header's data section's sizeinfile.
\line Put the data borough's base into the pe header's data section's addressinfile.\line Put -1073741760 [$C0000040] into the pe header's data section's characteristics. \\ initialized, readable, writable}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header (directories):\line Put 16 [$00000010] into the pe header's numberofdirectories.\line 
Put the import borough's base into the pe header's imagedirectoryentryimportaddress.\line Put the import borough's length into the pe header's imagedirectoryentryimportsize.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header (import section):\line 
Copy bytes from "idata "'s first to the pe header's idata section's name's whereabouts for 6.\line Put the import borough's length into the pe header's idata section's sizeinbytes.\line 
Put the import borough's base into the pe header's idata section's addressinmemory.\line Put the import borough's length into the pe header's idata section's sizeinfile.\line Put the imp
ort borough's base into the pe header's idata section's addressinfile.\line Put -1073741760 [$C0000040] into the pe header's idata section's characteristics. \\ initialized, readable, writable}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header (optional header):\line Put 267 [$010B] into the pe header's magicnumber.\line 
Put the code borough's length into the pe header's sizeofcodeinfile.\line Put the data borough's length into the pe header's sizeofinitializeddatainfile.\line Put 0 into the pe header's sizeofuninitializeddatainfile.\line Find a routine given 
"~initialize before run and run and finalize after run" and the routine index.\line If the routine is nil, abort with "Internal error: could not find the startup routine"; exit.\line 
Put the routine's address minus the image base into the pe header's addressofentrypointinmemory.\line Put the code borough's base into the pe header's addressofcodeinmemory.\line 
Put the data borough's base into the pe header's addressofinitializeddatainmemory.\line Put the image base into the pe header's imagebase.\line Put 4096 [$00001000] into the pe header's memoryalignment.\line 
Put 4096 [$00001000] into the pe header's filealignment.\line Put 0 into the pe header's reserved.\line Put the compiler's exe size into the pe header's sizeofimageinmemory.\line Put 4096 [section base] into the pe header's sizeofallheadersinfile.\line 
Put 0 into the pe header's checksum.\line Put 0 into the pe header's dllcharacteristics.\line Put 1048576 [$00100000] into the pe header's maxstack.\line Put 16384 [$00004000] into the pe header's minstack.\line 
Put 1048576 [$00100000] into the pe header's maxheap.\line Put 16384 [$00004000] into the pe header's minheap.\line Put 0 into the pe header's loaderflags.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header (standard header):\line Put 17744 [$00004550] into the pe header's signature.\line 
Put 332 [$014C] into the pe header's machinetype.\line Put 3 [$0003] into the pe header's numberofsections.\line Put 0 into the pe header's timestamp.\line Put 0 into the pe header's pointertosymboltable.\line Put 0 into the pe header's numberofsymbols.
\line Put 224 [$00E0] into the pe header's sizeofoptionalheaderinbytes.\line Put 33166 [$818E] into the pe header's characteristics.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To initialize a pe header (version information):\line Put 0 into the pe header's majorlinkerversion.\line 
Put 0 into the pe header's minorlinkerversion.\line Put 4 [$0004] into the pe header's osmajorversion.\line Put 0 [$0000] into the pe header's osminorversion.\line Put 0 into the pe header's usermajorversion.\line 
Put 0 into the pe header's userminorversion.\line Put 4 [$0004] into the pe header's subsystemmajorversion.\line Put 0 [$0000] into the pe header's subsystemminorversion.\line Put 2 [$0002] into the pe header's subsystem.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 258. We'll also be needing this little function-style routine:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To put the compiler's exe size into a size:\line Put 4096 [section base] into the size.\line Add the import borough's size to the size.
\line Add the data borough's size to the size.\line Add the code borough's size to the size.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
259. And we'll be needing all 15 of our "blurt" routines, that mostly just copy bytes (quickly) from our various lists to the right spots in our pre-allocated executable buffer in memory.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt bytes given a pointer and a length and a buffer and an offset:\line Put the buffer's first plus the offset into another pointer.
\line Copy bytes from the pointer to the other pointer for the length.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt a dos header into a buffer:\line Blurt bytes given the dos h
eader's whereabouts and the dos header's magnitude and the buffer and 0.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt some entries into a buffer:\line Get an entry from the entries.\line If the entry is nil, exit.\line 
Blurt the entry into the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt an entry into a buffer:\line Blurt byte
s given the entry's name address's whereabouts and 4 and the buffer and the entry's thunk address.\line Put the entry's name address plus 2 into an address.\line Blurt the entry's name into the buffer at the address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt a fragment into a buffer:\line If the fragment's code is blank, exit.\line 
Put the fragment's address minus the image base into an address.\line Blurt the fragment's code into the buffer at the address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt some fragments into a buffer:\line Get a fragment from the fragments.\line If the fragment is nil, exit.\line 
Blurt the fragment into the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt an import into a buffer:\line 
Blurt bytes given the import's import header's whereabouts and the import's import header's magnitude and the buffer and the import's header address.\line Blurt the import's name into the buffer at the import's name address.\line 
Blurt the import's entries into the buffer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt some imports into a buffer:\line Get an import from the imports.\line If the import is nil, exit.\line 
Blurt the import into the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt a pe header into a buffer:\line Blurt bytes given the pe header's whereabouts and the pe header's magnitude and the buffer and 256.
}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt a routine into a buffer:\line If the routine's compiled flag is not set, exit.\line Blurt the routine's fragments into the buffer.}
{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt some routines into a buffer:\line Get a routine from the routines.\line If the routine is nil, exit.\line 
Blurt the routine into the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt a string into a buffer at an address:\line Blurt bytes given the string's first and the string's length and
 the buffer and the address.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt a variable into a buffer:\line If the variable's compiled flag is not set, exit.\line 
If the variable's type can be reduced to "string", blurt the variable into the buffer (as a string); exit.\line Put the variable's address minus the image base into an address.\line Blurt the variable's data into the buffer at the address.}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt a variable into a buffer (as a string):\line Put the variable's address minus the image base into an address.\line 
Put the variable's data's length into a length.\line Put the address into another address.\line Add a prototype string's magnitude to the other address.\line Add the image base to the other address.\line Put 0 into the prototype string's first.\line 
Put -1 into the prototype string's last.\line If the length is not 0, put the other address into the prototype string's first.\line If the length is not 0, put the prototype string's first plus the length minus 1 into the prototype string's last.\line 
Blurt bytes given the prototype string's whereabouts and the prototype string's magnitude and the buffer and the address.\line Add the prototype string's magnitude to the address.\line Blurt the variable's data into the buffer at the address.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To blurt some variables into a buffer:\line Get a variable from the variables.\line If the variable is nil, exit.\line Blurt the variabl
e into the buffer.\line Repeat.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 At this point we've got a complete executable sitting in our buffer in memory, and we're done with the "link" step.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 260. On to the next step; add this guy back in:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (write the exe):\line If the compiler's abort flag is set, exit.\line Show status "Writing...".\line 
Start the writing timer.\line Write the compiler's exe to the compiler's exe path.\line If the i/o error is not blank, abort with the i/o error.\line Stop the writing timer.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 261. And finally, this guy:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 To compile a directory (stop):\line Stop the compiler's timer.\line Show status "".}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
262. almost there; just one little clean-up: At the top of the file there are two comments that got double-commented when we commented out the whole file way back when. Change those\~double-backslashes\~to just single ones.}{\rtlch\fcs1 \af0\afs24 
\ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs36 \ltrch\fcs0 \f0\fs36\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 TA DA! We did it! A complete Plain English compiler written entirely in Plain English.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 263. Run it. In the blue, open the SON's directory\~up, and copy his now-complete compiler file to the clipboard (select the file, then hit
 CTRL-C). Then open the daughter's directory\~and paste (CTRL-V) to overwrite the genetically defective compiler file she's got now, so she'll also be able to reproduce in the future. Then open up and find this line in the daughter's Desktop file...}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the lightest sky color into the desktop color.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 ...and change it to read:}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 

\par \~
\par }{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Put the pink color into the desktop color.}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Run it. Congratulations! It's a girl! And you now have three healthy generations of the CAL running.\~ALT-TAB to see them all in a bunch.}{
\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
If you want to see the third-generation Portable Executable we just generated, open the daughter's directory, find the ".exe" in there, and open it (as a dump). There she is (a real "binary beauty") starting with the lovely DOS header:}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af2\afs24 \ltrch\fcs0 \f2\fs24\cf12\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 00000000\~ 4D 5A 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ MZ..............\line 00000010\~
 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00\~ ........@.......\line 00000020\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 00000030\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00\~ ................\line 00000040\~
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 00000050\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 00000060\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 00000070\~
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 00000080\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 00000090\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 000000A0\~
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 000000B0\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 000000C0\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 000000D0\~
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 000000E0\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................\line 000000F0\~ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\~ ................}{\rtlch\fcs1 
\af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\cf2\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 And that's all I have to say about that. Questions?}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 
\f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par \~
\par }{\rtlch\fcs1 \af0\afs27 \ltrch\fcs0 \f0\fs27\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 Gerry}{\rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f0\fs24\lang1033\langfe1041\langnp1033\insrsid14897706\charrsid14897706 
\par 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \lang1033\langfe1041\langnp1033\insrsid14897706\charrsid12984221 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b0304140006000800000021003bce2a59b3060000b51b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594d6f1b4518be23f11f467b6f6d27761a4775aad8b11b68d346b15bd4e37877bc3bcdecce6a669cd437d41e9190100571a012370e
08a8d44a5cca899f12288222f52ff0ceccee7a27de34491b4105cda1f5ce3eeff7c7bc337bf9cabd98a17d2224e549c76b5cac7b88243e0f681276bc5ba3c185
550f49859300339e908e3723d2bbb2fefe7b97f19a8a484c10d027720d77bc48a974ad56933e2c637991a7248177132e62ace05184b540e003e01bb3da52bdbe
528b314d3c94e018d88e8006051cdd9c4ca84fbcf59c7d9f818c4449bde03331d4cc4946d397bea0ea972782724310ec35344cce648f09b48f59c70371013f18
917bca430c4b052f3a5eddfc79b5f5cb35bc961131750c6d896e60fe32ba8c20d85b323245382e843606cdf6a5cd82bf0130b588ebf7fbbd7ea3e06700d8f7c1
5cab4b996773b0dae8e63c4b20fb739177afdeaa375d7c89fff282ceed6eb7db6a67ba58a606647f3617f0abf595e6c6928337208b6f2de09bdd8d5e6fc5c11b
90c5af2ce00797da2b4d176f4011a3c9de025a077430c8b8179009675b95f05580afd633f81c05d950a4981631e1897a65c2c5f82e1703406934c38a2648cd52
32c13e64740fc76341b19682d7082ebdb14bbe5c58d202914eea5475bc0f530cd531e7f7f2d9f72f9f3d4187f79f1edeffe9f0c183c3fb3f5a460ed5164ec232
d58b6f3ffbebd1c7e8cf27dfbc78f845355e96f1bffdf0c9af3f7f5e0d841a9aabf3fccbc7bf3f7dfcfcab4ffff8ee61057c43e071193ea23191e8063940bb3c
06c38c575ccdc9589c8d6214615aa6d848428913aca554f0efabc841df98619645c7d1a34b5c0fde16d043aa8057a7771d858791982a5a21f95a143bc06dce59
978b4a2f5cd3b24a6e1e4d93b05ab8989671bb18ef57c9eee1c4896f7f9a4207cdd3d231bc171147cd1d86138543921085f43bbe47488575772875fcba4d7dc1
259f287487a22ea6952e19d1b1934d73a22d1a435c66553643bc1ddf6cdf465dceaaacde24fb2e12aa02b30ae54784396ebc8aa70ac7552c47386665875fc72a
aa527238137e19d7970a221d12c6513f205256d1dc14606f29e8d730b4adcab06fb359ec2285a27b553caf63cecbc84dbed78b709c5661873489cad80fe41ea4
28463b5c55c1b7b95b21fa19e2809363c37d9b1227dc2777835b3474549a27887e331515b1bc4ab893bfc3199b60625a0d7476a757c7347955e366143ab79570
7e8d1b5ae5f3af1f55e8fdb6b6ec0dd8bdaa6a66eb48a33e0e77b43df7b808e8dbdf9d37f134d92150108b5bd4bbe6fcae397bfff9e67c5c3d9f7f4b9e776168
d07a16b1d3b699bde3578fde13cad850cd18b92ecdf42d61030a06b0a889cd119414e7b134829fba9c418a830b0536344870f51155d130c2294cee0d4f330965
c63a9428e5128e8d66b992b7c6c3f4afeca1b3a58f23b67d48acb679609797f5727eea28d818ad4273becd052d6b06a715b67c29630ab6bd8eb08656ead4d21a
4635d3191d6985c9dac5e68c0e2e2f4c83c5c29b30d9209887c0cb2b7009a045c38907331268bfdb18e561315138cf10c90807248b91b67b31460d13a43c5716
0cd176d864d047c813bc5692d6d66cdf40da69825416d73c465c1ebd3789529ec1f32801b7a3e5c8927271b2041d74bc766ba9e5211fa71d6f028765f819a710
75a98749cc42b87df295b0697f62319b2a9f47b39d1be61641032e41acdf170c76fa402aa4dac432b2a9615e6529c0122dc9eabfd402b79e970115dde8745a2c
af4232fc6b5a801fddd092c984f8aa1cecd28af69d7dcc5a299f2a2286517080c66c2a7631845fa72ad8135009771ea623e807b8a5d3de36afdce69c155df96e
cce0ec3a666984b376ab4b34af640b370da9d0c13c95d403db2a7537c69ddd1453f2e7644a398dff67a6e8fd04ae2096031d011fee8a0546ba523a1e172ae2d0
85d288fa0301d383e91d902d70d30baf21a9e0c6dafc2fc8befedfd69ce561ca1a4e926a97864850d88f542408d981b664b2ef04668d6cefb22c59c6c8645449
5d995ab5c7649fb091ee812b7a6ff75004a96eba49d6060cee68feb9cf59058d433de494ebcde964c5de6b6be09f9e7c6c3183516e1f36034deeff42c5623c98
efaa96de90e77b6fd910fd623e6635f3aa0061a5ada09d95fd6baa70c6add676ac058b975ab97210c5458b61b1188852b84842fa1fd8ffa8f099fdf8a137d411
df85de8ae0338666066903597dc10e1e483748bb3886c1c92eda64d2acac6bb3d1497b2ddfaccf79d22de41e71b6d6ec34f13ea3b38be1cc15e7d4e2793a3bf3
b0e36bbb76acab21b2474b149626f969c604c67c372b7fd8e2e3bb10e84df87030654a9a64822f5602c30c3d347500c56f251ad2f5bf010000ffff0300504b03
04140006000800000021000dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e7265
6c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae99571
9ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f1
9b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d001400
0600080000002100e9de0fbfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014
000600080000002100a5d6a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d001400060008000000
21006b799616830000008a0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b0102
2d00140006000800000021003bce2a59b3060000b51b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c
504b01022d00140006000800000021000dd1909fb60000001b0100002700000000000000000000000000bd0900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000b80a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e500000000000000000000000050a5
bbd58bc9d601feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}