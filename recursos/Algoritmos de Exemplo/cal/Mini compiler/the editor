A statement is a thing with a number and a string.

The command is a string.
The statements are some statements.


To run:
Start up.
Clear the screen.
Set up the console.
Write "HELLO, I'M READY. ENTER Q OR QUIT WHEN YOU'RE DONE" on the console.
Loop.
Clear the command.
Write "> " on the console without advancing.
Read the command from the console.
Slap a rider on the command.
Move the rider (simple rules).
If the rider's token is "q" or "quit", break.
If the rider's token is numeric, add or change or delete a statement using the rider; repeat.
If the rider's token is "clear", clear the statements; repeat.
If the rider's token is "list", list the statements; repeat.
If the rider's token is "load", load the statements using the rider; repeat.
If the rider's token is "renumber", renumber the statements; repeat.
If the rider's token is "run", run the statements; repeat.
If the rider's token is "save", save the statements using the rider; repeat.
Write "I DON'T KNOW HOW TO DO THAT" on the console.
Repeat.
Destroy the statements.
Shut down.


To move a rider (simple rules):
Skip any leading noise in the rider's source.
Position the rider's token on the rider's source.
Loop.
If the rider's source is blank, exit.
If the rider's source starts with """", move the rider (simple rules - string literal);
exit.
Bump the rider.
If the rider's source's first's target is noise, exit.
Repeat.

To move a rider (simple rules - string literal):
Bump the rider.
If the rider's source is blank, exit.
If the rider's source starts with """", bump the rider; exit.
Repeat.

To clear the statements:
Destroy the statements.

To set up the console:
Make a box 8 inches by 6 inches. Center the box on the screen.
Put the box into the console's box.
Indent the box 1/4 inch.
Put the box into the console's text's box.
Put the green color into the console's border color.
Put the black color into the console's fill color.
Put the dark green color into the console's text's pen.
Put "osmosian" and 1/4 inch into the console's text's font.

To add or change or delete a statement given a rider:
Convert the rider's token to a number.
Find the statement using the number.
If the statement is not nil, remove the statement from the statements; destroy the statement.
Skip any leading noise in the rider's source. If the rider's source is blank, exit.
Allocate memory for the statement. Append the statement to the statements.
Put the number into the statement's number.
Put the rider's source into the statement's string.
Uppercase the statement's string.
Sort the statements.

To sort some statements:
If the statements' first is the statements' last, exit.
Split the statements into some left statements and some right statements.
Sort the left statements.
Sort the right statements.
Loop.
Put the left statements' first into a left statement.
Put the right statements' first into a right statement.
If the left statement is nil, append the right statements to the statements; exit.
If the right statement is nil, append the left statements to the statements; exit.
If the left statement's number is greater than the right statement's number, move the right statement from the right statements to the statements; repeat.
Move the left statement from the left statements to the statements.
Repeat.

To find a statement given a number:
Void the statement.
Loop.
Get the statement from the statements.
If the statement is nil, exit.
If the statement's number is the number, break.
Repeat.

To list some statements:
Get a statement from the statements.
If the statement is nil, break.
List the statement.
Repeat.

To list a statement:
Convert the statement's number to a string.
Zero fill the string using 4.
Write the string then " " then the statement's string on the console.

To renumber some statements:
Put 10 into a number.
Loop.
Get a statement from the statements.
If the statement is nil, break.
Put the number into the statement's number.
Add 10 to the number.
Repeat.

To load some statements given a rider: \ file-name
Destroy the statements.
Extract a directory from the module's path.
Put the directory then the rider's source then ".txt" into a path.
Read the path into a buffer.
If the i/o error is not blank, write the i/o error on the console; exit.
Slap a file rider on the buffer.
Loop.
If the file rider's source is blank, break.
Move the file rider (text file rules).
Slap a line rider on the file rider's token.
Move the line rider (simple rules).
Convert the line rider's token to a number.
Allocate memory for a statement. Append the statement to the statements.
Put the number into the statement's number.
Put the line rider's source into the statement's string.
Trim the statement's string.
Uppercase the statement's string.
Repeat.
Sort the statements.

To save some statements given a rider: \ file-name
Loop.
Get a statement from the statements.
If the statement is nil, break.
Append the statement's number then " " then the statement's string to a buffer.
Append the crlf string to the buffer.
Repeat.
Extract a directory from the module's path.
Put the directory then the rider's source then ".txt" into a path.
Write the buffer to the path.
If the i/o error is not blank, write the i/o error on the console.

