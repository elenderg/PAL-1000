Uma etiqueta é uma tag. \já existe o termo label, então tag-não-pode ser etiqueta, an-não-ser que label vire marcador.
\Uma etiqueta é um número.
Uma etiqueta de carregamento eax é uma etiqueta.
Uma etiqueta de desreferência é uma etiqueta.
Uma etiqueta de endereço de carregamento é uma etiqueta.
Uma etiqueta de endereço de rotina é uma etiqueta.
Uma etiqueta de endereço push é uma etiqueta.
Uma etiqueta de epólogo é uma etiqueta.
Uma etiqueta de finalização é uma etiqueta.
Uma etiqueta de finalização condicional é uma etiqueta.
Uma etiqueta de incremento é uma etiqueta.
Uma etiqueta de loop é uma etiqueta.
Uma etiqueta de prólogo é uma etiqueta.
Uma etiqueta de quebra é uma etiqueta.
Uma etiqueta de repetição é uma etiqueta.
Uma etiqueta de saída é uma etiqueta.
Uma etiqueta de salto falso é uma etiqueta.
Uma etiqueta de salvar eax é uma etiqueta.
Uma etiqueta de valor push é uma etiqueta.
Uma etiqueta externa de chamada é uma etiqueta.
Uma etiqueta indireta de chamada é uma etiqueta.
Uma etiqueta intel é uma etiqueta.
Uma etiqueta interna de chamada é uma etiqueta.
Uma etiqueta-não é uma etiqueta.


\A silent flag é um flag.


\The break tag is a tag equal to 1. \ generates an unconditional jump to a specified address
\The call external tag is a tag equal to 2. \ generates a call to a DLL (in our case, this would be a call to a routine in ROM)
\The call indirect tag is a tag equal to 3. \ generates a call to an address known only at run-time, used to start up a compiled program when the Run command is invoked
\The call internal tag is a tag equal to 4. \ generates a call to a specified address
\The dereference tag is a tag equal to 5. \ converts a pointer's address into the address of the thing the pointer is pointing at
\The end if tag is a tag equal to 6. \ just a label for addressing purposes; does not generate code
\The epilog tag is a tag equal to 7. \ generates pops and a register copy to reset the stack frame, followed by a return statement
\The exit tag is a tag equal to 8. \ generates a jump to a specified address
\The finalize tag is a tag equal to 9. \ just a label for addressing purposes; does not generate code
\The increment tag is a tag equal to 10. \ generates code to convert a record address into a field address; really just an add with an immediate operand
\The intel tag is a tag equal to 11. \ copies machine code described in hex in the source
\The jump false tag is a tag equal to 12. \ generates code to compare a flag, and a jump if the flag is zero
\The load address tag is a tag equal to 13. \ generates code to put the address of a variable into a register
\The load eax tag is a tag equal to 14. \ generates code to put the address of a variable into the EAX register (EDX is normally used for addresses)
\The loop tag is a tag equal to 15. \ just a label for addressing purposes; does not generate code
\The not tag is a tag equal to 16. \ generates code to XOR the flag value in the EAX register
\The prolog tag is a tag equal to 17. \ generates a push and a register copy to reset the stack frame, followed by a little loop to make room on the stack for local variables, initialized to zero
\The push address tag is a tag equal to 18. \ generates code to push a variable's address on the stack
\The push value tag is a tag equal to 19. \ generates code to push a variable's value on the stack; only used for calls to Windows routines that require it
\The repeat tag is a tag equal to 21. \ generates a jump to a specified address
\The routine address tag is a tag equal to 22. \ generates code to put a routine address known only at run time into the EDX register; only used for Windows callbacks
\The save eax tag is a tag equal to 20. \ generates code to copy either 8, 16, or 32 bits from the EAX register to a variable; only used to get return values from Windows
 