
i didn't know you had hashtables. i'll look at the indices. if you don't have trees, are you just
doing a lot of list walking? isn't that a bit slower? do you keep your lists sorted? i guess things
are operating fast enough. if performance becomes an issue, would that be grounds for adding a
faster access structure? have i started this missive off on a sour note?

\ Aunt Tilly says, "Don't bother [with registers]. It's all superfluous."

my comment on registers is based on your comment on registers, where you lamented that compiling
Plain English to a pure stack-based architecture would be difficult, and you opined that perhaps adding
a register or two to the mix would be worthwhile for the added simplicity. so Aunt Tilly might have
spoken a lesson to me, but she definitely gave you a raised eyebrow!

\ Sure. Show the kid how to implement that "Guess what I'm thinking of" game with a tree structure
\ for educational purposes. But don't drag them into compilers, which are difficult enough,
\ and can work just fine, without them.

so i get confused by what you want to be simple enough to explain to a 12 year old. i don't think
there's any way to explain a full system (hardware, operating system, peripherals, protocols, etc)
to anyone and have them understand it in one sitting. if you mean discrete parts at a time, then
i understand that. and i think using a tree just makes more sense, because you get hierarchy that
makes code generation a lot easier. i'm not arguing that they're necessary, but they definitely
make it easier to maintain context.

\ But isn't "vm simulator" TWO steps removed from where we want to be?
\ REAL MACHINE -> (1) VIRTUAL MACHINE -> (2) SIMULATED VIRTUAL MACHINE

so the idea behind a simulated virtual machine in CAL is that it's actually a virtual machine, but
with easy introspection. it's a way to test the compiled output without actual hardware. also, it's
a way to write a virtual machine in the CAL (instead of in C, which i figured you wanted). i've
still been writing little example programs in C, so this is more an attempt to force myself to use
CAL. i just don't like programming in windows. my mouse moves funny, the keyboard isn't as
responsive, and the screen locks up from time to time. but until i get my act together, windows
is where i'm stuck for interfacing with the CAL.

\ Regarding the Instruction Set you sent, I'm confused.

it actually took me a long time to put that little diagram together, so i stopped when i was tired.
it was more of a check-in. it's not a finished (or even a nearly complete) draft. sorry about the
confusion. while putting it together, i was reading (and learning) more about forth and the forth
vm. i recall your mentioning you modeled CAL after forth, right? or am i misremembering?
modeling the CAL hardware on a modified forth chip would be a good starting place. and targeting
the forth vm with a custom noodle would also be a good way to test full stack-based programming. 

i'm anticipating the instruction set to have all the necessary instructions that the forth instruction
set has. and i like the idea of having a top-of-stack register. the POP omission was definitely an
oversight. yes, there will be POPs aplenty. and whatever else we need. i'll update the document.

peace,
mo