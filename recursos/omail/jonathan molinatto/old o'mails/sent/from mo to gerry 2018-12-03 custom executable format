okay, okay. i think i am coming to understand that you don't want to define any executable headers
or file formats. i can somewhat understand that. you, however, have a lot more experience with
compiling by hand and getting CAL and Plain English running than i do. i had offered to try to get
CAL's honest face on mac or linux, and you have somewhat persuaded me that getting a minimal
system that is custom-built for CAL is a good goal. so i'm looking into that, because you've also
convinced me that reading through the ELF manual to try to get CAL on linux might not be completely
worthwhile. 

i'm afraid i'm trying to run before i even walk. i believe i said something like this a week ago. i really
need someone to keep pulling me back from wandering off cliffs. perhaps just some discipline. ugh;
adulting is hard.

\ The operating system should be in ROM, where it is safe.

that's a fair piont.

\ DOS and the original Mac had no protections against "rogue shellcode," and we got lots done with them.

i don't disagree with this point. i'd argue that the current hellscape of hackers and nation-state actors
makes net-connected computers somewhat less safe nowadays. 

\ Dragging that baggage into this project will do nothing but complicate it. And since the goal of
\ this project is extreme simplicity, I don't think that's a good idea.

this is another fair point. solve the problems that are immediately facing me and not the ones i
anticipate facing. so many cliffs.

\ Well, then, Redbox is is trouble, because Windows 7 is hardly "bulletproof". Yet there it is.

a fair point there, too. i'd argue that windows 7 has been hardened considerably more than you
are proposing. i'll admit that i jumped the gun on the security requirements, but it's worth at
least a mention.

\ Ah, yes. But what do we mean by better? Better in EVERY way? Impossible.
\ O'mail is better than eMail in some ways, worse in others. It's easier to implement, manage, and explain,
\ and can be used with just the CAL; a good thing, consistent with what we're trying to prove.
\ O'mail is not secure at all, yet it is working, and we're communicating handily with it.

something like O'mail works until someone comes along who is not trustworthy. perhaps it's because
my kids are still so young, but i'm hyper-conscious of betrayal and neer-do-wells. my oldest is five
and still inherently trusting. i'm not looking forward to having to explain betrayal to him.

\ Or we can sacrifice security in the interest of simplicity.

we might not get many customers that way. it might just become an academic tool.

\ The data goes wherever the compiler-writer decides to put it. Maybe he puts it all in one place, or
\ maybe he puts it at the end of each routine; or even at the beginning of each routine preceded by a jump.
\ We don't want to dictate these things. We want the future compiler-writer to be free to decide.
\ With a minimal framework like this, Dan and I could have designed (and implemented) several workable
\ schemes for the CAL in way less time than it took us to find and digest the PE format rules.
\ Nobody should EVER have to read goofy documents like that! C'mon, honestly, how do you really feel
\ about having to digest all that ELF documentation before you can even think about making the CAL
\ generate a Linux-compatible executable?

i think the ELF and PE formats are more complex than is strictly necessary. and that they lose a lot
in the way of security by having so many moving pieces. a wall is harder to break into than a door.
however, some flexibility is nice. and, for the sake of argument, if i were the compiler writer, i'd want to
get some opinions from the language developers (you) and other experts (also you).


\ Well, we're brainstorming at this stage. We call it "spiraling" - considering each alternative, then re-considering
\ each alternative, etc, until we finally "zero in" on the best alternative.

yeah, i definitely feel like i'm "spiraling" here. i just gotta get this glider under control before i get too low.

so at a minimum, i'd probably target the same instruction set (or proper subset thereof) that you used
from intel. except, since it's stack-based, the register stuff would go away. so addition, subtraction,
memory store, memory load, conditional jump, bit-wise AND/OR/XOR, test/compare. probably a couple more.
that seems pretty minimal. i'm still early in the stack book. i'll probably write a basic stack machine
based on the book in Plain English/CAL. once i have it in CAL, i'll see if i can work with you on
porting the compiler to that architecture. thoughts?

peace,
mo