\ Hi, Lope.

\ I'm in blue, you're in black, as usual.

A google translated version of CAL is still way better than what programmers are doing right now, programming using an alien language (e.g., pick any programming language).

\ If you can get them to use it. If Google's translations are not accurate, THEY will sound alien to native speakers.

Yes, [an Ilongo compiler is] a good prospect. I heard that over there they are teaching using Ilongo in the early grades; call it national pride.

\ National pride, I think, would work for us in this case. (It sure works for Trump!)
\ I can easily picture native Ilongo speakers favoring Ilongo-CAL over any other language simply because it's their own.

How much knowledge about compilers do I need to do a CAL translation? I don't think it's that much, but I could be wrong.

\ You need to know how the CAL works, but that's all.
\ Most of the stuff in standard compiler books you don't need to know.
\ The CAL compiles the simple and direct way.

Were you using C++ in your original iteration of CAL-0001? Or was he made of assembly code?

\ Neither. The original CAL was written in a Pascal-like language that we wrote using Delphi Pascal.
\ It was basically Pascal without all the annoying semicolons.
\ The CAL-1000  did just enough so we could stop using Delphi. Since then, all the CALs have been created with former CALs.

After that, it became a compiler itself so it didn't need an external compiler like Visual Studio or such. Such an awesome feat.

\ Yes, thanks. But it's really nothing special; all "real" languages are made this way.

Now, if I want to improve on CAL for the functions that I think it should have, maybe I need to study more about compilers.

\ Actually, to improve the CAL with new functionality you need to know more about Windows than compilers.
\ This is because additional libraries (ie, "noodles") mostly just provide a natural-language interface
\ to Windows DLL functions by "wrapping them up." This Noodle routine, for example...

\ To beep: 
\ Call "user32.dll" "MessageBeep" with 0.

\ ...wraps up the Windows "MessageBeep" function so the Plain English programmer can call it simply by writing "Beep."
\ And this Noodle routine...

\ To draw a spot with a color:
\ Convert the color to a colorref.
\ Call "gdi32.dll" "SetPixelV" with the current canvas and the spot's x and the spot's y and the colorref.

\ ...wraps up Windows "SetPixelV" function so the Plain English programmer can say things like "Draw the spot with the red pen."
\ Note that this one was more complicated than "Beep".
\ We needed to convert the color to a different representation, and
\ we had to pass a previously initialized global variable (the current canvas), as well.
\ Some of them get pretty complicated because Windows is a goofy thing.

It won't have to [know how to interpret CSS or HTML or JavaScript, etc].

\ Are you sure? See below.

CAL will not be another browser. We got enough of those.

\ Fine with me.

CAL will get additional features via another function file like "Noodle".

\ Yes, that's exactly how we intended it to gain new functionality.

It can be taught [to INTERPRET what it finds on the Web], no?

\ Only if you want to teach it how to interpret CSS and HTML and JavaScript, etc
\ because that's what's out there on the Web.

Once it has these capabilities, it can produce proper web documents (just another type of text document).

\ Sure, the CAL can be taught to write any kind of text file.

We don't have to see the brackets and stuff the document is made of (just like we don't look at the bytes that the executable produced from CAL).

\ True, you can teach the CAL to generate CSS and HTML and JavaScript text files.

This Web-enhanced CAL can produce things that look pretty, too.

\ I'm not sure what that means.
\ The CAL already produces pretty things, for example:
\ (a) the CAL himself;
\ (b) our Instruction manual with each topic exactly filling a single page;
\ (c) other PDFs we're created with the CAL. See, for example, the seven books here: http://www.rhymingreader.com/

Okay, if you don't want to go this [web] route, that's fine. This can be a future project of mine or someone else.
I just thought that this could be a great killer app, like Excel was -- or, in the very beginning, B.A.S.I.C.-- for Microsoft.

\ I'm still not sure you understand the difference between a web page and a program.
\ Google Chrome is a real program; on Windows it is a stand-alone Windows Portable Executable, like the CAL.
\ Google's search page is not a real program; it cannot run on Windows by itself; it is a bunch of CSS and HTML and JavaScript text
\ that is interpreted by Google Chrome (or some other browser) and that makes calls to
\ real programs running on Windows or Linux servers.

A python interpreter has been written using python. Python just wasn't designed to be used primarily as a compiler as CAL is. 
Like most other languages, Python's pretty much Turing complete.

\ The "Brainfuck" language is also Turing complete. That doesn't mean it's useful.
\ Python may be useful, but it's clear that the developer(s) of Python felt they needed something
\ more "real" or "manly" to develop and to enhance it since they never switched to a Python-only
\ way of doing business.

I'm glad [the CAL] starts [as a stand-alone Windows application].
It can grow in its scope though. Before CAL just knew English. Now, it's Spanish and, soon, other languages. 
Why can't CAL interpret and write other programming languages too?

\ It can, but it would be a nightmare.
\ The Windows functions we call, and the tiny subset of Intel's x86 instruction set that we use,
\ have not changed AT ALL in the last 12 years. During those same years, 
\ CSS, HTML, JavaScript, etc, have changed many times.
\ It's hard to hit a moving target, and I, for one, have no desire to try to keep up
\ with the latest brainstorms of people who design ugly things like CSS, HTML, JavaScript, etc.

Right now, web servers understand only those other languages so this is the only route to go for connectivity.

\ You and I are connected, right now, and we're not using those languages.

Perhaps you and I come from different backgrounds in programming.

\ It would seem so.

For me, there is nothing more complex than assembly code.

\ It's not as difficult as you might think.
\ Intel's instruction set is exceptionally large and ugly, but not all assembly code is like that.

You seem to be saying that text files having "<" or ">" symbols in them are complicated.

\ No, just huge and ugly and unstable.
\ The latest HTML standard I could find has 1228 pages in it!
\ The EBNF definition of Plain English fits on less than 3 pages.
\ A entire list of the Intel x86 instructions we use fits on 1 page.
\ The Windows stuff we use is bulkier, but at least it doesn't change.

[I picture the "WebCAL" putting out] text files.

\ Okay, Give me an example. Here's a trivial Plain English program:

\ To run:
\ Start up.
\ Clear the screen.
\ Say "Hello, World!" and wait.
\ Shut down.

\ The regular CAL takes that in and puts out a Windows executable that will run on any Windows/x86 machine.
\ Exactly what's in the text file the "WebCAL" puts out? What does one do with it?

That's great but if you count worldwide computer (including smart phone) usage, the use of connected/portable devices beat the rest by an increasing margin.

\ No doubt. But that's a different KIND of thing altogether. Those are CONSUMER devices, not PRODUCER devices.
\ The people designing the circuits for those devices, and writing the code that runs on those devices
\ are more likely than not sitting at desktop computers with real mice and real keyboards.

The current Windows iteration is very unlike the old unconnected Windows 3.0, or DOS.

\ The tiny part we use has been the same since Windows XP.

Windows 10 is its predecessor's natural reincarnation and you can still see snippets of the original.

\ Not just snippets; the whole CORE is still there, and that's why the CAL still runs today.

[The "WebCAL"] can access the WEB, like it does now, and it will know what to do with it.

\ When you say, "Know what to do with it" I think you mean, 
\ "will know how to interpret CSS, HTML, JavaScript and anything else that folks put in their web pages."
\ That's a BIG job.
\ Go to Google, right click, then select the "View page source" command.
\ Exactly what do you want the CAL to do with THAT?

If [a condition] or [other condition] is nested for you, I'll try to see how I can avoid that.

\ No, that's a COMPOUND condition. The earlier one...

\ If each task is equally hard;
\   If each task is equally easy:
\   Take pick randomly.

\ ...was nested, and reads more like an "and" than an "or"

For me the hardest is knowing how a compiler does its job.

\ Last year I started to write a book about how the CAL works.
\ It's a draft, and unfinished, but I put it in your mailbox anyway.
\ I found, trying it out on various people, that after page 13 it was best to just
\ comment out the CAL's compiler and then wake it back up, one step at a time.
\ Unfortunately, those lessons (there are a lot of them) are in normal email, not o'mail.
\ It's not difficult stuff, but it is very tedious.
\ If, after reading the draft I just mentioned, you'd like to go through the whole thing with me, just let me know.

This service you mentioned merely ran CAL off a remote computer. It's sluggish.
This is not what I mean by getting CAL more connected. 
Just extend CAL's capabilities on the Web more.

\ I'm still exactly not sure what that means.

We'll work on this after the [human language] translation(s).
I'd like to do something you would be happy with so let's translate to some (Italian or Tagalog or Hiligaynon or all three) languages,
and then we'll also do the other things.

\ Okay, but you're going to have to get to know the CAL better.
\ Let me know what you think after you read that draft PDF I mentioned above.

\ Gerry


