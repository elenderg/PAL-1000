\ I suspect that you said, "Plain English," rather than "the CAL," because you know how hard it would be to
\ connect an FPGA to all the things the CAL assumes are there: 4 gigs of RAM, a file system, a display,
\ a keyboard, a mouse, etc.

i actually meant the CAL. i don't know how peripherals will work on the fpga board. but if you
(we) wanted hardware that is strictly compatible with the CAL, then the fpga route is a good interim
solution. if we're going to target intel without windows, then that's fine, too. we'd just have to
build up the pieces of a Plain English kernel and loader. doing graphics on a bare system shouldn't
be too difficult. it's made harder by linux and windows, because they need to support a wide
variety of potential configurations. it's easier on mac, because they control the hardware.

\ I'm not sure how a virtual system would serve us.

if we're targeting intel/x86, then getting it running in a virtual machine would be one of the
first hurdles to overcome. i just meant as an intermediary, so we could iron out some bugs. if
any show up.

\ Yes, but hardware with the kind of capabilities readily available today. I can get 64 gigabytes of memory
\ on a flash drive for about 2 bucks; it should be easy to get just 4 gigs of memory on my FPGA machine, yes?
\ I can get a USB keyboard and mouse for $14; will I be able to hook them up to my FPGA machine?
\ I can get a 19-inch monitor with millions of colors for under $100; will I be able to use that on my FPGA machine?
\ I can get a nice ink-jet printer for $39; will I be able to use that with my FPGA machine?
\ If the answeres to all those questions is, "yes," I think we'd have a prototype worthy of some venture capital.

so the fpga machine is meant as an interim solution. i'd design some hardware and "print" it to the fpga.
then, once it's working and stabilized, we build some custom chips. isn't that how it generally happens?

peace,
mo