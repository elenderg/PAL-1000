after reading your last message and thinking through the hardware and software requirements, i just
bought an fpga development board. i've wanted to grab one for a while, but i had no project driving
the learning. now i have one! (kind of...)

\ I'm not surprised.

not surprised that i've done it before or not surprised that i'd like to do it again? both? meh, i
just like learning and developing new skills.

have you done any operating system development in Plain English? i've taken an os/kernel class,
but i've never actually developed one. i've written linux kernel code; i've written minix kernel code;
i've even written windows kernel-driver code. but i've never created an os/kernel.

\ https://users.ece.cmu.edu/~koopman/stack_computers/stack_computers_book.pdf

i have begun reading this. i'm also reading the oberon pdf.

if we can agree on some architecture to target, we could get Plain English running on an fpga-aided
hardware chip. and then eventually actual hardware. or we could virtualize. i'm also getting high off
the possibilities, so i might be signing myself up for more than i can support. but whatever:
enthusiasm is the great driver of innovation. (necessity will always be there; energy is the good
shepherd.)

but seriously, if there is an operating system, we need hardware. i assume you're not targeting
the standard intel asm (because it's a bloated whale of a system). take the iphone route (custom
software to match custom hardware). 

\ I can't think of a better way to display that, since I don't think a pie chart is warranted.

i like this. the console is where i spend most of my time. the fact that CAL has easy console
support is music to my soul.

peace,
mo


