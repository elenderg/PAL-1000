\ Jasper,

Usually the overall test time bounces around between
120 ms and 150 ms.  Here is a recent run of overall test times,
in milliseconds:
219, 130, 144, 133, 132, 139, 131, 131, 132, 132, 132
It seems that the high values (such as 219 and 144)
happen after I have been doing things other than compiling
and testing CAL.  Perhaps the OS or processor needs
to look stuff up at first, and then uses cached values
or pipelines later on.

\ I think you're correct that the cache gets filled up with 
\ other stuff and has to be re-optimized.

I have not noticed any variations in the run-times
of the fastest tests.  They always seem to be 4 µs.

My longest running tests are consistently ranked from run-to-run.

I just had a 144 millisecond overall run,
and the longest test took 22 ms instead of its usual 15 ms.
This test measures the width of a text string in arial font.
Subsequent font width tests are consistently much faster.

\ Loading up a font is a non-trivial thing in Windows.
\ So I'm not surprised that subsequent tests are faster,
\ once the font is in memory (and/or the cache).

My third-longest test usually takes 8 or 9 ms,
but I have seen it take 10 ms.  This test verifies that
200021 is not prime, and caches the primes through its square root.

\ I don't remember if I ever sent you my super-fast-prime-checker,
\ so I put a copy in your mailbox. An article that describes how it
\ came to be can be found here:

\ https://osmosianplainenglishprogramming.blog/2018/05/05/plain-english-programming-kobayashi-maru-primes/

\ I don't have exact timings on how fast this method is; I only know that
\ it can count the 22,044 primes less than or equal to 250,000 in 16 milliseconds or less. 

\ --Gerry