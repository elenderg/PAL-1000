i'll try to hold off on questioning the speed in the future. i work in c/c++ on security software,
where we need to be conscious of how much cpu and memory we're using all the time. so i get
a little trigger-happy on optimizations. 

that sort/merge looks like quicksort or mergesort. i didn't find the quicksort's partitioning
function in the noodle, so maybe it's mergesort. 

\ Just 12 lines. And it's fast and stable.

that's a little prestidigitation there. the sort function is 12 lines, but there are other functions
you're calling from there. it's easier to read than c/java/python, but it's not the whole story.
now i'm just nit-picking, though. did you base this sort on mergesort? it looks very similar.

\ The traditional stack-frame approach is thus better for parameters and locals,
\ since it allows access to parameters and local variables by name (and not just position). Hence my
\ suggestion for a hybrid that uses the data stack for calculations (instead of registers) and
\ the return stack for parameter passing and local variables. I'm not certain, yet, that this is
\ superior to a simple register machine with a traditional stack; I'm just saying that it's simpler and
\ easier than trying to compile to a pure stack machine.

i understand what you're saying. i think either way is fine. my issue with using registers is that
you have to save them all whenever you call a function anyway, which is just more overhead.
why not just keep the data on the stack in the first place? but i understand manipulating stack
elements costs cycles, too. nothing's perfect.

\ By the way: How are errors reported when someone is using a command-line compiler with a separate
\ editor of his own choice?

touche.

i ordered an fpga development board, and i'll be spending some time learning how this thing works.
i haven't forgotten about linux/mac; i just found a shinier object!

\ What version of Windows are you running? On what kind of machine? I use a bottom-of-
\ the-line ($350) DELL all-in-one computer with bloated Windows 10, and I experience none of
\ the problems you describe. It was even faster and better with XP.

i'm running a windows 10 system inside of a virtual machine, because my desktop is linux. it's
almost certainly a problem with virtualization.

\ [A modified forth chip would be] modified in what way?

there are quite a few hardware implementations of the forth machine. i have looked over a couple
of them. most of them seem to be 16-bit chips. i thought we'd target 32-bit architecture. if you
disagree, then we could just grab some forth chips and start from there. the forth-chip architecture
seems to be pretty simple.

\ I'm not sure what you mean by "full stack-based programming."

i meant pure-stack programming. i figured we'd start pure-stack and then move away from that if we
found it too restrictive.

i didn't write yesterday, because i was very sick. i'm thinking food poisoning, since it only lasted
for  a day. it's been almost 10 years since i was that sick. i hope it's another 10! or 20!

hope you're well!

peace,
mo