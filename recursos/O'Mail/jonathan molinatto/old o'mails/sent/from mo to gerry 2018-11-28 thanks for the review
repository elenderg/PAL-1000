thank you for reviewing the little calculator program! you're right about trying to design first.
it also didn't occur to me to create a container "object". i know CAL doesn't truck with objects,
but it actually performs many of the same functions that tend to be associated with more
object-oriented languages/approaches: creating destructors, the use of records/structs/generic-things
as containers of disparate fields. your implementation seemed quite natural and elegant.

it seems that some of your functions don't modify global variables at all, but some do. do you care
much one way or the other about when functions operate on globals implicitly and when they do so
explicitly. (as in requiring functions not to touch globals in favor of passing them in through function
arguments, versus not requiring this behavior.)

i can agree on the usefulness of reverse-polish notation, instead of building complicated mathematical
precedence logic into a programming language.

i like being able to explain complicated concepts in simple terms, but i tend to avoid those interactions,
because i find most people don't actually want to understand: they just want some trivial saying they
can hold onto (especially if it has the appearance of truth, regardless of whether it bears any resemblance
to fact). it's part of the problem with our education system: the kids don't need to start school earlier
and earlier; they need to be taught in a way that makes sense, instead of forcing them to sit still
and listen to lectures. (i have a bit of a soapbox in this area.)

thanks for the info about the windows integration. it seems that i have more work ahead of me than
i suspected. i'm confident that the documentation for linux/macos desktop programming is not as
thorough (or even existent) as the msdn docs.

\ But did you print it? The manual is a "feely," like the stuff the Infocom folks used to include with
\ their text adventures. I've put a document with a photo of our original packaging prototype in your mailbox.

i didn't print it. i like the original packaging prototype. (i also like your tube-amp idea. do you still
have some parts lying around? i have a young cousin-in-law who's interested in hardware stuff,
and this might be a fun project to use to introduce her to audio and fourier analysis.)

i've read your comments in jasper's git repository. and i think that strategy will definitely work
for single-programmer projects, but is unlikely to scale if Plain English gains momentum. teams
can't all work on the same files in the same shared directory without clobbering each others' work.
i'm sure you know all of that. and you can be sure that i know that git is an obnoxiously large and
complicated system with lots of awkward commands and frustrating side-effects. but it is popular
and stable. it's not fun. but then, neither is managing a bunch of directories. version control isn't
fun. but it is useful.

i'm not young anymore, but i still find that i prefer for intellectual equilibrium with others. i
feel stressed when i'm not in agreement with others i respect. it's a problem i should be
working on (it's in a queue...a long queue).

i don't really know how to close out messages without some self-deprecating comment. so this
will be abrupt, i guess.

peace,
mo