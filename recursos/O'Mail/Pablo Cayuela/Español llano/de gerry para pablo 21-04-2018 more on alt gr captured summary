Dear Gerry,

\Here we go: \|@#~€¬[]{}
\All keys and symbols working with alt gr + symbol key here in modified SAL-1004.

Success! I will make the same changes to the SAL-1004 and SAL-1005 here.

\Here we go again: \|@#~€¬[]{}
\All keys and symbols working with ctrl + (left) alt + symbol key here in modified SAL-1004.

Success again! Now I don't have to buy a Spanish keyboard to experiment with.

\In Spanish Windows it seems the equivalent combination of ctrl + alt + symbol key is working fine as well as alt gr + symbol key, all trying on my Spanish keyboard. Probed on MS Notepad.
\On the unrelated editor Notepad++: ctrl + alt + broken bar, failed and sends cursor at start of line; but alt gr + all symbol keys, fine.

What does ctrl + alt + broken bar do in the SAL?
What does alt gr + broken bar do in the SAL?

\A rule of thumb: nouns and adjectives ending with -o: masculine; in -a: feminine; in -e: neutral or both uses masc./fem.; others: no rule; there are some exceptions.

Thanks, that helps. I can probably remember "el with -o; la, lo, las, los with everything else." Not perfect, but not bad for a gringo!

\I guess we are not trying to check this by now, because SAL does not take into account if we use "el/la/los/las/lo" for simplicity, right?
\I'm only telling you to clariphy some rules of Spanish.
\As the example of the dog and the baby, we listen to foreigners mistaking el/la or los/las and discarding articles only to keep nouns and adjectives, despite not matching gender either.

Exactly. We are not checking grammar now, and we will not be checking it in the future. It is a "feature" of both the CAL and SAL that they can
understand natural language sentences even when the grammar is bad. And common spelling errors can also be ignored if the programmer
defines them in his headers, for example:

To erase the screen;
To erace the screen: \ mispelled "erase"

In other words, the "vocabulary" of the language is defined by the user (not you and me) in his type and global variable definitions;
and the "grammar" of the language is defined by the user (not you and me) in his routine headers.

The idea is to let the user/programmer/teacher define his own "local dialect" of the language for his own (and his friends' and his student's) use.
So we put as little as possible in the compiler, and as much as possible in El Seso. And in other user-created "brains" (libraries).
Imagine specialized "el sesoes" for each of your target audiences: one or more for beginners, one or more for engineers,
one or more for teaching robotics, one or more for game programmers, etc. 

\I forget to correct these lines:
\\Si el clase de el evento es "tecla abajo", escribir "tecla abajo" luego "    tecla=" luego la tecla del evento luego "    byte=" luego la byte del evento
\\ luego "     mayúsculas=" luego la bandera mayúsculas del evento luego "     ctrl=" luego the bandera ctrl del evento luego "    alt=" luego the bandera alt del evento en la consola.
\to 
\\Si la clase de el evento es "tecla abajo", escribir "tecla abajo" luego "    tecla=" luego la tecla del evento luego "    byte=" luego el byte del evento
\\ luego "     mayúsculas=" luego la bandera mayúsculas del evento luego "     ctrl=" luego la bandera ctrl del evento luego "    alt=" luego la bandera alt del evento en la consola.

Yes, I saw and fixed that, just for practice. It's only a test program, anyway.

\We never write 'de el' but 'del' that is a contraction.
\We could understand both forms:
\But this is the correct one in Modern Spanish, both formal and informal:
\Si el clase del evento es "tecla abajo", escribir "tecla abajo" luego "    tecla=" luego la tecla del evento luego...
\Yes, I do try now 'del' instead of 'de el' on "comprobador..." and is working fine.

If you're curious, I had to "trick" the compiler to make both forms work. This is the routine that handles
"reverse-possessives" like "el clase de el evento" instead of the English "the event's kind".
When we enter this routine, the rider is sitting on either a "de" or a "del":

To compile a term given a rider and a field name (reverse-possessive):  \ this is recursive
If the compiler's abort flag is set, exit.
If the rider's token is not "del", Move the rider (compiler rules). \ past the reverse-possessive starter
If the rider's token is "del", Add 1 to the rider's token's first. \ makes the "el" part of "del" look like the next token in the source
If the rider's token is not the start of any variable, abort with "Esperaba una palabra 'el/la/los/las/lo', pero encontré '" then the rider's token then "'." and the rider; exit.
Move the rider (compiler rules).
Scan a name given the rider. 
If the rider's token is any reverse-possessive, put yes into a reverse-possessive flag.
If the reverse-possessive flag is yes, compile the term given the rider and the name (reverse-possessive).
If the reverse-possessive flag is no, compile the term given the rider and the name (reverse-possessive prepare to unwind).
Compile the term given the field name and the rider (reverse-possessive).

We had to make it recursive so the order of the names would be reversed when we "unwind".
The code-generation part of the compiler, you see, is expecting outside-to-inside field access, like this:

The screen's box's left... \ PASCAL: screen.box.left

But in Spanish we get the reverse:

La izquierda de la caja de la pantalla.... \ PASCAL: left.box.screen

In any case, it appears to work acceptably well, though it unfortunately disallows use of "de" or "del" as a preposition.

I still need the rest of those "key" globals translated.
After that, I've got a few basic record types that need translating.
Then we will be ready to start translating the SAL Monet (pages 4-54 of the manual).
This is an important program because it exercises all the fundamental parts of the compiler,
and uses most of the general-purpose routines in the Noodle.

Tu compañero Quijote, Gerry.
