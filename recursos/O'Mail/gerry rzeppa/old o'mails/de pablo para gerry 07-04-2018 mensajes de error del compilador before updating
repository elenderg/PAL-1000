\Dear Gerry,

\Before you've updated error messages, I already have this.
\Hope to be useful.

\Tu amigo Pablo

\--------
\Hello again, Pablo!

\I am behind schedule. Our internet service was broken all day yesterday.
\I will try to get the status message translations and the corrections into the code tonight.

\---

\You probably noticed that the drive types that appear in the finder are still in English.
\This is the Noodle routine that provides the type names:

\To get a drive kind for a path:
\Privatize the path.
\Null terminate the path.
\Call "kernel32.dll" "GetDriveTypeA" with the path's first returning a number. \
\If the number is 2 [drive_removable], put "disco removible" into the drive kind; exit. \ removable drive
\If the number is 3 [drive_fixed], put "disco duro o flash" into the drive kind; exit.\ hard disk / flash drive
\If the number is 4 [drive_remote], put "unidad de red" into the drive kind; exit. \ network drive
\If the number is 5 [drive_cdrom], put "unidad de cd/dvd-rom" into the drive kind; exit. \ cd-rom / dvd drive
\If the number is 6 [drive_ramdisk], put "unidad virtual en memoria" into the drive kind; exit. \ virtual drive in memory
\Put "" into the drive kind.

\The words in double-quotes need to be translated.

\---

\The last big batch of messages that need to be translated are in the Compiler. There are 146 of them:

\---

\Abort with "No sé cómo '" then the moniker then "'." and the locus. \ I don't know how to '
\If the routine is nil, abort with "No sé cómo '" then the moniker then "'." and the locus; exit. \ I don't know how to '
\If the routine is nil, abort with "No sé cómo '" then the moniker then "'." and the byte pointer; exit. \ I don't know how to '
\If the routine is nil, abort with "No sé cómo '" then the moniker then "'." and the locus; exit. \ I don't know how to '
\If the other field is nil, abort with "Redefinición inválida. No pude encontrar '" then the field's redefinition target name then "' field." and the field's locus; exit. \ Invalid redefine. I can't find the
\If the type cannot be reduced to "record", abort with "Info opcional 'con' solo permitida en tipo registro." and the type's locus; exit. \ Optional 'with' info is only allowed on record types.
\If the type cannot be reduced to "number", abort with "Escalas solo permitidas en tipos numéricos." and the type's locus; exit. \ Scales are only allowed on number types.
\If the type cannot be reduced to "pointer", abort with "Info optional 'to' info is only allowed on pointer types." and the type's locus; exit. \ Optional 'to' info is only allowed on pointer types.?
\\I don't know if this 'to' is translated as 'para' or 'a' because of conflict
\If the routine is nil, abort with "Necesito una rutina para '" then the string then "'."; exit. \ I need a routine to '
\If the target routine is nil, abort with "Has definido una forma alternativa aquí, pero no estoy seguro de qué cosa es." and the rider; exit. \ You've defined an alternate wording here, but I'm not sure what you're rewording.
\If the rider's token is not ".", abort with "Las oraciones usadas deben terminar en un punto y no '" then the rider's token then "'." and the rider; exit. \ Employ statments should end with a period not '
\If the rider's token is not blank, abort with "Una vez empleado, no hay otro" and the rider; exit. \ Once an employ, only an employ
\If the other routine is nil, abort with "No pude encontrar '" then the routine's employs moniker then "' routine you're trying to employ." and the routine's locus; exit. \ I can't find the
\If the i/o error is not blank, abort with the i/o error. \ 
\If the rider's token is not "by", abort with "Prefiero la frase 'dividido POR'." and the rider; exit. \ I really prefer the phrase 'divided BY'.
\If the expression's variable is nil, abort with "Inválido el 'dividido por', no entiendo la variable '" then the expression's phrase then "'." and the rider; exit. \ Invalid 'divided by', I don't understand the variable '
\If the term's variable is nil, abort with "Inválido el 'dividido por', no entiendo la variable '" then the term's phrase then "'." and the rider; exit. \ Invalid 'divided by', I don't understand the variable '
\If the expression's variable is nil, abort with "Inválido el 'menos', no entiendo la variable '" then the expression's phrase then "'." and the rider; exit. \ Invalid 'minus', I don't understand the variable '
\If the term's variable is nil, abort with "Inválido el 'menos', no entiendo la variable '" then the term's phrase then "'." and the rider; exit. \ Invalid 'minus', I don't understand the variable '
\If the expression's variable is nil, abort with "Inválido el 'más', no entiendo la variable '" then the expression's phrase then "'." and the rider; exit. \ Invalid 'plus', I don't understand the variable '
\If the term's variable is nil, abort with "Inválido el 'más', no entiendo la variable '" then the term's phrase then "'." and the rider; exit. \ Invalid 'plus', I don't understand the variable '
\If the expression's variable is nil, abort with "Inválido el 'luego', no entiendo la variable '" then the expression's phrase then "'." and the rider; exit. \ Invalid 'then', I don't understand the variable '
\If the term's variable is nil, abort with "Inválido el 'luego', no entiendo la variable '" then the term's phrase then "'." and the rider; exit. \ Invalid 'then', I don't understand the variable '
\If the expression's variable is nil, abort with "Inválido el 'veces', no entiendo la variable '" then the expression's phrase then "'." and the rider; exit. \ Invalid 'times', I don't understand the variable '
\If the term's variable is nil, abort with "Inválido el 'veces', no entiendo la variable '" then the term's phrase then "'." and the rider; exit. \ Invalid 'times', I don't understand the variable '
\If the routine's moniker is in the routine index, abort with "Ya sé cómo '" then the routine's moniker then "'." and the routine's locus; exit. \ I already know how to '
\If the rider's token is not "if", abort with "Se dice 'Decidir SI'. Siempre 'Decidir SI'. ¿Se entiende?" and the rider; exit. \ It's 'Decide IF.' We always say, 'Decide IF'. Got it?
\If any of the routine's monikettes are negative words, abort with "No es buena idea usar negativos en los nombres de los decisores." and the rider; exit. \ It's a bad idea to use negatives in decider names.
\If the routine's moniker is in the routine index, abort with "Ya sé cómo '" then the routine's moniker then "'." and the routine's locus; exit. \ I already know how to '
\If the rider's token is not any possessive, abort with "Falta un 's o está mal ubicado aquí." and the rider; exit. \ An 's is missing or misplaced here.
\If the rider's token is not "into", abort with "Esperaba la palabra 'en', pero encontré '" then the rider's token then "'." and the rider; exit. \ I was expecting the word 'into', but found '
\If the moniker is in the routine index, abort with "Ya sé cómo '" then the moniker then "'." and the routine's locus; exit. \ I already know how to '
\If the rider's token is not any indefinite article, abort with "Esperaba un artículo indefinido, pero encontré '" then the rider's token then "'." and the rider; exit. \ I was expecting an indefinite article, but found '
\If the rider's token is not blank, abort with "Hay cosas demás en el final de esta función." and the rider; exit. \ There's extra stuff on the end of this function.
\If the routine's moniker is in the routine index, abort with "Ya sé cómo '" then the routine's moniker then "'." and the routine's locus; exit. \ I already know how to '
\If the type is nil, abort with "'" then the name then "' no es una unidad de medida válida." and the literal's locus; exit. \ ' is an invalid unit of measure.
\If the type cannot be reduced to "number", abort with "'" then the name then "' no es una unidad de medida válida." and the literal's locus; exit. \ ' is an invalid unit of measure.
\If the final ratio's denominator is 0, abort with "Parece que no tenemos una unidad de medida válida aquí." and the literal's locus. \ We seem to have an invalid unit of measure here.
\Abort with "'" then the rider's token then "' no es válido en un encabezado de rutina." and the rider. \ is not valid in a routine header.
\If the parameter is duplicated in the parameters, abort with "Amigo, ya hay un parámetro llamado '" then the parameter's name then "'." and the parameter's locus; exit. \ Dude, you already have a parameter called
\If the rider's token is not the start of any statement, abort with "Esperaba una sentencia aquí, pero encontré '" then the rider's token then "'." and the rider; exit. \ I was expecting a statement here, but I found '
\If the rider's token is not the period byte, abort with "Parece que has olvidado un punto por ahí." and the rider; exit. \ You seem to have forgotten a period around here.
\If the rider's token is not any string literal, abort with "Hey, esperaba que cites un nombre de entrada, pero encontré '" then the rider's token then "'." and the rider; exit. \ Gee, I was expecting a quoted entry name, but I found
\If the term's variable is nil, abort with "No entiendo la variable '" then the term's phrase then "'." and the rider; exit. \ I don't understand the variable
\If the expression's variable is nil, abort with "No entiendo la variable '" then the expression's phrase then "'." and the rider; exit. \ I don't understand the variable '
\If the expression's type cannot be reduced to "pointer", abort with "Yo necesito un tipo puntero en esta LLAMADA." and the rider; exit. \ I really need a pointer type in this CALL statement.
\If the term's variable is nil, abort with "No entiendo la variable '" then the term's phrase then "'." and the rider; exit. \ I don't understand the variable '
\Abort with "No sé cómo '" then the moniker then "'." and the rider. \ I don't know how to
\If the expression's variable is nil, abort with "No entiendo la variable '" then the expression's phrase then "'." and the rider; exit. \ I don't understand the variable '
\If the expression's type is not value pushable, abort with "'" then the expression's type's name then "' no se pudo pasar adecuadamente." and the rider; exit. \ ' can't be passed properly.
\If the current routine's decider flag is set, abort with "¿Qué significa una 'salida' justo aquí? ¿Sí, no, tal vez?" and the rider; exit. \ What does 'exit' mean here? Yes? No? Maybe?
\If the routine is nil, abort with "Necesito un decisor con las palabras '" then the moniker then "'." and the rider; exit. \ I need a decider with the words '
\If the routine's decider flag is not set, abort with "Sííí, necesitaré un decisor aquí, ¿bien?" and the rider; exit. \ Yeah, I'm going to need a decider here, ok?
\If the rider's token is not the comma byte, abort with "Esperaba una coma por ahí, pero encontré '" then the rider's token then "'." and the rider; exit. \ I expected a comma around here, but I found ' 
\If the rider's token is not the period byte, abort with "Pensaba en un punto, pero pusiste '" then the rider's token then "'." and the rider; exit. \ I'm thinking period, but you've got '
\If the rider's token is not any hex literal, abort with "Necesito código de máquina aquí; encontré '" then the rider's token then "'." and the rider; exit. \ I need some machine code here, I found '
\If the rider's token is not the period byte, abort with "Parece que olvidaste un punto por ahí." and the rider; exit. \ You seem to have forgotten a period around here.
\If the rider's token is "if", abort with "Los anidamientos de sentencias SI son una clara señal de razonamiento poco claro. Piénsalo otra vez." and the rider; exit. \ Nested 'if' statements are a sure sign of unclear thinking. Think again.
\If the rider's token is "privatize", abort with "La sentencia 'privatizar' no puede usarse aquí." and the rider; exit. \ The 'privatize' statement cannot be used here.
\If the rider's token is "loop", abort with "Lazos luego de un SI es una buena forma de perder el almuerzo." and the rider; exit. \ Looping inside an 'if' statement is a good way to lose your lunch.
\If the rider's token is "employ", abort with "'Emplée' debe ser el único imperativo en una rutina." and the rider; exit. \ 'Employ' must be the first and only imperative in a routine.
If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's kind is "literal", abort with "You've got the wrong kind of variable here." and the rider. \ 
If the term's type's length is not 4, abort with "You've got the wrong kind of variable here." and the rider. \ 
If the rider's token is not "to", abort with "I was expecting the word 'to', but found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not "routine", abort with "I was expecting the word 'routine' but found '" then the rider's token then "'." and the rider; exit. \ 
If the routine is nil, abort with "I can't find the '" then the moniker then "' routine to which you are trying to point." and the rider; exit. \ 
If the term's variable is nil, abort with "Invalid 'privatize', I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's kind is not "parameter", abort with "You can only privatize parameters." and the rider; exit. \ 
If the rider's token is not the period byte, abort with "You seem to have forgotten a period around here." and the rider; exit. \ 
If the expression's variable is nil, abort with "Invalid 'push', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit. \ 
If the expression's type is not value pushable, abort with "Values of type '" then the expression's type's name then "' can't be pushed." and the rider; exit. \ 
If the expression's variable is nil, abort with "Invalid 'say', I don't understand the variable '" then the expression's phrase then "'." and the rider; exit. \ 
If the expression's type cannot be reduced to "flag", abort with "I need a definite 'yes' or 'no' here." and the rider; exit. \ 
If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's type is not value pushable, abort with "A simple 1, 2, or 4-byte variable is required in the 'returning' clause." and the rider. \ 
Abort with "'" then the rider's token then "' is not valid in an employ statement." and the rider. \ 
If the rider's token is not "if", abort with "We always say DECIDE IF, not DECIDE and then '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not any possessive, abort with "I was expecting an 's, but found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not "into", abort with "I was expecting the word 'into', but found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not any indefinite article, abort with "I was expecting an indefinite article, but found '" then the rider's token then "'." and the rider; exit. \ 
If the type is nil, abort with "Invalid employ statement, I don't understand '" then the name then "'." and the rider; exit. \ 
If the term's variable is nil, abort with "Invalid 'as', I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the rider's token is not any indefinite article, abort with "I was hoping for an indefinite article after AS, but I found '" then the rider's token then "'." and the rider; exit. \ 
If the type is nil, abort with "I can't find the '" then the type name then "' type." and the rider; exit. \ 
Abort with "I expected a term hereabouts but all I found was '" then the rider's token then "'." and the rider. \ 
If the term's variable is nil, abort with "Invalid dereference, I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's type's target type is nil, abort with "I'm unable to determine the type of this target." and the rider; exit. \ 
If the other term's variable is nil, abort with "Invalid negate, I don't understand the variable '" then the other term's phrase then "'." and the rider; exit. \ 
If the current routine is nil, abort with "I don't know what you're trying to pull here." and the rider; exit. \ 
If the local is duplicated in the current routine's parameters, abort with "'" then the local's name then "' is already in use as a parameter." and the local's locus; exit. \ 
If the local is duplicated in the current routine's locals,abort with "'" then the local's name then "' is already in use as a local variable." and the local's locus; exit. \ 
If the term's variable is nil, abort with "Invalid posigate, I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's variable is nil, abort with "Invalid use of magnitude, I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's variable is nil, abort with "Invalid use of target, I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's type cannot be reduced to "pointer", abort with "You can only get the target of pointer types." and the rider; exit. \ 
If the term's variable is nil, abort with "Invalid use of whereabouts, I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the term's variable is nil, abort with "Invalid use of /, I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the other term's variable is nil, abort with "Invalid use of /, I don't understand the variable '" then the other term's phrase then "'." and the rider; exit. \ 
If the current routine is nil, abort with "I don't know what you're trying to pull here." and the rider; exit. \ 
If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the type is nil, abort with "There's no '" then the name then "' field in a '" then the term's type's name then "'." and the rider; exit. \ 
If the field is nil, abort with "There's no '" then the name then "' field in a '" then the term's type's name then "'." and the rider; exit. \ 
If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit. \ 
If the other routine is nil, abort with "I can't find the '" then the routine's employs moniker then "' routine you're trying to employ." and the routine's locus; exit. \ 
If the other routine's address is -1, abort with "Recursive reference in employ clause." and the routine's locus; exit. \ 
If the global's name is in the global index, abort with "'" then the global's name then "' is a duplicate global variable." and the global's locus; exit. \ 
Abort with "I think I've seen this '" then the name then "' type somewhere before; it must be a duplicate." and the locus. \ 
If the error string is not blank, abort with the error string and the rider's token's first; exit. \ 
If the i/o error is not blank, abort with "Could not load the file named '" then the source file's path then "'."; exit. \ 
If the field's name is not any valid field name, abort with "'" then the field's name then "' is not a valid field name." and the field's locus; exit. \ 
If the global's type name is blank, abort with "Invalid global '" then the global's name then "'." and the global's locus; exit. \ 
If the rider's token is not any literal, abort with "I need a literal here, but I found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not blank, abort with "Is a period missing around here?" and the rider; exit. \ 
If the type's base type is nil, abort with "Invalid base type '" then the type's base name then "'." and the type's locus; exit. \ 
If the type's base type's cooking flag is set, abort with "Recursive definition with '" then the type's base name then "'." and the type's locus; exit. \ 
If the type's target type is nil, abort with "I can't quite see what you're pointing at. Please clarify." and the type's locus; exit. \ 
If the field is duplicated in the type's fields, abort with "The '" then the field's name then "' field is defined more than once." and the field's locus; exit. \ 
If the field's type's cooking flag is set, abort with "Recursive definition with '" then the field's type's name then "'." and the field's locus; exit. \ 
If the field's type cannot be reduced to "pointer", abort with "Exactly what do you mean by '(reference)' here on this '" then the field's name then "'?" and the field's locus; exit. \ 
Abort with "I can't find the '" then the variable's name then "' type." and the variable's locus. \ 
If the variable's type is nil, abort with "I can't find the '" then the variable's type name then "' type." and the variable's locus; exit. \ 
If the rider's token is not any indefinite article, abort with "The 'to' here needs to be followed by an indefinite article, not '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not "the", abort with "I was expecting the word 'the', but found '" then the rider's token then "'." and the rider; exit. \ 
If the ratio's denominator is not 1, abort with "You have to specify a whole number of bytes for a byte array" and the rider; exit. \ 
If the rider's token is not "byte" or "bytes", abort with "Nothing but the word 'bytes' is appropriate after a counted field designator." and the rider; exit. \ 
If the rider's token is not any indefinite article, abort with "I was expecting an indefinite article, but found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not "is" or "are", abort with "Geez. I need an 'is' or an 'are' hereabouts, but all I found was '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not the period byte, abort with "All global definitions must end with a period. Including this one." and the rider; exit.  \ 
If the rider's token is not "to", abort with "I need the word 'to' after the word 'equal', not '" then the rider's token then "'." and the rider; exit.  \ 
If the rider's token is not the period byte, abort with "All global definitions must end with a period. Including this one." and the rider; exit.  \ 
If the rider's token is not the period byte, abort with "Your punctuation is bad here." and the rider; exit.  \ 
If the rider's token is not the period byte, abort with "All global definitions must end with a period. Including this one." and the rider; exit.  \ 
If the rider's token is not the period byte, abort with "All global definitions must end with a period. Including this one." and the rider; exit.  \ 
If the name is blank, abort with "I was kind of hoping for a name around here, but I found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is the colon byte, abort with "You may have forgotten a period somewhere above this. You better check." and the rider; exit. \ 
If the rider's token is not the colon byte, abort with "This routine header is improperly formulated." and the routine's locus; exit. \ 
If the rider's token is not "to", abort with "I think that there semi-colon is misplaced." and the original rider; exit. \ 
Abort with "I was hoping for a definition but all I found was '" then the rider's token then "'." and the rider. \ 
If the rider's token is not "is" or "are", abort with "I was expecting an 'is' or 'are', but I found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not any indefinite article, abort with "I was expecting an indefinte article, but I found '" then the rider's token then "'." and the rider; exit.  \ 
If the rider's token is not the period byte, abort with "Types need to end with a period, I found '" then the rider's token then "'." and the rider; exit. \ 
If the rider's token is not the period byte, abort with "Types need to end with a period, I found '" then the rider's token then "'." and the rider; exit. \ 
If the type's scale is 0, abort with "Zero is an invalid scale." and the type's locus; exit. \ 
If the rider's token is not the period byte, abort with "Types need to end with a period, I found '" then the rider's token then "'." and the rider; exit. \ 
If the routine is nil, abort with "The type of this global and the type of its literal are not compatible." and the variable's locus; exit. \ 

---

No hurry. I realize this is a lot of work and that you are busy with three jobs and a new baby.
Here is some inspiration from an English-language musical version of the Don Quixote story:

https://www.youtube.com/watch?v=RfHnzYEHAow

---

Sharon thanks you for the kiss. She asks you to kiss the baby for her.
She wants to know what city you live in so Chuckles can put a pin in the map as part of his home-school geography studies.

Una vez mas, muchas gracias,

Tu compañero Quijote





