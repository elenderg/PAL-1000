Gerry,

My third-longest test usually takes 8 or 9 ms,
but I have seen it take 10 ms.  This test verifies that
200021 is not prime, and caches the primes through its square root.

\ I don't remember if I ever sent you my super-fast-prime-checker,
\ so I put a copy in your mailbox. An article that describes how it
\ came to be can be found here:

\ https://osmosianplainenglishprogramming.blog/2018/05/05/plain-english-programming-kobayashi-maru-primes/

\ I don't have exact timings on how fast this method is; I only know that
\ it can count the 22,044 primes less than or equal to 250,000 in 16 milliseconds or less. 

Thank you for the article, and for this version of the cached prime checker.
You've shared a similar cached prime checker with me before.
My computer is slower than yours; your method took 30 - 31 ms
on my computer to count the primes through 250,000.

Thank you for the dare to look at my prime number and bit array code.
I have two prime number caches:  One for primes from 1 through 46,340,
and another for large primes.  Caching the small primes helps with this
benchmarking test, but caching the large primes hurts.  So I added
a qualifier to "(ignore large cache)" when checking primes.
I also fixed the code to clear a bit in the bit array.
The prime number code only sets and reads bits, it never clears them.
It can determine if any 32-bit signed integer is prime.

My code now takes between 5 and 6 seconds to count the primes
through 250,000.  That is starting without any cached primes,
and performing the full sieve of Eratosthenes algorithm.

Your code is much simpler than mine.  But even at 320 lines
(including tests, white space, and bit array code),
mine is shorter.  (When measured in bytes, of course.)

-- Jasper