thank you for reviewing the little calculator program! you're right about trying to design first.
it also didn't occur to me to create a container "object"...

\ I think that's because you've learned to think "inside out," like most programmers.
\ If you ask a normal person to describe a calculator, they will say something like:
\ "A calculator is a thing with a display and some buttons." Which is very close to my Plain English
\ record definition. I think it would behoove us all to re-learn how to think normally.

...i know CAL doesn't truck with objects,
but it actually performs many of the same functions that tend to be associated with more
object-oriented languages/approaches: creating destructors, the use of records/structs/generic-things
as containers of disparate fields. your implementation seemed quite natural and elegant.

\ Any similalrities to the object paradigm are there only because the object paradigm borrowed those ideas
\ from older, record-based systems. The important difference is that we separate "objects" (nouns) from the actions
\ performed on them (verbs). This separation fixes the fatal flaw in the object paradigm, where the metaphor requires
\ objects to act on themselves, instead of being acted upon by a third party.

\ Simple example:
\ A tire is a thing with... (noun/record/object)
\ A car is a thing with some tires... (noun/record object)
\To install a tire on a car: (verb/routine/method)

\ In Plain English, we know exxactly where that verb/routine goes: in with the rest of the routines.
\ But in the object paradigm, we don't know whether to make "install" part of the tire object or part of the car object!
\ Either option, of course, is silly because tires don't install themselves, and cars don't install their own tires.

\ Don't forget that the Father of the Object Paradigm was Alan Kay, a biologist, who was trying to make programmed
\ objects mimic cells in living things. Nifty idea, if programs were living things and each object had its own CPU.
\ But they aren't, and they don't. Programs are lists of procedural instructions executed by a central CPU at the behest
\ of the procedure-writer.

it seems that some of your functions don't modify global variables at all, but some do. do you care
much one way or the other about when functions operate on globals implicitly and when they do so
explicitly. (as in requiring functions not to touch globals in favor of passing them in through function
arguments, versus not requiring this behavior.)

\ The trade-off between operating directly on a global variable, and passing it around, is mainly one of
\ simplicity and conciseness versus encapsulation. It's safer, of course, to pass things around and keep variables local;
\ but it's often simpler and easier to work with globals directly. So we typically make the call on a case-by-case basis.
\ In our compiler, for example, the "abort flag" is global; it would be a serious pain to have to pass that to
\ every routine that might encounter a serious error.

i can agree on the usefulness of reverse-polish notation, instead of building complicated mathematical
precedence logic into a programming language.

\ You've made Aunt Tilly smile again.

i like being able to explain complicated concepts in simple terms, but i tend to avoid those interactions,
because i find most people don't actually want to understand: they just want some trivial saying they
can hold onto (especially if it has the appearance of truth, regardless of whether it bears any resemblance
to fact).

\ Yeah, like the Bible says, "People are just no damn good," Romans 3:10. But it's still good to be able to reduce
\ something to the simplest possible explanation, yes?

it's part of the problem with our education system: the kids don't need to start school earlier
and earlier; they need to be taught in a way that makes sense, instead of forcing them to sit still
and listen to lectures. (i have a bit of a soapbox in this area.)

\ No doubt. The education system is a serious mess. They don't even know how to teach reading anymore,
\ which is what inspired us to develop our www.rhymingreader.com materials. Since we can't fix the whole
\ system, we develop products like that, and homeschool our own kids. And send them to public school,
\ on and off, as well, just so they can see what the other folks are doing.

thanks for the info about the windows integration. it seems that i have more work ahead of me than
i suspected. i'm confident that the documentation for linux/macos desktop programming is not as
thorough (or even existent) as the msdn docs.

\ Which is how we ended up on Windows.

i didn't print it. i like the original packaging prototype. (i also like your tube-amp idea. do you still
have some parts lying around? i have a young cousin-in-law who's interested in hardware stuff,
and this might be a fun project to use to introduce her to audio and fourier analysis.)

\ I have parts lying around, but no kits. Ken Amdahl's book is the best book I know of regarding
\ electronics (https://www.amazon.com/dp/0962781592/) and these folks (https://www.modkitsdiy.com/kit/mod-102-guitar-amp-kit)
\ have the least expensive and most educational guitar amp kits.

i've read your comments in jasper's git repository. and i think that strategy will definitely work
for single-programmer projects, but is unlikely to scale if Plain English gains momentum. teams
can't all work on the same files in the same shared directory without clobbering each others' work.
i'm sure you know all of that.

\ The idea, if Plain English "gains momentum," is for other programmers to develop (in Plain English) and document
\ (using the CAL's Writer) additional Noodle-like libraries for use with the standard, unmodified CAL.
\ (I, for example, should have put the turtle graphics stuff in a separate library and documented it in a separate
\ but similar manual.) Perhaps someone else will make a library for accessing relational databases using SQL, or
\ a library for 3D graphics and game programming, or a library that talks to certain kinds of robotic devices, etc.
\ In any case, each library would be developed as a separate project by just one or two programmers, working closely together,
\ using nothing but the CAL. With this approach, the CAL will stay as he is, simple and familiar, while the system as a whole
\ will grow to encompass all kinds of application areas. With no need for complicated version control systems, Github, etc.

and you can be sure that i know that git is an obnoxiously large and
complicated system with lots of awkward commands and frustrating side-effects. but it is popular
and stable. it's not fun. but then, neither is managing a bunch of directories. version control isn't
fun. but it is useful.

\ Unnecessary overkill. See our vision for "Plain English with Momentum" above.
\ If the Github approach is so good, show me a single, small and simple program on Github that lets me:
\ 1. DESIGN a program (wysiwyg fashion, in exact 1:1 scale); then
\ 2. CODE it (in Plain English - entered, edited, etc); then
\ 3. COMPILE it (directly to a stand-alone executable); then
\ 4. TEST it, and
\ 5. DEBUG it; then
\ 6. DOCUMENT it (wysiwyg fashion, with text and graphics); and 
\ 7. DELIVER it to others (via the InterWeb).

i'm not young anymore, but i still find that i prefer for intellectual equilibrium with others. i
feel stressed when i'm not in agreement with others i respect. it's a problem i should be
working on (it's in a queue...a long queue).

\ I hope I'm not contributing to that stress, but I fear that I am. I'm not sure it's possible to be in 
\ "intellectual equilibrium" with the crowd-coders at the Github Bazaar and the monks in the Osmosian Monastery
\ at the same time. Maybe it's good that you keep Windows and Linux on separate machines. Compartmentalization.
\ After all, we can't fix what's wrong with the world by agreeing with it. Or by learning to like it.

i don't really know how to close out messages without some self-deprecating comment. so this
will be abrupt, i guess.

\ No self-deprecation necessary. All the self-deprecation in the world won't conceal the fact that you're an
\ intelligent, thoughtful guy.

\ All the best,
\Gerry