\ Guiding Principle #1: "Everything should be made as simple as possible, but not simpler."

i'm going to focus on project oberon and the stack computer book. once i have something i like,
i'll send you a diagram of what i'm thinking and get your opinion. i need to keep reminding myself
that this isn't going to happen over the weekend. it takes time to do things right, then evaluate,
then cut unnecessary cruft.

one thing we *do* have to keep in mind is that, once we're doing everything ourselves (kernel,
hardware, software, peripherals, display, etc), we won't have the benefit of the kludge. so we'll
need some dedicated video memory area, so that whatever gets put there shows up on the screen.
i've never done that before. i have no idea how that works. 

\ "How am I going to explain this to a bright 12-year-old? How long will it take? Will I be able to
\ keep him interested?"

i should get this tattooed on the inside of my forearm. (i don't actually have any tattoos; but i
like to daydream about the tattoos i'll never get. i don't have any problem with them, but i doubt
i'd actually get something permanent that i'll love forever. i have a bit of a problem with regrets.)

\ They sell a lot of Arduinos, and they're not hardened against hackers. I think a 32-bit "Arduino" with
\ Plain English and the CAL's simple and honest face would appeal to a lot of folks. Folks who wouldn't
\ care about security. If, in the end, we did no more than rid the world of 8-bit hobby computers, I'd still
\ consider our project a whopping success.

i hadn't considered that. i think the most common arduino (arduino uno) is an 8-bit MCU. i don't
know anything about the instruction set those use, but it's an interesting idea. looks like the manual
is almost 200 pages long. but there's a lot of white-space and diagrams. i don't think those typically
have any display ports (it's basically all serial programming). we could do a raspberry pi (based off
32-bit ARM processors). i believe ARM is big-endian. and it's RISC (not stack-based). it also has
lots of hardware bits and bobs that are nice. the ARM Cortex-A7 instruction manual is 268 pages.
but we wouldn't need all of that.

\ Hopefully, you won't have to. "Our CPU has just 32 instructions, son, and
\ our programs have the first instruction to be executed right at the start of the executable file..."

given what i know about stack-based computers, i don't know that we'd need 32 instructions.

\ Guiding Priniple #2 "A small success is more impressive than a big failure" (as my wife Sharon often reminds me).

another great tattoo idea...erm, well...

\ The "transmogrify" step in our compiler is the one that generates Intel x86 machine code.

did you get the term "transmogrify" from calvin and hobbes? i read those comics religiously as a 
kid. i assumed bill waterson came up with that word, but a quick internet search tells me that it's
much, much older. 

thanks for the update on outputting machine code! and i definitely think you'd be a better fit
for outputting machine code for whatever stack machine we come up with. i'll learn it eventually,
i'm sure. 

regarding big-endian: yes, i'd prefer to work in big-endian. it's network-byte-order, too. i don't
really understand why little-endian is so prevalent. it seems unnatural. even for hardware. and i
get that there are technical reasons why little-endian makes sense in some circumstances, but
at a very real cost of being completely backwards and difficult for users. [/rant]

what are your thoughts on memory management units?

peace,
mo


https://www.americanrhetoric.com/MovieSpeeches/moviespeechleanonme3.html